
BEA_CAN2CAN_DEMO_TEN1HC_HUST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005ca8  08005ca8  00006ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d44  08005d44  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005d44  08005d44  00006d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d4c  08005d4c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d4c  08005d4c  00006d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005d54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          0000131c  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001380  20001380  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d12f  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236b  00000000  00000000  000141c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  00016530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d2  00000000  00000000  00016f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211f2  00000000  00000000  0001774a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5ee  00000000  00000000  0003893c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7658  00000000  00000000  00046f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e582  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e04  00000000  00000000  0010e5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001113cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c90 	.word	0x08005c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08005c90 	.word	0x08005c90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <prepare_CAN_TX_frame>:
/*for further services please add service header here*/
#include "dcm_rdbi.h"
#include "dcm_wdbi.h"
#include "dcm_seca.h"

void prepare_CAN_TX_frame(uint8_t* CAN_TX_frame, uint8_t* data, uint8_t data_count){
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4613      	mov	r3, r2
 80005a8:	71fb      	strb	r3, [r7, #7]
	CAN_TX_frame[0] = data_count;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 1; i <= data_count; i++){
 80005b0:	2301      	movs	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]
 80005b4:	e00b      	b.n	80005ce <prepare_CAN_TX_frame+0x32>
		CAN_TX_frame[i] = data[i - 1];
 80005b6:	7dfb      	ldrb	r3, [r7, #23]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	441a      	add	r2, r3
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	440b      	add	r3, r1
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= data_count; i++){
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	3301      	adds	r3, #1
 80005cc:	75fb      	strb	r3, [r7, #23]
 80005ce:	7dfa      	ldrb	r2, [r7, #23]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d9ef      	bls.n	80005b6 <prepare_CAN_TX_frame+0x1a>
	}
	//Padding những bit còn lại bằng 0x55
	for (uint8_t j = 1; j < (8 - data_count); j++){
 80005d6:	2301      	movs	r3, #1
 80005d8:	75bb      	strb	r3, [r7, #22]
 80005da:	e00a      	b.n	80005f2 <prepare_CAN_TX_frame+0x56>
		CAN_TX_frame[(data_count + j)] = 0x55;
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	7dbb      	ldrb	r3, [r7, #22]
 80005e0:	4413      	add	r3, r2
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	2255      	movs	r2, #85	@ 0x55
 80005ea:	701a      	strb	r2, [r3, #0]
	for (uint8_t j = 1; j < (8 - data_count); j++){
 80005ec:	7dbb      	ldrb	r3, [r7, #22]
 80005ee:	3301      	adds	r3, #1
 80005f0:	75bb      	strb	r3, [r7, #22]
 80005f2:	7dba      	ldrb	r2, [r7, #22]
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f1c3 0308 	rsb	r3, r3, #8
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dbee      	blt.n	80005dc <prepare_CAN_TX_frame+0x40>
	}

}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <prepare_CAN_First_Frame>:

void prepare_CAN_First_Frame (uint8_t* CAN_TX_frame, uint8_t* data, uint16_t data_count) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	4613      	mov	r3, r2
 8000618:	80fb      	strh	r3, [r7, #6]
	if (data_count > 0x0FFF) {
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000620:	d30d      	bcc.n	800063e <prepare_CAN_First_Frame+0x32>
		data[0] -= 0x40;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b40      	subs	r3, #64	@ 0x40
 8000628:	b2da      	uxtb	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	701a      	strb	r2, [r3, #0]
		prepare_negative_response_buffer(CAN_TX_frame, data, data[0], 0x10);
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	2310      	movs	r3, #16
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f930 	bl	800089c <prepare_negative_response_buffer>
		return; }
 800063c:	e023      	b.n	8000686 <prepare_CAN_First_Frame+0x7a>

	CAN_TX_frame[0] = (0x01 << 4) | ((data_count >> 8) & 0x0F);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b25b      	sxtb	r3, r3
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	701a      	strb	r2, [r3, #0]
	CAN_TX_frame[1] = data_count & 0xFF;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 2; i < 8; i++){
 8000662:	2302      	movs	r3, #2
 8000664:	75fb      	strb	r3, [r7, #23]
 8000666:	e00b      	b.n	8000680 <prepare_CAN_First_Frame+0x74>
			CAN_TX_frame[i] = data[i - 2];
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	3b02      	subs	r3, #2
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	441a      	add	r2, r3
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	68f9      	ldr	r1, [r7, #12]
 8000674:	440b      	add	r3, r1
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i < 8; i++){
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	3301      	adds	r3, #1
 800067e:	75fb      	strb	r3, [r7, #23]
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9f0      	bls.n	8000668 <prepare_CAN_First_Frame+0x5c>
		}
}
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <prepare_CAN_Flow_Control_Frame>:

void prepare_CAN_Flow_Control_Frame (uint8_t* CAN_TX_frame) {
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if (consecutive_sequence_number > block_size) {
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <prepare_CAN_Flow_Control_Frame+0x64>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <prepare_CAN_Flow_Control_Frame+0x68>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d903      	bls.n	80006a8 <prepare_CAN_Flow_Control_Frame+0x1c>
		CAN_TX_frame[0] = (0x03 << 4) | 0x2;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2232      	movs	r2, #50	@ 0x32
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e002      	b.n	80006ae <prepare_CAN_Flow_Control_Frame+0x22>
	}
	else CAN_TX_frame[0] = (0x03 << 4) | 0x0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	701a      	strb	r2, [r3, #0]
	CAN_TX_frame[1] = block_size;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <prepare_CAN_Flow_Control_Frame+0x68>)
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	701a      	strb	r2, [r3, #0]
	CAN_TX_frame[2] = ST_min;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3302      	adds	r3, #2
 80006bc:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <prepare_CAN_Flow_Control_Frame+0x6c>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 3; i < 8 ; i++){
 80006c2:	2303      	movs	r3, #3
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e007      	b.n	80006d8 <prepare_CAN_Flow_Control_Frame+0x4c>
			CAN_TX_frame[i] = 0x55;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	2255      	movs	r2, #85	@ 0x55
 80006d0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 3; i < 8 ; i++){
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3301      	adds	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d9f4      	bls.n	80006c8 <prepare_CAN_Flow_Control_Frame+0x3c>
		}
	consecutive_sequence_number = 1;
 80006de:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <prepare_CAN_Flow_Control_Frame+0x64>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20001204 	.word	0x20001204
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000005 	.word	0x20000005

080006fc <prepare_One_CAN_Consecutive_Frame>:

void prepare_One_CAN_Consecutive_Frame (uint8_t* CAN_TX_frame, uint8_t* data, uint8_t data_count) {
 80006fc:	b480      	push	{r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]
	CAN_TX_frame[0] = (0x02 << 4) | (consecutive_sequence_number & 0x0F);
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <prepare_One_CAN_Consecutive_Frame+0x8c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b25b      	sxtb	r3, r3
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	b25b      	sxtb	r3, r3
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= data_count; i++){
 8000722:	2301      	movs	r3, #1
 8000724:	75fb      	strb	r3, [r7, #23]
 8000726:	e00b      	b.n	8000740 <prepare_One_CAN_Consecutive_Frame+0x44>
			CAN_TX_frame[i] = data[i - 1];
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	3b01      	subs	r3, #1
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	441a      	add	r2, r3
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	68f9      	ldr	r1, [r7, #12]
 8000734:	440b      	add	r3, r1
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= data_count; i++){
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	3301      	adds	r3, #1
 800073e:	75fb      	strb	r3, [r7, #23]
 8000740:	7dfa      	ldrb	r2, [r7, #23]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	429a      	cmp	r2, r3
 8000746:	d9ef      	bls.n	8000728 <prepare_One_CAN_Consecutive_Frame+0x2c>
		}
	for (uint8_t j = 1; j < (8 - data_count); j++){
 8000748:	2301      	movs	r3, #1
 800074a:	75bb      	strb	r3, [r7, #22]
 800074c:	e00a      	b.n	8000764 <prepare_One_CAN_Consecutive_Frame+0x68>
		CAN_TX_frame[(data_count + j)] = 0x55;
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	4413      	add	r3, r2
 8000754:	461a      	mov	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	4413      	add	r3, r2
 800075a:	2255      	movs	r2, #85	@ 0x55
 800075c:	701a      	strb	r2, [r3, #0]
	for (uint8_t j = 1; j < (8 - data_count); j++){
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	3301      	adds	r3, #1
 8000762:	75bb      	strb	r3, [r7, #22]
 8000764:	7dba      	ldrb	r2, [r7, #22]
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f1c3 0308 	rsb	r3, r3, #8
 800076c:	429a      	cmp	r2, r3
 800076e:	dbee      	blt.n	800074e <prepare_One_CAN_Consecutive_Frame+0x52>
	}
	consecutive_sequence_number++;
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <prepare_One_CAN_Consecutive_Frame+0x8c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <prepare_One_CAN_Consecutive_Frame+0x8c>)
 800077a:	701a      	strb	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	371c      	adds	r7, #28
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	20001204 	.word	0x20001204

0800078c <prepare_CAN_Consecutive_Frames>:

void prepare_CAN_Consecutive_Frames (uint8_t* CAN_TX_frame, uint8_t* data, uint16_t data_count) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	80fb      	strh	r3, [r7, #6]
    uint16_t offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	82fb      	strh	r3, [r7, #22]

    while (offset < data_count) {
 800079e:	e03a      	b.n	8000816 <prepare_CAN_Consecutive_Frames+0x8a>
        uint8_t chunk_size = (data_count - offset >= 7) ? 7 : (data_count - offset);
 80007a0:	88fa      	ldrh	r2, [r7, #6]
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	bfa8      	it	ge
 80007aa:	2307      	movge	r3, #7
 80007ac:	757b      	strb	r3, [r7, #21]

        // Prepare one frame
        prepare_One_CAN_Consecutive_Frame(CAN_TX_frame, &data[offset], chunk_size);
 80007ae:	8afb      	ldrh	r3, [r7, #22]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4619      	mov	r1, r3
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff ff9f 	bl	80006fc <prepare_One_CAN_Consecutive_Frame>

        // Send CAN frame here
        if (CAN_TX_frame == CAN1_DATA_TX) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <prepare_CAN_Consecutive_Frames+0x9c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d10c      	bne.n	80007e0 <prepare_CAN_Consecutive_Frames+0x54>
            CAN1_SendMessage(CAN_TX_frame);
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f000 f852 	bl	8000870 <CAN1_SendMessage>
		    USART3_SendString((uint8_t *)"ECU: ");
 80007cc:	4817      	ldr	r0, [pc, #92]	@ (800082c <prepare_CAN_Consecutive_Frames+0xa0>)
 80007ce:	f000 ff7f 	bl	80016d0 <USART3_SendString>
            PrintCANLog(CAN1_pHeader.StdId, CAN_TX_frame);
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <prepare_CAN_Consecutive_Frames+0xa4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 ff92 	bl	8001704 <PrintCANLog>
        }
        if (CAN_TX_frame == CAN2_DATA_TX) {
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <prepare_CAN_Consecutive_Frames+0xa8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d10c      	bne.n	8000802 <prepare_CAN_Consecutive_Frames+0x76>
			CAN2_SendMessage(CAN_TX_frame);
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f000 f82b 	bl	8000844 <CAN2_SendMessage>
		    USART3_SendString((uint8_t *)"TESTER: ");
 80007ee:	4812      	ldr	r0, [pc, #72]	@ (8000838 <prepare_CAN_Consecutive_Frames+0xac>)
 80007f0:	f000 ff6e 	bl	80016d0 <USART3_SendString>
			PrintCANLog(CAN2_pHeader.StdId, CAN_TX_frame);
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <prepare_CAN_Consecutive_Frames+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	68f9      	ldr	r1, [r7, #12]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 ff81 	bl	8001704 <PrintCANLog>
        }


        offset += chunk_size;
 8000802:	7d7b      	ldrb	r3, [r7, #21]
 8000804:	b29a      	uxth	r2, r3
 8000806:	8afb      	ldrh	r3, [r7, #22]
 8000808:	4413      	add	r3, r2
 800080a:	82fb      	strh	r3, [r7, #22]

        // Respect STmin delay here if necessary
        HAL_Delay(ST_min);  // If ST_min is in milliseconds
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <prepare_CAN_Consecutive_Frames+0xb4>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fab9 	bl	8001d88 <HAL_Delay>
    while (offset < data_count) {
 8000816:	8afa      	ldrh	r2, [r7, #22]
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	429a      	cmp	r2, r3
 800081c:	d3c0      	bcc.n	80007a0 <prepare_CAN_Consecutive_Frames+0x14>
    }
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200011e4 	.word	0x200011e4
 800082c:	08005ca8 	.word	0x08005ca8
 8000830:	2000015c 	.word	0x2000015c
 8000834:	200011f4 	.word	0x200011f4
 8000838:	08005cb0 	.word	0x08005cb0
 800083c:	2000019c 	.word	0x2000019c
 8000840:	20000005 	.word	0x20000005

08000844 <CAN2_SendMessage>:

void CAN2_SendMessage(uint8_t* data)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;
	HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &txMailbox);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <CAN2_SendMessage+0x20>)
 8000852:	4905      	ldr	r1, [pc, #20]	@ (8000868 <CAN2_SendMessage+0x24>)
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <CAN2_SendMessage+0x28>)
 8000856:	f002 f8a7 	bl	80029a8 <HAL_CAN_AddTxMessage>
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200011f4 	.word	0x200011f4
 8000868:	2000019c 	.word	0x2000019c
 800086c:	200000f0 	.word	0x200000f0

08000870 <CAN1_SendMessage>:

void CAN1_SendMessage(uint8_t* data)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;
	HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &txMailbox);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <CAN1_SendMessage+0x20>)
 800087e:	4905      	ldr	r1, [pc, #20]	@ (8000894 <CAN1_SendMessage+0x24>)
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <CAN1_SendMessage+0x28>)
 8000882:	f002 f891 	bl	80029a8 <HAL_CAN_AddTxMessage>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200011e4 	.word	0x200011e4
 8000894:	2000015c 	.word	0x2000015c
 8000898:	200000c8 	.word	0x200000c8

0800089c <prepare_negative_response_buffer>:
void prepare_negative_response_buffer(uint8_t* CAN_TX_frame, uint8_t* buffer, uint8_t SID, uint8_t NRC){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	460b      	mov	r3, r1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4613      	mov	r3, r2
 80008b0:	71bb      	strb	r3, [r7, #6]
	buffer[0] = 0x7F;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	227f      	movs	r2, #127	@ 0x7f
 80008b6:	701a      	strb	r2, [r3, #0]
	buffer[1] = SID;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	3301      	adds	r3, #1
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	701a      	strb	r2, [r3, #0]
	buffer[2] = NRC;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3302      	adds	r3, #2
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	701a      	strb	r2, [r3, #0]

	prepare_CAN_TX_frame(CAN_TX_frame, buffer, 3);
 80008c8:	2203      	movs	r2, #3
 80008ca:	68b9      	ldr	r1, [r7, #8]
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f7ff fe65 	bl	800059c <prepare_CAN_TX_frame>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SID_22_Practice>:
/*********BOSCH BEA PROGRAM SKELETON DEMO CODE************/
/*********************************************************/

#include "dcm_rdbi.h"

void SID_22_Practice(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
	uint8_t SID = CAN1_DATA_RX[1];
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <SID_22_Practice+0x84>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	73fb      	strb	r3, [r7, #15]
	uint8_t	DID_High = CAN1_DATA_RX[2];
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <SID_22_Practice+0x84>)
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	73bb      	strb	r3, [r7, #14]
	uint8_t	DID_Low = CAN1_DATA_RX[3];
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <SID_22_Practice+0x84>)
 80008f0:	78db      	ldrb	r3, [r3, #3]
 80008f2:	737b      	strb	r3, [r7, #13]
	uint8_t	len = CAN1_DATA_RX[0];
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <SID_22_Practice+0x84>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	733b      	strb	r3, [r7, #12]
	uint8_t data_buffer[8];

	if (len != 3) {
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d006      	beq.n	800090e <SID_22_Practice+0x32>
	    // Error 0x13: Incorrect length
		prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000900:	7bfa      	ldrb	r2, [r7, #15]
 8000902:	1d39      	adds	r1, r7, #4
 8000904:	2313      	movs	r3, #19
 8000906:	4817      	ldr	r0, [pc, #92]	@ (8000964 <SID_22_Practice+0x88>)
 8000908:	f7ff ffc8 	bl	800089c <prepare_negative_response_buffer>
 800090c:	e024      	b.n	8000958 <SID_22_Practice+0x7c>

	    return;
	}

	if (DID_High == 0x01 && DID_Low == 0x23) {
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d11b      	bne.n	800094c <SID_22_Practice+0x70>
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	2b23      	cmp	r3, #35	@ 0x23
 8000918:	d118      	bne.n	800094c <SID_22_Practice+0x70>
	    data_buffer[0] = SID + 0x40;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3340      	adds	r3, #64	@ 0x40
 800091e:	b2db      	uxtb	r3, r3
 8000920:	713b      	strb	r3, [r7, #4]
	    data_buffer[1] = 0x01;
 8000922:	2301      	movs	r3, #1
 8000924:	717b      	strb	r3, [r7, #5]
	    data_buffer[2] = 0x23;
 8000926:	2323      	movs	r3, #35	@ 0x23
 8000928:	71bb      	strb	r3, [r7, #6]
	    data_buffer[3] = (Tester_ID >> 8) & 0xFF;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <SID_22_Practice+0x8c>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b29b      	uxth	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	71fb      	strb	r3, [r7, #7]
	    data_buffer[4] = (Tester_ID) & 0xFF;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <SID_22_Practice+0x8c>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	723b      	strb	r3, [r7, #8]
	    prepare_CAN_TX_frame(CAN1_DATA_TX, data_buffer, 5);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2205      	movs	r2, #5
 8000942:	4619      	mov	r1, r3
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <SID_22_Practice+0x88>)
 8000946:	f7ff fe29 	bl	800059c <prepare_CAN_TX_frame>
 800094a:	e005      	b.n	8000958 <SID_22_Practice+0x7c>
	} else {
	    // Error 0x31: Request out of range
		prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x31);
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	1d39      	adds	r1, r7, #4
 8000950:	2331      	movs	r3, #49	@ 0x31
 8000952:	4804      	ldr	r0, [pc, #16]	@ (8000964 <SID_22_Practice+0x88>)
 8000954:	f7ff ffa2 	bl	800089c <prepare_negative_response_buffer>
	}
}
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200011ec 	.word	0x200011ec
 8000964:	200011e4 	.word	0x200011e4
 8000968:	20000002 	.word	0x20000002

0800096c <generate_seed>:
/*********BOSCH BEA PROGRAM SKELETON DEMO CODE************/
/*********************************************************/

#include "dcm_seca.h"

void generate_seed(){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	e020      	b.n	80009ba <generate_seed+0x4e>
        HAL_ADC_Start(&hadc1);
 8000978:	482a      	ldr	r0, [pc, #168]	@ (8000a24 <generate_seed+0xb8>)
 800097a:	f001 fa6d 	bl	8001e58 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800097e:	f04f 31ff 	mov.w	r1, #4294967295
 8000982:	4828      	ldr	r0, [pc, #160]	@ (8000a24 <generate_seed+0xb8>)
 8000984:	f001 fb3a 	bl	8001ffc <HAL_ADC_PollForConversion>
        uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8000988:	4826      	ldr	r0, [pc, #152]	@ (8000a24 <generate_seed+0xb8>)
 800098a:	f001 fbc2 	bl	8002112 <HAL_ADC_GetValue>
 800098e:	6038      	str	r0, [r7, #0]

        seed[i] = (uint8_t)((adc_val ^ (TimeStamp << i)) & 0xFF);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <generate_seed+0xbc>)
 8000996:	6819      	ldr	r1, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4053      	eors	r3, r2
 80009a2:	b2d9      	uxtb	r1, r3
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <generate_seed+0xc0>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	460a      	mov	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
        HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f001 f9ea 	bl	8001d88 <HAL_Delay>
	for (int i = 0; i < 6; i++){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b05      	cmp	r3, #5
 80009be:	dddb      	ble.n	8000978 <generate_seed+0xc>
	}

	key[0] = seed[0] ^ seed[1];
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <generate_seed+0xc0>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <generate_seed+0xc0>)
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	4053      	eors	r3, r2
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <generate_seed+0xc4>)
 80009ce:	701a      	strb	r2, [r3, #0]
	key[1] = seed[1] + seed[2];
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <generate_seed+0xc0>)
 80009d2:	785a      	ldrb	r2, [r3, #1]
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <generate_seed+0xc0>)
 80009d6:	789b      	ldrb	r3, [r3, #2]
 80009d8:	4413      	add	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <generate_seed+0xc4>)
 80009de:	705a      	strb	r2, [r3, #1]
	key[2] = seed[2] ^ seed[3];
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <generate_seed+0xc0>)
 80009e2:	789a      	ldrb	r2, [r3, #2]
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <generate_seed+0xc0>)
 80009e6:	78db      	ldrb	r3, [r3, #3]
 80009e8:	4053      	eors	r3, r2
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <generate_seed+0xc4>)
 80009ee:	709a      	strb	r2, [r3, #2]
	key[3] = seed[3] + seed[0];
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <generate_seed+0xc0>)
 80009f2:	78da      	ldrb	r2, [r3, #3]
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <generate_seed+0xc0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <generate_seed+0xc4>)
 80009fe:	70da      	strb	r2, [r3, #3]
	key[4] = seed[4] & 0xF0;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <generate_seed+0xc0>)
 8000a02:	791b      	ldrb	r3, [r3, #4]
 8000a04:	f023 030f 	bic.w	r3, r3, #15
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <generate_seed+0xc4>)
 8000a0c:	711a      	strb	r2, [r3, #4]
	key[5] = seed[5] & 0x0F;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <generate_seed+0xc0>)
 8000a10:	795b      	ldrb	r3, [r3, #5]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <generate_seed+0xc4>)
 8000a1a:	715a      	strb	r2, [r3, #5]
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000080 	.word	0x20000080
 8000a28:	20001208 	.word	0x20001208
 8000a2c:	2000120c 	.word	0x2000120c
 8000a30:	20001214 	.word	0x20001214

08000a34 <validate_key>:


bool validate_key(uint8_t key_from_user[6]){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

	if (memcmp(key_from_user, key, 6) == 0) return true;
 8000a3c:	2206      	movs	r2, #6
 8000a3e:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <validate_key+0x28>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f004 fc97 	bl	8005374 <memcmp>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <validate_key+0x1c>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <validate_key+0x1e>
	else return false;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20001214 	.word	0x20001214

08000a60 <SID_27_Practice>:
void SID_27_Practice(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
	uint8_t data_buffer[8];
	if (((CAN1_DATA_RX[0] >> 4) & 0xFF) == 0x00) {
 8000a66:	4b86      	ldr	r3, [pc, #536]	@ (8000c80 <SID_27_Practice+0x220>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d15a      	bne.n	8000b28 <SID_27_Practice+0xc8>

		SID = CAN1_DATA_RX[1];
 8000a72:	4b83      	ldr	r3, [pc, #524]	@ (8000c80 <SID_27_Practice+0x220>)
 8000a74:	785a      	ldrb	r2, [r3, #1]
 8000a76:	4b83      	ldr	r3, [pc, #524]	@ (8000c84 <SID_27_Practice+0x224>)
 8000a78:	701a      	strb	r2, [r3, #0]
		uint8_t	sub_func = CAN1_DATA_RX[2];
 8000a7a:	4b81      	ldr	r3, [pc, #516]	@ (8000c80 <SID_27_Practice+0x220>)
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	72fb      	strb	r3, [r7, #11]
		uint8_t	len = CAN1_DATA_RX[0];
 8000a80:	4b7f      	ldr	r3, [pc, #508]	@ (8000c80 <SID_27_Practice+0x220>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	72bb      	strb	r3, [r7, #10]

		if (len < 2){
 8000a86:	7abb      	ldrb	r3, [r7, #10]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d807      	bhi.n	8000a9c <SID_27_Practice+0x3c>
			//Loi 0x13: sai format
			prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8000c84 <SID_27_Practice+0x224>)
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	4639      	mov	r1, r7
 8000a92:	2313      	movs	r3, #19
 8000a94:	487c      	ldr	r0, [pc, #496]	@ (8000c88 <SID_27_Practice+0x228>)
 8000a96:	f7ff ff01 	bl	800089c <prepare_negative_response_buffer>
			return;
 8000a9a:	e0ed      	b.n	8000c78 <SID_27_Practice+0x218>
		}


		if (sub_func == 1){
 8000a9c:	7afb      	ldrb	r3, [r7, #11]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d12f      	bne.n	8000b02 <SID_27_Practice+0xa2>
			if (len != 2){
 8000aa2:	7abb      	ldrb	r3, [r7, #10]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d007      	beq.n	8000ab8 <SID_27_Practice+0x58>
				//Loi 0x13: sai format
				prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000aa8:	4b76      	ldr	r3, [pc, #472]	@ (8000c84 <SID_27_Practice+0x224>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4639      	mov	r1, r7
 8000aae:	2313      	movs	r3, #19
 8000ab0:	4875      	ldr	r0, [pc, #468]	@ (8000c88 <SID_27_Practice+0x228>)
 8000ab2:	f7ff fef3 	bl	800089c <prepare_negative_response_buffer>
				return;
 8000ab6:	e0df      	b.n	8000c78 <SID_27_Practice+0x218>
			}

			if (security_access_granted){
 8000ab8:	4b74      	ldr	r3, [pc, #464]	@ (8000c8c <SID_27_Practice+0x22c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d007      	beq.n	8000ad0 <SID_27_Practice+0x70>
				//goi seed khi he thong da mo roi -> loi 0x10
				prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x10);
 8000ac0:	4b70      	ldr	r3, [pc, #448]	@ (8000c84 <SID_27_Practice+0x224>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	486f      	ldr	r0, [pc, #444]	@ (8000c88 <SID_27_Practice+0x228>)
 8000aca:	f7ff fee7 	bl	800089c <prepare_negative_response_buffer>
				return;
 8000ace:	e0d3      	b.n	8000c78 <SID_27_Practice+0x218>
			}

			seed_sent = true;
 8000ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8000c90 <SID_27_Practice+0x230>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
			generate_seed();
 8000ad6:	f7ff ff49 	bl	800096c <generate_seed>
			data_buffer[0] = SID + 0x40;
 8000ada:	4b6a      	ldr	r3, [pc, #424]	@ (8000c84 <SID_27_Practice+0x224>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3340      	adds	r3, #64	@ 0x40
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	703b      	strb	r3, [r7, #0]
			data_buffer[1] = 0x01;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	707b      	strb	r3, [r7, #1]
			memcpy(&data_buffer[2],seed, 6);
 8000ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8000c94 <SID_27_Practice+0x234>)
 8000aea:	1cbb      	adds	r3, r7, #2
 8000aec:	6811      	ldr	r1, [r2, #0]
 8000aee:	6019      	str	r1, [r3, #0]
 8000af0:	8892      	ldrh	r2, [r2, #4]
 8000af2:	809a      	strh	r2, [r3, #4]
			prepare_CAN_First_Frame(CAN1_DATA_TX, data_buffer, 8);
 8000af4:	463b      	mov	r3, r7
 8000af6:	2208      	movs	r2, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	4863      	ldr	r0, [pc, #396]	@ (8000c88 <SID_27_Practice+0x228>)
 8000afc:	f7ff fd86 	bl	800060c <prepare_CAN_First_Frame>
			return;
 8000b00:	e0ba      	b.n	8000c78 <SID_27_Practice+0x218>
		}
		else if (sub_func ==2){
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d107      	bne.n	8000b18 <SID_27_Practice+0xb8>
			prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000b08:	4b5e      	ldr	r3, [pc, #376]	@ (8000c84 <SID_27_Practice+0x224>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	2313      	movs	r3, #19
 8000b10:	485d      	ldr	r0, [pc, #372]	@ (8000c88 <SID_27_Practice+0x228>)
 8000b12:	f7ff fec3 	bl	800089c <prepare_negative_response_buffer>
			return;
 8000b16:	e0af      	b.n	8000c78 <SID_27_Practice+0x218>
		}
		else{
			prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x10);
 8000b18:	4b5a      	ldr	r3, [pc, #360]	@ (8000c84 <SID_27_Practice+0x224>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	2310      	movs	r3, #16
 8000b20:	4859      	ldr	r0, [pc, #356]	@ (8000c88 <SID_27_Practice+0x228>)
 8000b22:	f7ff febb 	bl	800089c <prepare_negative_response_buffer>
			return;
 8000b26:	e0a7      	b.n	8000c78 <SID_27_Practice+0x218>
		}
	}

	if (((CAN1_DATA_RX[0] >> 4) & 0xFF) == 0x01) {
 8000b28:	4b55      	ldr	r3, [pc, #340]	@ (8000c80 <SID_27_Practice+0x220>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d13f      	bne.n	8000bb4 <SID_27_Practice+0x154>
			uint16_t len = ((CAN1_DATA_RX[0] & 0x0F) << 8) | CAN1_DATA_RX[1];
 8000b34:	4b52      	ldr	r3, [pc, #328]	@ (8000c80 <SID_27_Practice+0x220>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	4b4e      	ldr	r3, [pc, #312]	@ (8000c80 <SID_27_Practice+0x220>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	81fb      	strh	r3, [r7, #14]
			uint8_t SID = CAN1_DATA_RX[2];
 8000b50:	4b4b      	ldr	r3, [pc, #300]	@ (8000c80 <SID_27_Practice+0x220>)
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	737b      	strb	r3, [r7, #13]
			uint8_t sub_func = CAN1_DATA_RX[3];
 8000b56:	4b4a      	ldr	r3, [pc, #296]	@ (8000c80 <SID_27_Practice+0x220>)
 8000b58:	78db      	ldrb	r3, [r3, #3]
 8000b5a:	733b      	strb	r3, [r7, #12]

			if (sub_func == 2){
 8000b5c:	7b3b      	ldrb	r3, [r7, #12]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d121      	bne.n	8000ba6 <SID_27_Practice+0x146>

				if (len != 8){
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d015      	beq.n	8000b94 <SID_27_Practice+0x134>
					//Loi 0x13: sai format
					prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000b68:	7b7a      	ldrb	r2, [r7, #13]
 8000b6a:	4639      	mov	r1, r7
 8000b6c:	2313      	movs	r3, #19
 8000b6e:	4846      	ldr	r0, [pc, #280]	@ (8000c88 <SID_27_Practice+0x228>)
 8000b70:	f7ff fe94 	bl	800089c <prepare_negative_response_buffer>
					seed_sent = !seed_sent;
 8000b74:	4b46      	ldr	r3, [pc, #280]	@ (8000c90 <SID_27_Practice+0x230>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f083 0301 	eor.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b40      	ldr	r3, [pc, #256]	@ (8000c90 <SID_27_Practice+0x230>)
 8000b90:	701a      	strb	r2, [r3, #0]
					return;
 8000b92:	e071      	b.n	8000c78 <SID_27_Practice+0x218>
				}



			memcpy(key_from_user, &CAN1_DATA_RX[4], 4);
 8000b94:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <SID_27_Practice+0x220>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c98 <SID_27_Practice+0x238>)
 8000b9c:	601a      	str	r2, [r3, #0]
			prepare_CAN_Flow_Control_Frame(CAN1_DATA_TX);
 8000b9e:	483a      	ldr	r0, [pc, #232]	@ (8000c88 <SID_27_Practice+0x228>)
 8000ba0:	f7ff fd74 	bl	800068c <prepare_CAN_Flow_Control_Frame>
 8000ba4:	e006      	b.n	8000bb4 <SID_27_Practice+0x154>
			}

			else {
				prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x10);
 8000ba6:	7b7a      	ldrb	r2, [r7, #13]
 8000ba8:	4639      	mov	r1, r7
 8000baa:	2310      	movs	r3, #16
 8000bac:	4836      	ldr	r0, [pc, #216]	@ (8000c88 <SID_27_Practice+0x228>)
 8000bae:	f7ff fe75 	bl	800089c <prepare_negative_response_buffer>
				return;
 8000bb2:	e061      	b.n	8000c78 <SID_27_Practice+0x218>
			}
	}

	if (((CAN1_DATA_RX[0] >> 4) & 0xFF) == 0x02) {
 8000bb4:	4b32      	ldr	r3, [pc, #200]	@ (8000c80 <SID_27_Practice+0x220>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	091b      	lsrs	r3, r3, #4
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d14b      	bne.n	8000c58 <SID_27_Practice+0x1f8>
		memcpy(&key_from_user[4], &CAN1_DATA_RX[1], 2);
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <SID_27_Practice+0x220>)
 8000bc2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <SID_27_Practice+0x238>)
 8000bca:	8093      	strh	r3, [r2, #4]


		if (!seed_sent){
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <SID_27_Practice+0x230>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <SID_27_Practice+0x188>
			//Chua gui 27 01 de lay seed ma da gui 27 02 voi key -> loi 0x10
			prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, 0x27, 0x10);
 8000bda:	4639      	mov	r1, r7
 8000bdc:	2310      	movs	r3, #16
 8000bde:	2227      	movs	r2, #39	@ 0x27
 8000be0:	4829      	ldr	r0, [pc, #164]	@ (8000c88 <SID_27_Practice+0x228>)
 8000be2:	f7ff fe5b 	bl	800089c <prepare_negative_response_buffer>
			return;
 8000be6:	e047      	b.n	8000c78 <SID_27_Practice+0x218>
		}

		if (security_access_granted) {
 8000be8:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <SID_27_Practice+0x22c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <SID_27_Practice+0x19e>
			prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, 0x27, 0x10);
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	2227      	movs	r2, #39	@ 0x27
 8000bf6:	4824      	ldr	r0, [pc, #144]	@ (8000c88 <SID_27_Practice+0x228>)
 8000bf8:	f7ff fe50 	bl	800089c <prepare_negative_response_buffer>
			return;
 8000bfc:	e03c      	b.n	8000c78 <SID_27_Practice+0x218>
		}
		if (!validate_key(key_from_user)){
 8000bfe:	4826      	ldr	r0, [pc, #152]	@ (8000c98 <SID_27_Practice+0x238>)
 8000c00:	f7ff ff18 	bl	8000a34 <validate_key>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d015      	beq.n	8000c3c <SID_27_Practice+0x1dc>
			//key khong dung voi seed -> loi 0x35
			prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, 0x27, 0x35);
 8000c10:	4639      	mov	r1, r7
 8000c12:	2335      	movs	r3, #53	@ 0x35
 8000c14:	2227      	movs	r2, #39	@ 0x27
 8000c16:	481c      	ldr	r0, [pc, #112]	@ (8000c88 <SID_27_Practice+0x228>)
 8000c18:	f7ff fe40 	bl	800089c <prepare_negative_response_buffer>
			seed_sent = !seed_sent;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <SID_27_Practice+0x230>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f083 0301 	eor.w	r3, r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <SID_27_Practice+0x230>)
 8000c38:	701a      	strb	r2, [r3, #0]
			return;
 8000c3a:	e01d      	b.n	8000c78 <SID_27_Practice+0x218>
		}


		//Dung key -> positive response
	    data_buffer[0] = 0x27 + 0x40;
 8000c3c:	2367      	movs	r3, #103	@ 0x67
 8000c3e:	703b      	strb	r3, [r7, #0]
	    data_buffer[1] = 0x02;
 8000c40:	2302      	movs	r3, #2
 8000c42:	707b      	strb	r3, [r7, #1]
	    prepare_CAN_TX_frame(CAN1_DATA_TX, data_buffer, 2);
 8000c44:	463b      	mov	r3, r7
 8000c46:	2202      	movs	r2, #2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <SID_27_Practice+0x228>)
 8000c4c:	f7ff fca6 	bl	800059c <prepare_CAN_TX_frame>
		security_access_granted = true;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <SID_27_Practice+0x22c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
		return;
 8000c56:	e00f      	b.n	8000c78 <SID_27_Practice+0x218>
	}

	if (((CAN1_DATA_RX[0] >> 4) & 0xFF) == 0x03) {
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <SID_27_Practice+0x220>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d109      	bne.n	8000c78 <SID_27_Practice+0x218>
		memcpy(&data_buffer[0], &seed[4], 2);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <SID_27_Practice+0x234>)
 8000c66:	889b      	ldrh	r3, [r3, #4]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	803b      	strh	r3, [r7, #0]
		prepare_CAN_Consecutive_Frames (CAN1_DATA_TX, data_buffer, 2);
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <SID_27_Practice+0x228>)
 8000c74:	f7ff fd8a 	bl	800078c <prepare_CAN_Consecutive_Frames>
	}

}
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200011ec 	.word	0x200011ec
 8000c84:	20001222 	.word	0x20001222
 8000c88:	200011e4 	.word	0x200011e4
 8000c8c:	20001224 	.word	0x20001224
 8000c90:	20001223 	.word	0x20001223
 8000c94:	2000120c 	.word	0x2000120c
 8000c98:	2000121c 	.word	0x2000121c

08000c9c <SID_2E_Practice>:
/*********************************************************/

#include "dcm_wdbi.h"


void SID_2E_Practice(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
	uint8_t len = CAN1_DATA_RX[0];
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <SID_2E_Practice+0xb4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	73fb      	strb	r3, [r7, #15]
	uint8_t SID = CAN1_DATA_RX[1];
 8000ca8:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <SID_2E_Practice+0xb4>)
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	73bb      	strb	r3, [r7, #14]
	uint8_t DID_High = CAN1_DATA_RX[2];
 8000cae:	4b28      	ldr	r3, [pc, #160]	@ (8000d50 <SID_2E_Practice+0xb4>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	737b      	strb	r3, [r7, #13]
	uint8_t	DID_Low = CAN1_DATA_RX[3];
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <SID_2E_Practice+0xb4>)
 8000cb6:	78db      	ldrb	r3, [r3, #3]
 8000cb8:	733b      	strb	r3, [r7, #12]
	uint8_t data_buffer[8];

	uint16_t temp_Tester_ID = ((CAN1_DATA_RX[4] << 8) | CAN1_DATA_RX[5]);
 8000cba:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <SID_2E_Practice+0xb4>)
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <SID_2E_Practice+0xb4>)
 8000cc6:	795b      	ldrb	r3, [r3, #5]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	817b      	strh	r3, [r7, #10]

	if (!security_access_granted){
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <SID_2E_Practice+0xb8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f083 0301 	eor.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <SID_2E_Practice+0x50>
		prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x33);
 8000cde:	7bba      	ldrb	r2, [r7, #14]
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	2333      	movs	r3, #51	@ 0x33
 8000ce4:	481c      	ldr	r0, [pc, #112]	@ (8000d58 <SID_2E_Practice+0xbc>)
 8000ce6:	f7ff fdd9 	bl	800089c <prepare_negative_response_buffer>
		return;
 8000cea:	e02e      	b.n	8000d4a <SID_2E_Practice+0xae>
	}

	if (len != 5) {
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d006      	beq.n	8000d00 <SID_2E_Practice+0x64>
		prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000cf2:	7bba      	ldrb	r2, [r7, #14]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2313      	movs	r3, #19
 8000cf8:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <SID_2E_Practice+0xbc>)
 8000cfa:	f7ff fdcf 	bl	800089c <prepare_negative_response_buffer>
		return;
 8000cfe:	e024      	b.n	8000d4a <SID_2E_Practice+0xae>
	}

	if (DID_High != 0x01 || DID_Low != 0x23) {
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d102      	bne.n	8000d0c <SID_2E_Practice+0x70>
 8000d06:	7b3b      	ldrb	r3, [r7, #12]
 8000d08:	2b23      	cmp	r3, #35	@ 0x23
 8000d0a:	d006      	beq.n	8000d1a <SID_2E_Practice+0x7e>
		prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x31);
 8000d0c:	7bba      	ldrb	r2, [r7, #14]
 8000d0e:	4639      	mov	r1, r7
 8000d10:	2331      	movs	r3, #49	@ 0x31
 8000d12:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <SID_2E_Practice+0xbc>)
 8000d14:	f7ff fdc2 	bl	800089c <prepare_negative_response_buffer>
		return;
 8000d18:	e017      	b.n	8000d4a <SID_2E_Practice+0xae>
	}

	if (temp_Tester_ID > 0x07FF) {
 8000d1a:	897b      	ldrh	r3, [r7, #10]
 8000d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d20:	d306      	bcc.n	8000d30 <SID_2E_Practice+0x94>
		prepare_negative_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x10);
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	4639      	mov	r1, r7
 8000d26:	2310      	movs	r3, #16
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <SID_2E_Practice+0xbc>)
 8000d2a:	f7ff fdb7 	bl	800089c <prepare_negative_response_buffer>
		return;
 8000d2e:	e00c      	b.n	8000d4a <SID_2E_Practice+0xae>
	}
	Tester_ID = temp_Tester_ID;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <SID_2E_Practice+0xc0>)
 8000d32:	897b      	ldrh	r3, [r7, #10]
 8000d34:	8013      	strh	r3, [r2, #0]
	data_buffer[0] = SID + 0x40;
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	3340      	adds	r3, #64	@ 0x40
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	703b      	strb	r3, [r7, #0]
	prepare_CAN_TX_frame(CAN1_DATA_TX, data_buffer, 1);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2201      	movs	r2, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <SID_2E_Practice+0xbc>)
 8000d46:	f7ff fc29 	bl	800059c <prepare_CAN_TX_frame>

}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200011ec 	.word	0x200011ec
 8000d54:	20001224 	.word	0x20001224
 8000d58:	200011e4 	.word	0x200011e4
 8000d5c:	20000002 	.word	0x20000002

08000d60 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Đây là callback, chạy sau khi node 1 hoặc node 2 nhận dữ liệu

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	@ 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f001 fef3 	bl	8002b5e <HAL_CAN_GetRxMessage>
    if (hcan->Instance == CAN1) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a44      	ldr	r2, [pc, #272]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d13e      	bne.n	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
        if (currentState == STATE_CAN2_TRANSMISSION){
 8000d82:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d13a      	bne.n	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
        	for (uint8_t i = 0; i < 8; i++){
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d90:	e00e      	b.n	8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
        		CAN1_DATA_RX[i] = rxData[i];
 8000d92:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d9a:	3230      	adds	r2, #48	@ 0x30
 8000d9c:	443a      	add	r2, r7
 8000d9e:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000da2:	4a3d      	ldr	r2, [pc, #244]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000da4:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < 8; i++){
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000daa:	3301      	adds	r3, #1
 8000dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000db0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d9ec      	bls.n	8000d92 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
        	}
        if ((CAN1_DATA_RX[0] >> 4) == 0x00) currentState = STATE_READING_CAN1_RECEPTION;
 8000db8:	4b37      	ldr	r3, [pc, #220]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 8000dc4:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	701a      	strb	r2, [r3, #0]
        if ((CAN1_DATA_RX[0] >> 4) == 0x01) currentState = STATE_PREPARING_FOR_CAN1_FLOW_CONTROL;
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d102      	bne.n	8000ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	701a      	strb	r2, [r3, #0]
        if ((CAN1_DATA_RX[0] >> 4) == 0x02) currentState = STATE_PREPARING_FOR_CAN1_SINGLE_FRAME;
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d102      	bne.n	8000dee <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
 8000de8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000dea:	220a      	movs	r2, #10
 8000dec:	701a      	strb	r2, [r3, #0]
        if ((CAN1_DATA_RX[0] >> 4) == 0x03) currentState = STATE_PREPARING_FOR_CAN1_CONSECUTIVE_FRAME;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d102      	bne.n	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	701a      	strb	r2, [r3, #0]

    }
    }
    if (hcan->Instance == CAN2) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a25      	ldr	r2, [pc, #148]	@ (8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d13e      	bne.n	8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        if (currentState == STATE_CAN1_TRANSMISSION){
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d13a      	bne.n	8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        	for (uint8_t i = 0; i < 8; i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e18:	e00e      	b.n	8000e38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
        		CAN2_DATA_RX[i] = rxData[i];
 8000e1a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e22:	3230      	adds	r2, #48	@ 0x30
 8000e24:	443a      	add	r2, r7
 8000e26:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000e2c:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < 8; i++){
 8000e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e32:	3301      	adds	r3, #1
 8000e34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d9ec      	bls.n	8000e1a <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
        	}
        if ((CAN2_DATA_RX[0] >> 4) == 0x00) currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <HAL_CAN_RxFifo0MsgPendingCallback+0xf2>
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
        if ((CAN2_DATA_RX[0] >> 4) == 0x01) currentState = STATE_PREPARING_FOR_CAN2_FLOW_CONTROL;
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000e60:	2205      	movs	r2, #5
 8000e62:	701a      	strb	r2, [r3, #0]
        if ((CAN2_DATA_RX[0] >> 4) == 0x02) currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d102      	bne.n	8000e76 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
        if ((CAN2_DATA_RX[0] >> 4) == 0x03) currentState = STATE_PREPARING_FOR_CAN2_CONSECUTIVE_FRAME;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d102      	bne.n	8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000e84:	2209      	movs	r2, #9
 8000e86:	701a      	strb	r2, [r3, #0]

        }

    }
}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	@ 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40006400 	.word	0x40006400
 8000e94:	20001205 	.word	0x20001205
 8000e98:	200011ec 	.word	0x200011ec
 8000e9c:	40006800 	.word	0x40006800
 8000ea0:	200011fc 	.word	0x200011fc

08000ea4 <set_LED>:

void set_LED (bool LED_State) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if (LED_State) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <set_LED+0x1c>
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <set_LED+0x30>)
 8000eba:	f002 fcf7 	bl	80038ac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
}
 8000ebe:	e004      	b.n	8000eca <set_LED+0x26>
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <set_LED+0x30>)
 8000ec6:	f002 fcf1 	bl	80038ac <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_GPIO_EXTI_Callback>:

// button interupt IG_OFF -> IG_ON
uint32_t last_debounce_time = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_1) {
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d116      	bne.n	8000f16 <HAL_GPIO_EXTI_Callback+0x3e>
    if (HAL_GetTick() - last_debounce_time > 200) // 200ms debounce
 8000ee8:	f000 ff42 	bl	8001d70 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ef6:	d90e      	bls.n	8000f16 <HAL_GPIO_EXTI_Callback+0x3e>
    {
      last_debounce_time = HAL_GetTick();
 8000ef8:	f000 ff3a 	bl	8001d70 <HAL_GetTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f00:	6013      	str	r3, [r2, #0]

      USART3_SendString((uint8_t *)"IG OFF ");
 8000f02:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f04:	f000 fbe4 	bl	80016d0 <USART3_SendString>

      MX_CAN1_Setup();
 8000f08:	f000 fb4e 	bl	80015a8 <MX_CAN1_Setup>
      MX_CAN2_Setup();
 8000f0c:	f000 fb98 	bl	8001640 <MX_CAN2_Setup>
      USART3_SendString((uint8_t *)"-> IG ON \n");
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f12:	f000 fbdd 	bl	80016d0 <USART3_SendString>
    }
  }
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20001228 	.word	0x20001228
 8000f24:	08005cbc 	.word	0x08005cbc
 8000f28:	08005cc4 	.word	0x08005cc4

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	80fb      	strh	r3, [r7, #6]
	uint16_t Consecutive_Cntr = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 feb3 	bl	8001ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f943 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fa97 	bl	8001474 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000f46:	f000 f9fb 	bl	8001340 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000f4a:	f000 fa31 	bl	80013b0 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000f4e:	f000 fa67 	bl	8001420 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000f52:	f000 f9a3 	bl	800129c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000f56:	f000 fb27 	bl	80015a8 <MX_CAN1_Setup>
  MX_CAN2_Setup();
 8000f5a:	f000 fb71 	bl	8001640 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000f5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001190 <main+0x264>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	4b8a      	ldr	r3, [pc, #552]	@ (8001190 <main+0x264>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0220 	orr.w	r2, r2, #32
 8000f6c:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4988      	ldr	r1, [pc, #544]	@ (8001194 <main+0x268>)
 8000f72:	4887      	ldr	r0, [pc, #540]	@ (8001190 <main+0x264>)
 8000f74:	f003 fa43 	bl	80043fe <HAL_UART_Receive_IT>



  while (1)
  {
	  set_LED(security_access_granted);
 8000f78:	4b87      	ldr	r3, [pc, #540]	@ (8001198 <main+0x26c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff91 	bl	8000ea4 <set_LED>
	  switch (currentState){
 8000f82:	4b86      	ldr	r3, [pc, #536]	@ (800119c <main+0x270>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d8f6      	bhi.n	8000f78 <main+0x4c>
 8000f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f90 <main+0x64>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fbd 	.word	0x08000fbd
 8000f94:	08000f79 	.word	0x08000f79
 8000f98:	080010a9 	.word	0x080010a9
 8000f9c:	08001163 	.word	0x08001163
 8000fa0:	08000f79 	.word	0x08000f79
 8000fa4:	0800105f 	.word	0x0800105f
 8000fa8:	080010ed 	.word	0x080010ed
 8000fac:	0800102f 	.word	0x0800102f
 8000fb0:	08001117 	.word	0x08001117
 8000fb4:	08001087 	.word	0x08001087
 8000fb8:	0800113d 	.word	0x0800113d
			case STATE_PREPARING_FOR_CAN2_TRANSMISSION:
				//Từ các giá trị lấy được ở UART, xây dựng CAN_frame
				if (NumBytesReq != 0){
 8000fbc:	4b78      	ldr	r3, [pc, #480]	@ (80011a0 <main+0x274>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80df 	beq.w	8001184 <main+0x258>
					HAL_Delay(200);
 8000fc6:	20c8      	movs	r0, #200	@ 0xc8
 8000fc8:	f000 fede 	bl	8001d88 <HAL_Delay>

					if (REQ_BUFFER[0] == 0x27 && REQ_BUFFER[1] == 0x02 && NumBytesReq == 8){
 8000fcc:	4b75      	ldr	r3, [pc, #468]	@ (80011a4 <main+0x278>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b27      	cmp	r3, #39	@ 0x27
 8000fd2:	d10b      	bne.n	8000fec <main+0xc0>
 8000fd4:	4b73      	ldr	r3, [pc, #460]	@ (80011a4 <main+0x278>)
 8000fd6:	785b      	ldrb	r3, [r3, #1]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d107      	bne.n	8000fec <main+0xc0>
 8000fdc:	4b70      	ldr	r3, [pc, #448]	@ (80011a0 <main+0x274>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d103      	bne.n	8000fec <main+0xc0>
		  				currentState = STATE_PREPARING_FOR_CAN2_FIRST_FRAME;
 8000fe4:	4b6d      	ldr	r3, [pc, #436]	@ (800119c <main+0x270>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	701a      	strb	r2, [r3, #0]
		  				break;
 8000fea:	e0cf      	b.n	800118c <main+0x260>
					}

					prepare_CAN_TX_frame(CAN2_DATA_TX, REQ_BUFFER, NumBytesReq);
 8000fec:	4b6c      	ldr	r3, [pc, #432]	@ (80011a0 <main+0x274>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	496b      	ldr	r1, [pc, #428]	@ (80011a4 <main+0x278>)
 8000ff6:	486c      	ldr	r0, [pc, #432]	@ (80011a8 <main+0x27c>)
 8000ff8:	f7ff fad0 	bl	800059c <prepare_CAN_TX_frame>
					//Gửi CAN_frame
					currentState = STATE_CAN2_TRANSMISSION;
 8000ffc:	4b67      	ldr	r3, [pc, #412]	@ (800119c <main+0x270>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
					CAN2_SendMessage(CAN2_DATA_TX);
 8001002:	4869      	ldr	r0, [pc, #420]	@ (80011a8 <main+0x27c>)
 8001004:	f7ff fc1e 	bl	8000844 <CAN2_SendMessage>
				    USART3_SendString((uint8_t *)"TESTER: ");
 8001008:	4868      	ldr	r0, [pc, #416]	@ (80011ac <main+0x280>)
 800100a:	f000 fb61 	bl	80016d0 <USART3_SendString>
					PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 800100e:	4b68      	ldr	r3, [pc, #416]	@ (80011b0 <main+0x284>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4964      	ldr	r1, [pc, #400]	@ (80011a8 <main+0x27c>)
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fb74 	bl	8001704 <PrintCANLog>
					memset(REQ_BUFFER, 0, 20);
 800101c:	2214      	movs	r2, #20
 800101e:	2100      	movs	r1, #0
 8001020:	4860      	ldr	r0, [pc, #384]	@ (80011a4 <main+0x278>)
 8001022:	f004 f9b7 	bl	8005394 <memset>
					NumBytesReq = 0;
 8001026:	4b5e      	ldr	r3, [pc, #376]	@ (80011a0 <main+0x274>)
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
				}

				break;
 800102c:	e0aa      	b.n	8001184 <main+0x258>

	  		case STATE_CAN2_TRANSMISSION:
	  			break;

	  		case STATE_PREPARING_FOR_CAN2_FIRST_FRAME:
	  			currentState = STATE_CAN2_TRANSMISSION;
 800102e:	4b5b      	ldr	r3, [pc, #364]	@ (800119c <main+0x270>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]

				//Từ các giá trị lấy được ở UART, xây dựng CAN_frame
				prepare_CAN_First_Frame(CAN2_DATA_TX, REQ_BUFFER, NumBytesReq);
 8001034:	4b5a      	ldr	r3, [pc, #360]	@ (80011a0 <main+0x274>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	495a      	ldr	r1, [pc, #360]	@ (80011a4 <main+0x278>)
 800103c:	485a      	ldr	r0, [pc, #360]	@ (80011a8 <main+0x27c>)
 800103e:	f7ff fae5 	bl	800060c <prepare_CAN_First_Frame>
				//Gửi CAN_frame
				CAN2_SendMessage(CAN2_DATA_TX);
 8001042:	4859      	ldr	r0, [pc, #356]	@ (80011a8 <main+0x27c>)
 8001044:	f7ff fbfe 	bl	8000844 <CAN2_SendMessage>
			    USART3_SendString((uint8_t *)"TESTER: ");
 8001048:	4858      	ldr	r0, [pc, #352]	@ (80011ac <main+0x280>)
 800104a:	f000 fb41 	bl	80016d0 <USART3_SendString>
				PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 800104e:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <main+0x284>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4954      	ldr	r1, [pc, #336]	@ (80011a8 <main+0x27c>)
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fb54 	bl	8001704 <PrintCANLog>
				break;
 800105c:	e096      	b.n	800118c <main+0x260>

	  		case STATE_PREPARING_FOR_CAN2_FLOW_CONTROL:
	  			currentState = STATE_CAN2_TRANSMISSION;
 800105e:	4b4f      	ldr	r3, [pc, #316]	@ (800119c <main+0x270>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
	  			prepare_CAN_Flow_Control_Frame (CAN2_DATA_TX);
 8001064:	4850      	ldr	r0, [pc, #320]	@ (80011a8 <main+0x27c>)
 8001066:	f7ff fb11 	bl	800068c <prepare_CAN_Flow_Control_Frame>
	  			CAN2_SendMessage(CAN2_DATA_TX);
 800106a:	484f      	ldr	r0, [pc, #316]	@ (80011a8 <main+0x27c>)
 800106c:	f7ff fbea 	bl	8000844 <CAN2_SendMessage>
			    USART3_SendString((uint8_t *)"TESTER: ");
 8001070:	484e      	ldr	r0, [pc, #312]	@ (80011ac <main+0x280>)
 8001072:	f000 fb2d 	bl	80016d0 <USART3_SendString>
	  			PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <main+0x284>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	494a      	ldr	r1, [pc, #296]	@ (80011a8 <main+0x27c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fb40 	bl	8001704 <PrintCANLog>
	  			break;
 8001084:	e082      	b.n	800118c <main+0x260>

	  		case STATE_PREPARING_FOR_CAN2_CONSECUTIVE_FRAME:
	  			currentState = STATE_CAN2_TRANSMISSION;
 8001086:	4b45      	ldr	r3, [pc, #276]	@ (800119c <main+0x270>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
	  			prepare_CAN_Consecutive_Frames(CAN2_DATA_TX, &REQ_BUFFER[6], 2);
 800108c:	2202      	movs	r2, #2
 800108e:	4949      	ldr	r1, [pc, #292]	@ (80011b4 <main+0x288>)
 8001090:	4845      	ldr	r0, [pc, #276]	@ (80011a8 <main+0x27c>)
 8001092:	f7ff fb7b 	bl	800078c <prepare_CAN_Consecutive_Frames>
				memset(REQ_BUFFER, 0, 20);
 8001096:	2214      	movs	r2, #20
 8001098:	2100      	movs	r1, #0
 800109a:	4842      	ldr	r0, [pc, #264]	@ (80011a4 <main+0x278>)
 800109c:	f004 f97a 	bl	8005394 <memset>
				NumBytesReq = 0;
 80010a0:	4b3f      	ldr	r3, [pc, #252]	@ (80011a0 <main+0x274>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	801a      	strh	r2, [r3, #0]
	  			break;
 80010a6:	e071      	b.n	800118c <main+0x260>
	  			 * CAN_Frame[0] chứa số phần tử ở đằng sau
	  			 * CAN_Frame[1] chứa mã lệnh (SID) -> so sánh mã lệnh này có phải 1 trong 3 mã lệnh 22 27 2E không,
	  			 * 	-> Nếu không: reset state machine và break
	  			 * 	-> Nếu có: Đưa vào phương trình phân tích lệnh 22 27 2E
	  			 */
	  			switch (CAN1_DATA_RX[1]) {
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <main+0x28c>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80010ae:	d012      	beq.n	80010d6 <main+0x1aa>
 80010b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80010b2:	dc16      	bgt.n	80010e2 <main+0x1b6>
 80010b4:	2b22      	cmp	r3, #34	@ 0x22
 80010b6:	d002      	beq.n	80010be <main+0x192>
 80010b8:	2b27      	cmp	r3, #39	@ 0x27
 80010ba:	d006      	beq.n	80010ca <main+0x19e>
 80010bc:	e011      	b.n	80010e2 <main+0x1b6>
					case 0x22:
						currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 80010be:	4b37      	ldr	r3, [pc, #220]	@ (800119c <main+0x270>)
 80010c0:	2203      	movs	r2, #3
 80010c2:	701a      	strb	r2, [r3, #0]
						SID_22_Practice();
 80010c4:	f7ff fc0a 	bl	80008dc <SID_22_Practice>
						break;
 80010c8:	e00f      	b.n	80010ea <main+0x1be>
					case 0x27:
						currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 80010ca:	4b34      	ldr	r3, [pc, #208]	@ (800119c <main+0x270>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	701a      	strb	r2, [r3, #0]
						SID_27_Practice();
 80010d0:	f7ff fcc6 	bl	8000a60 <SID_27_Practice>
						break;
 80010d4:	e009      	b.n	80010ea <main+0x1be>
					case 0x2E:
						currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 80010d6:	4b31      	ldr	r3, [pc, #196]	@ (800119c <main+0x270>)
 80010d8:	2203      	movs	r2, #3
 80010da:	701a      	strb	r2, [r3, #0]
						SID_2E_Practice();
 80010dc:	f7ff fdde 	bl	8000c9c <SID_2E_Practice>
						break;
 80010e0:	e003      	b.n	80010ea <main+0x1be>
					default:
						currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <main+0x270>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
						break;
 80010e8:	bf00      	nop
				}
	  			break;
 80010ea:	e04f      	b.n	800118c <main+0x260>

	  		case STATE_PREPARING_FOR_CAN1_CONSECUTIVE_FRAME:
	  			if (((CAN1_DATA_RX[0]) & 0x0F) == 0x02) currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 80010ec:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <main+0x28c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d102      	bne.n	80010fe <main+0x1d2>
 80010f8:	4b28      	ldr	r3, [pc, #160]	@ (800119c <main+0x270>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	  			if (((CAN1_DATA_RX[0]) & 0x0F) == 0x00) {currentState = STATE_CAN1_TRANSMISSION;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <main+0x28c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	2b00      	cmp	r3, #0
 8001108:	d13e      	bne.n	8001188 <main+0x25c>
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <main+0x270>)
 800110c:	2204      	movs	r2, #4
 800110e:	701a      	strb	r2, [r3, #0]
	  				SID_27_Practice();
 8001110:	f7ff fca6 	bl	8000a60 <SID_27_Practice>
	  			}
	  			break;
 8001114:	e038      	b.n	8001188 <main+0x25c>

	  		case STATE_PREPARING_FOR_CAN1_FLOW_CONTROL:
	  			currentState = STATE_CAN1_TRANSMISSION;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <main+0x270>)
 8001118:	2204      	movs	r2, #4
 800111a:	701a      	strb	r2, [r3, #0]
	  			SID_27_Practice();
 800111c:	f7ff fca0 	bl	8000a60 <SID_27_Practice>
				CAN1_SendMessage(CAN1_DATA_TX);
 8001120:	4826      	ldr	r0, [pc, #152]	@ (80011bc <main+0x290>)
 8001122:	f7ff fba5 	bl	8000870 <CAN1_SendMessage>
			    USART3_SendString((uint8_t *)"ECU: ");
 8001126:	4826      	ldr	r0, [pc, #152]	@ (80011c0 <main+0x294>)
 8001128:	f000 fad2 	bl	80016d0 <USART3_SendString>
				PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <main+0x298>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4922      	ldr	r1, [pc, #136]	@ (80011bc <main+0x290>)
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fae5 	bl	8001704 <PrintCANLog>
				break;
 800113a:	e027      	b.n	800118c <main+0x260>

	  		case STATE_PREPARING_FOR_CAN1_SINGLE_FRAME:
	  			currentState = STATE_CAN1_TRANSMISSION;
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <main+0x270>)
 800113e:	2204      	movs	r2, #4
 8001140:	701a      	strb	r2, [r3, #0]
	  			SID_27_Practice();
 8001142:	f7ff fc8d 	bl	8000a60 <SID_27_Practice>
	  			CAN1_SendMessage(CAN1_DATA_TX);
 8001146:	481d      	ldr	r0, [pc, #116]	@ (80011bc <main+0x290>)
 8001148:	f7ff fb92 	bl	8000870 <CAN1_SendMessage>
			    USART3_SendString((uint8_t *)"ECU: ");
 800114c:	481c      	ldr	r0, [pc, #112]	@ (80011c0 <main+0x294>)
 800114e:	f000 fabf 	bl	80016d0 <USART3_SendString>
	  		    PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8001152:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <main+0x298>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4918      	ldr	r1, [pc, #96]	@ (80011bc <main+0x290>)
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fad2 	bl	8001704 <PrintCANLog>
	  		    break;
 8001160:	e014      	b.n	800118c <main+0x260>

	  		case STATE_PREPARING_FOR_CAN1_TRANSMISSION:
	  			currentState = STATE_CAN1_TRANSMISSION;
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <main+0x270>)
 8001164:	2204      	movs	r2, #4
 8001166:	701a      	strb	r2, [r3, #0]
	  			CAN1_SendMessage(CAN1_DATA_TX);
 8001168:	4814      	ldr	r0, [pc, #80]	@ (80011bc <main+0x290>)
 800116a:	f7ff fb81 	bl	8000870 <CAN1_SendMessage>
			    USART3_SendString((uint8_t *)"ECU: ");
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <main+0x294>)
 8001170:	f000 faae 	bl	80016d0 <USART3_SendString>
	  			PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <main+0x298>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4910      	ldr	r1, [pc, #64]	@ (80011bc <main+0x290>)
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fac1 	bl	8001704 <PrintCANLog>
	  			break;
 8001182:	e003      	b.n	800118c <main+0x260>
				break;
 8001184:	bf00      	nop
 8001186:	e6f7      	b.n	8000f78 <main+0x4c>
	  			break;
 8001188:	bf00      	nop
 800118a:	e6f5      	b.n	8000f78 <main+0x4c>
	  set_LED(security_access_granted);
 800118c:	e6f4      	b.n	8000f78 <main+0x4c>
 800118e:	bf00      	nop
 8001190:	20000118 	.word	0x20000118
 8001194:	200011e0 	.word	0x200011e0
 8001198:	20001224 	.word	0x20001224
 800119c:	20001205 	.word	0x20001205
 80011a0:	200001dc 	.word	0x200001dc
 80011a4:	200001e0 	.word	0x200001e0
 80011a8:	200011f4 	.word	0x200011f4
 80011ac:	08005cd0 	.word	0x08005cd0
 80011b0:	2000019c 	.word	0x2000019c
 80011b4:	200001e6 	.word	0x200001e6
 80011b8:	200011ec 	.word	0x200011ec
 80011bc:	200011e4 	.word	0x200011e4
 80011c0:	08005cdc 	.word	0x08005cdc
 80011c4:	2000015c 	.word	0x2000015c

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b094      	sub	sp, #80	@ 0x50
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	2230      	movs	r2, #48	@ 0x30
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 f8dc 	bl	8005394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <SystemClock_Config+0xcc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <SystemClock_Config+0xcc>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <SystemClock_Config+0xcc>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <SystemClock_Config+0xd0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <SystemClock_Config+0xd0>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <SystemClock_Config+0xd0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2310      	movs	r3, #16
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001238:	2308      	movs	r3, #8
 800123a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800123c:	2350      	movs	r3, #80	@ 0x50
 800123e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001240:	2302      	movs	r3, #2
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001244:	2304      	movs	r3, #4
 8001246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fb5f 	bl	8003910 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001258:	f000 fadc 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2302      	movs	r3, #2
 8001262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fdc0 	bl	8003e00 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001286:	f000 fac5 	bl	8001814 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	@ 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012b0:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <MX_ADC1_Init+0x9c>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <MX_ADC1_Init+0xa0>)
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012fc:	f000 fd68 	bl	8001dd0 <HAL_ADC_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001306:	f000 fa85 	bl	8001814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800130a:	2302      	movs	r3, #2
 800130c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800130e:	2301      	movs	r3, #1
 8001310:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_ADC1_Init+0x98>)
 800131c:	f000 ff06 	bl	800212c <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001326:	f000 fa75 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000080 	.word	0x20000080
 8001338:	40012000 	.word	0x40012000
 800133c:	0f000001 	.word	0x0f000001

08001340 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001346:	4a19      	ldr	r2, [pc, #100]	@ (80013ac <MX_CAN1_Init+0x6c>)
 8001348:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_CAN1_Init+0x68>)
 800134c:	2205      	movs	r2, #5
 800134e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800135c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001360:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001364:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001368:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800136c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001376:	2200      	movs	r2, #0
 8001378:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_CAN1_Init+0x68>)
 800137c:	2200      	movs	r2, #0
 800137e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001382:	2200      	movs	r2, #0
 8001384:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001388:	2200      	movs	r2, #0
 800138a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_CAN1_Init+0x68>)
 800138e:	2200      	movs	r2, #0
 8001390:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_CAN1_Init+0x68>)
 8001394:	f001 f8e8 	bl	8002568 <HAL_CAN_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800139e:	f000 fa39 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000c8 	.word	0x200000c8
 80013ac:	40006400 	.word	0x40006400

080013b0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013b6:	4a19      	ldr	r2, [pc, #100]	@ (800141c <MX_CAN2_Init+0x6c>)
 80013b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013bc:	2205      	movs	r2, #5
 80013be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013cc:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013d0:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80013d4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013d8:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80013dc:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_CAN2_Init+0x68>)
 80013fe:	2200      	movs	r2, #0
 8001400:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_CAN2_Init+0x68>)
 8001404:	f001 f8b0 	bl	8002568 <HAL_CAN_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800140e:	f000 fa01 	bl	8001814 <Error_Handler>
	//Cần config các setting của filter ở đây


  /* USER CODE END CAN2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000f0 	.word	0x200000f0
 800141c:	40006800 	.word	0x40006800

08001420 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <MX_USART3_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_USART3_UART_Init+0x4c>)
 8001458:	f002 fef2 	bl	8004240 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f9d7 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000118 	.word	0x20000118
 8001470:	40004800 	.word	0x40004800

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b42      	ldr	r3, [pc, #264]	@ (8001598 <MX_GPIO_Init+0x124>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a41      	ldr	r2, [pc, #260]	@ (8001598 <MX_GPIO_Init+0x124>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b3f      	ldr	r3, [pc, #252]	@ (8001598 <MX_GPIO_Init+0x124>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <MX_GPIO_Init+0x124>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2101      	movs	r1, #1
 80014fe:	4827      	ldr	r0, [pc, #156]	@ (800159c <MX_GPIO_Init+0x128>)
 8001500:	f002 f9d4 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001504:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 8001508:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4821      	ldr	r0, [pc, #132]	@ (80015a0 <MX_GPIO_Init+0x12c>)
 800151a:	f002 f82b 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001522:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	481c      	ldr	r0, [pc, #112]	@ (80015a4 <MX_GPIO_Init+0x130>)
 8001534:	f002 f81e 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	2301      	movs	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4815      	ldr	r0, [pc, #84]	@ (80015a4 <MX_GPIO_Init+0x130>)
 800154e:	f002 f811 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <MX_GPIO_Init+0x128>)
 800156a:	f002 f803 	bl	8003574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	2006      	movs	r0, #6
 8001574:	f001 ff35 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001578:	2006      	movs	r0, #6
 800157a:	f001 ff4e 	bl	800341a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2007      	movs	r0, #7
 8001584:	f001 ff2d 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001588:	2007      	movs	r0, #7
 800158a:	f001 ff46 	bl	800341a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020000 	.word	0x40020000

080015a8 <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  	CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015ae:	220e      	movs	r2, #14
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
	CAN1_sFilterConfig.FilterBank = 0;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.FilterIdHigh = Tester_ID << 5;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_CAN1_Setup+0x88>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4a18      	ldr	r2, [pc, #96]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015cc:	6013      	str	r3, [r2, #0]
	CAN1_sFilterConfig.FilterIdLow = 0x0000;
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015d6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015da:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterActivation = ENABLE;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 80015ee:	490f      	ldr	r1, [pc, #60]	@ (800162c <MX_CAN1_Setup+0x84>)
 80015f0:	4810      	ldr	r0, [pc, #64]	@ (8001634 <MX_CAN1_Setup+0x8c>)
 80015f2:	f001 f8b5 	bl	8002760 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80015f6:	480f      	ldr	r0, [pc, #60]	@ (8001634 <MX_CAN1_Setup+0x8c>)
 80015f8:	f001 f992 	bl	8002920 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80015fc:	2102      	movs	r1, #2
 80015fe:	480d      	ldr	r0, [pc, #52]	@ (8001634 <MX_CAN1_Setup+0x8c>)
 8001600:	f001 fbbf 	bl	8002d82 <HAL_CAN_ActivateNotification>

	//Cần config header của CAN1
    CAN1_pHeader.StdId = ECU_ID;                   // Set TX message ID
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_CAN1_Setup+0x90>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_CAN1_Setup+0x94>)
 800160c:	601a      	str	r2, [r3, #0]
    CAN1_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_CAN1_Setup+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    CAN1_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_CAN1_Setup+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    CAN1_pHeader.DLC = 8;                         // 8 bytes of data
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_CAN1_Setup+0x94>)
 800161c:	2208      	movs	r2, #8
 800161e:	611a      	str	r2, [r3, #16]
    CAN1_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_CAN1_Setup+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	751a      	strb	r2, [r3, #20]
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000174 	.word	0x20000174
 8001630:	20000002 	.word	0x20000002
 8001634:	200000c8 	.word	0x200000c8
 8001638:	20000000 	.word	0x20000000
 800163c:	2000015c 	.word	0x2000015c

08001640 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	CAN2_sFilterConfig.FilterBank = 14;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001646:	220e      	movs	r2, #14
 8001648:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001652:	2201      	movs	r2, #1
 8001654:	61da      	str	r2, [r3, #28]
	CAN2_sFilterConfig.FilterIdHigh = ECU_ID << 5;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_CAN2_Setup+0x80>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	015b      	lsls	r3, r3, #5
 800165c:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 800165e:	6013      	str	r3, [r2, #0]
	CAN2_sFilterConfig.FilterIdLow = 0x0000;
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001668:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800166c:	609a      	str	r2, [r3, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterActivation = ENABLE;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 800167c:	2201      	movs	r2, #1
 800167e:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8001680:	490e      	ldr	r1, [pc, #56]	@ (80016bc <MX_CAN2_Setup+0x7c>)
 8001682:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <MX_CAN2_Setup+0x84>)
 8001684:	f001 f86c 	bl	8002760 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8001688:	480e      	ldr	r0, [pc, #56]	@ (80016c4 <MX_CAN2_Setup+0x84>)
 800168a:	f001 f949 	bl	8002920 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800168e:	2102      	movs	r1, #2
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <MX_CAN2_Setup+0x84>)
 8001692:	f001 fb76 	bl	8002d82 <HAL_CAN_ActivateNotification>

	//Cần config header của CAN2
    CAN2_pHeader.StdId = Tester_ID;                // Set TX message ID
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_CAN2_Setup+0x88>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_CAN2_Setup+0x8c>)
 800169e:	601a      	str	r2, [r3, #0]
    CAN2_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <MX_CAN2_Setup+0x8c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    CAN2_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_CAN2_Setup+0x8c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    CAN2_pHeader.DLC = 8;                         // 8 bytes of data
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_CAN2_Setup+0x8c>)
 80016ae:	2208      	movs	r2, #8
 80016b0:	611a      	str	r2, [r3, #16]
    CAN2_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_CAN2_Setup+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	751a      	strb	r2, [r3, #20]
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001b4 	.word	0x200001b4
 80016c0:	20000000 	.word	0x20000000
 80016c4:	200000f0 	.word	0x200000f0
 80016c8:	20000002 	.word	0x20000002
 80016cc:	2000019c 	.word	0x2000019c

080016d0 <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 80016d8:	e009      	b.n	80016ee <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	2201      	movs	r2, #1
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4807      	ldr	r0, [pc, #28]	@ (8001700 <USART3_SendString+0x30>)
 80016e4:	f002 fdf9 	bl	80042da <HAL_UART_Transmit>
      ch++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f1      	bne.n	80016da <USART3_SendString+0xa>
   }
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000118 	.word	0x20000118

08001704 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t *CAN_Frame)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	@ 0x50
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	80fb      	strh	r3, [r7, #6]
    char bufsend[64];  // Safe enough size
    uint16_t i = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    // Format timestamp
    int len = sprintf(bufsend, "%d ", TimeStamp);
 8001716:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <PrintCANLog+0xbc>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4929      	ldr	r1, [pc, #164]	@ (80017c4 <PrintCANLog+0xc0>)
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fe05 	bl	8005330 <siprintf>
 8001726:	64b8      	str	r0, [r7, #72]	@ 0x48

    // Format CAN ID (always 3 digits, uppercase hex)
    len += sprintf(bufsend + len, "%03X: ", CANID & 0x7FF);  // mask to 11 bits
 8001728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800172a:	f107 0208 	add.w	r2, r7, #8
 800172e:	18d0      	adds	r0, r2, r3
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001736:	461a      	mov	r2, r3
 8001738:	4923      	ldr	r1, [pc, #140]	@ (80017c8 <PrintCANLog+0xc4>)
 800173a:	f003 fdf9 	bl	8005330 <siprintf>
 800173e:	4602      	mov	r2, r0
 8001740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001742:	4413      	add	r3, r2
 8001744:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Format 8 bytes of CAN data
    for (i = 0; i < 8; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800174c:	e015      	b.n	800177a <PrintCANLog+0x76>
        len += sprintf(bufsend + len, "%02X ", CAN_Frame[i]);
 800174e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001750:	f107 0208 	add.w	r2, r7, #8
 8001754:	18d0      	adds	r0, r2, r3
 8001756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	491a      	ldr	r1, [pc, #104]	@ (80017cc <PrintCANLog+0xc8>)
 8001764:	f003 fde4 	bl	8005330 <siprintf>
 8001768:	4602      	mov	r2, r0
 800176a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800176c:	4413      	add	r3, r2
 800176e:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (i = 0; i < 8; i++) {
 8001770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001774:	3301      	adds	r3, #1
 8001776:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800177a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800177e:	2b07      	cmp	r3, #7
 8001780:	d9e5      	bls.n	800174e <PrintCANLog+0x4a>
    }

    // End with CRLF
    bufsend[len++] = '\r';
 8001782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001788:	3350      	adds	r3, #80	@ 0x50
 800178a:	443b      	add	r3, r7
 800178c:	220d      	movs	r2, #13
 800178e:	f803 2c48 	strb.w	r2, [r3, #-72]
    bufsend[len++] = '\n';
 8001792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001798:	3350      	adds	r3, #80	@ 0x50
 800179a:	443b      	add	r3, r7
 800179c:	220a      	movs	r2, #10
 800179e:	f803 2c48 	strb.w	r2, [r3, #-72]
    bufsend[len] = '\0';
 80017a2:	f107 0208 	add.w	r2, r7, #8
 80017a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]

    // Send over UART
    USART3_SendString((uint8_t *)bufsend);
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff8c 	bl	80016d0 <USART3_SendString>
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	@ 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20001208 	.word	0x20001208
 80017c4:	08005ce4 	.word	0x08005ce4
 80017c8:	08005ce8 	.word	0x08005ce8
 80017cc:	08005cf0 	.word	0x08005cf0

080017d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_UART_RxCpltCallback+0x34>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_UART_RxCpltCallback+0x38>)
 80017e0:	7819      	ldrb	r1, [r3, #0]
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_UART_RxCpltCallback+0x3c>)
 80017e4:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <HAL_UART_RxCpltCallback+0x34>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_UART_RxCpltCallback+0x34>)
 80017f0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	4904      	ldr	r1, [pc, #16]	@ (8001808 <HAL_UART_RxCpltCallback+0x38>)
 80017f6:	4806      	ldr	r0, [pc, #24]	@ (8001810 <HAL_UART_RxCpltCallback+0x40>)
 80017f8:	f002 fe01 	bl	80043fe <HAL_UART_Receive_IT>

	//REQ_BUFFER[7] = NumBytesReq;
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001dc 	.word	0x200001dc
 8001808:	200011e0 	.word	0x200011e0
 800180c:	200001e0 	.word	0x200001e0
 8001810:	20000118 	.word	0x20000118

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	4a0f      	ldr	r2, [pc, #60]	@ (800186c <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001834:	6453      	str	r3, [r2, #68]	@ 0x44
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	@ (800186c <HAL_MspInit+0x4c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_ADC_MspInit+0x7c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d127      	bne.n	80018e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_ADC_MspInit+0x80>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <HAL_ADC_MspInit+0x80>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <HAL_ADC_MspInit+0x80>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_ADC_MspInit+0x80>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <HAL_ADC_MspInit+0x80>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_ADC_MspInit+0x80>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ca:	2304      	movs	r3, #4
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <HAL_ADC_MspInit+0x84>)
 80018de:	f001 fe49 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	@ 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012000 	.word	0x40012000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	@ 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4a      	ldr	r2, [pc, #296]	@ (8001a40 <HAL_CAN_MspInit+0x148>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d13e      	bne.n	8001998 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_CAN_MspInit+0x14c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_CAN_MspInit+0x14c>)
 8001922:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001924:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <HAL_CAN_MspInit+0x14c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10d      	bne.n	8001948 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	4b45      	ldr	r3, [pc, #276]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	4a44      	ldr	r2, [pc, #272]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 8001936:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800193a:	6413      	str	r3, [r2, #64]	@ 0x40
 800193c:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	4a3d      	ldr	r2, [pc, #244]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6313      	str	r3, [r2, #48]	@ 0x30
 8001958:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001964:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001976:	2309      	movs	r3, #9
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4832      	ldr	r0, [pc, #200]	@ (8001a4c <HAL_CAN_MspInit+0x154>)
 8001982:	f001 fdf7 	bl	8003574 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2102      	movs	r1, #2
 800198a:	2014      	movs	r0, #20
 800198c:	f001 fd29 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001990:	2014      	movs	r0, #20
 8001992:	f001 fd42 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001996:	e04f      	b.n	8001a38 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a50 <HAL_CAN_MspInit+0x158>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d14a      	bne.n	8001a38 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <HAL_CAN_MspInit+0x14c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <HAL_CAN_MspInit+0x14c>)
 80019c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <HAL_CAN_MspInit+0x14c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10d      	bne.n	80019ec <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019de:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_CAN_MspInit+0x150>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a08:	2360      	movs	r3, #96	@ 0x60
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a18:	2309      	movs	r3, #9
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <HAL_CAN_MspInit+0x15c>)
 8001a24:	f001 fda6 	bl	8003574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	2040      	movs	r0, #64	@ 0x40
 8001a2e:	f001 fcd8 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001a32:	2040      	movs	r0, #64	@ 0x40
 8001a34:	f001 fcf1 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 8001a38:	bf00      	nop
 8001a3a:	3730      	adds	r7, #48	@ 0x30
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40006400 	.word	0x40006400
 8001a44:	2000122c 	.word	0x2000122c
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40006800 	.word	0x40006800
 8001a54:	40020400 	.word	0x40020400

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_UART_MspInit+0x94>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d134      	bne.n	8001ae4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_UART_MspInit+0x98>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ab2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4809      	ldr	r0, [pc, #36]	@ (8001af4 <HAL_UART_MspInit+0x9c>)
 8001ad0:	f001 fd50 	bl	8003574 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2027      	movs	r0, #39	@ 0x27
 8001ada:	f001 fc82 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ade:	2027      	movs	r0, #39	@ 0x27
 8001ae0:	f001 fc9b 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	@ 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40004800 	.word	0x40004800
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020800 	.word	0x40020800

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <NMI_Handler+0x4>

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <MemManage_Handler+0x4>

08001b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f000 f8fa 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <SysTick_Handler+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a02      	ldr	r2, [pc, #8]	@ (8001b64 <SysTick_Handler+0x18>)
 8001b5c:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001208 	.word	0x20001208

08001b68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f001 feb7 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f001 feb0 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <CAN1_RX0_IRQHandler+0x10>)
 8001b8a:	f001 f920 	bl	8002dce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000c8 	.word	0x200000c8

08001b98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <USART3_IRQHandler+0x10>)
 8001b9e:	f002 fc5f 	bl	8004460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000118 	.word	0x20000118

08001bac <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <CAN2_RX0_IRQHandler+0x10>)
 8001bb2:	f001 f90c 	bl	8002dce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200000f0 	.word	0x200000f0

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f003 fbd8 	bl	80053a4 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20020000 	.word	0x20020000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	20001230 	.word	0x20001230
 8001c28:	20001380 	.word	0x20001380

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	@ (8001c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	@ (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffd7 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f003 fb97 	bl	80053b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff f953 	bl	8000f2c <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c94:	08005d54 	.word	0x08005d54
  ldr r2, =_sbss
 8001c98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001c9c:	20001380 	.word	0x20001380

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <HAL_Init+0x40>)
 8001cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_Init+0x40>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_Init+0x40>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f001 fb7d 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fda2 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fb95 	bl	8003436 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f001 fb5d 	bl	80033e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000010 	.word	0x20000010
 8001d44:	2000000c 	.word	0x2000000c

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	20001234 	.word	0x20001234

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20001234 	.word	0x20001234

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000010 	.word	0x20000010

08001dd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e033      	b.n	8001e4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fd3e 	bl	8001870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e16:	f023 0302 	bic.w	r3, r3, #2
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 faa4 	bl	8002370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e3e:	e001      	b.n	8001e44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Start+0x1a>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0b2      	b.n	8001fd8 <HAL_ADC_Start+0x180>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d018      	beq.n	8001eba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e98:	4b52      	ldr	r3, [pc, #328]	@ (8001fe4 <HAL_ADC_Start+0x18c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	@ (8001fe8 <HAL_ADC_Start+0x190>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9a      	lsrs	r2, r3, #18
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d17a      	bne.n	8001fbe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ef2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	f023 0206 	bic.w	r2, r3, #6
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f24:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <HAL_ADC_Start+0x194>)
 8001f26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d12a      	bne.n	8001f94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff0 <HAL_ADC_Start+0x198>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d015      	beq.n	8001f74 <HAL_ADC_Start+0x11c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	@ (8001ff4 <HAL_ADC_Start+0x19c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_Start+0x106>
 8001f52:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <HAL_ADC_Start+0x194>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a25      	ldr	r2, [pc, #148]	@ (8001ff8 <HAL_ADC_Start+0x1a0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d136      	bne.n	8001fd6 <HAL_ADC_Start+0x17e>
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_ADC_Start+0x194>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d130      	bne.n	8001fd6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d129      	bne.n	8001fd6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	e020      	b.n	8001fd6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a15      	ldr	r2, [pc, #84]	@ (8001ff0 <HAL_ADC_Start+0x198>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d11b      	bne.n	8001fd6 <HAL_ADC_Start+0x17e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d114      	bne.n	8001fd6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	431bde83 	.word	0x431bde83
 8001fec:	40012300 	.word	0x40012300
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	40012100 	.word	0x40012100
 8001ff8:	40012200 	.word	0x40012200

08001ffc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002018:	d113      	bne.n	8002042 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002028:	d10b      	bne.n	8002042 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e063      	b.n	800210a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002042:	f7ff fe95 	bl	8001d70 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002048:	e021      	b.n	800208e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d01d      	beq.n	800208e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_ADC_PollForConversion+0x6c>
 8002058:	f7ff fe8a 	bl	8001d70 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d212      	bcs.n	800208e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d00b      	beq.n	800208e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e03d      	b.n	800210a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d1d6      	bne.n	800204a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0212 	mvn.w	r2, #18
 80020a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d123      	bne.n	8002108 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11f      	bne.n	8002108 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e105      	b.n	8002354 <HAL_ADC_ConfigChannel+0x228>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d925      	bls.n	80021a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43da      	mvns	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	400a      	ands	r2, r1
 800217c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68d9      	ldr	r1, [r3, #12]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	4603      	mov	r3, r0
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4403      	add	r3, r0
 8002196:	3b1e      	subs	r3, #30
 8002198:	409a      	lsls	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	e022      	b.n	80021ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6919      	ldr	r1, [r3, #16]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	2207      	movs	r2, #7
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	400a      	ands	r2, r1
 80021c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4403      	add	r3, r0
 80021e0:	409a      	lsls	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d824      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b05      	subs	r3, #5
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b05      	subs	r3, #5
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	635a      	str	r2, [r3, #52]	@ 0x34
 800223a:	e04c      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d824      	bhi.n	800228e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b23      	subs	r3, #35	@ 0x23
 8002256:	221f      	movs	r2, #31
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43da      	mvns	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3b23      	subs	r3, #35	@ 0x23
 8002280:	fa00 f203 	lsl.w	r2, r0, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	631a      	str	r2, [r3, #48]	@ 0x30
 800228c:	e023      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b41      	subs	r3, #65	@ 0x41
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b41      	subs	r3, #65	@ 0x41
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <HAL_ADC_ConfigChannel+0x234>)
 80022d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <HAL_ADC_ConfigChannel+0x238>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1cc>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <HAL_ADC_ConfigChannel+0x238>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d123      	bne.n	800234a <HAL_ADC_ConfigChannel+0x21e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d003      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x1e6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b11      	cmp	r3, #17
 8002310:	d11b      	bne.n	800234a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d111      	bne.n	800234a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_ADC_ConfigChannel+0x23c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a10      	ldr	r2, [pc, #64]	@ (800236c <HAL_ADC_ConfigChannel+0x240>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9a      	lsrs	r2, r3, #18
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40012300 	.word	0x40012300
 8002364:	40012000 	.word	0x40012000
 8002368:	20000008 	.word	0x20000008
 800236c:	431bde83 	.word	0x431bde83

08002370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002378:	4b79      	ldr	r3, [pc, #484]	@ (8002560 <ADC_Init+0x1f0>)
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	431a      	orrs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6899      	ldr	r1, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002402:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <ADC_Init+0x1f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002416:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e00f      	b.n	800246e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800245c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800246c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0202 	bic.w	r2, r2, #2
 800247c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e1b      	ldrb	r3, [r3, #24]
 8002488:	005a      	lsls	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	3b01      	subs	r3, #1
 80024c8:	035a      	lsls	r2, r3, #13
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	e007      	b.n	80024e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	3b01      	subs	r3, #1
 8002500:	051a      	lsls	r2, r3, #20
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002526:	025a      	lsls	r2, r3, #9
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	029a      	lsls	r2, r3, #10
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40012300 	.word	0x40012300
 8002564:	0f000001 	.word	0x0f000001

08002568 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0ed      	b.n	8002756 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff f9b6 	bl	80018f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800259c:	f7ff fbe8 	bl	8001d70 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025a2:	e012      	b.n	80025ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025a4:	f7ff fbe4 	bl	8001d70 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b0a      	cmp	r3, #10
 80025b0:	d90b      	bls.n	80025ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2205      	movs	r2, #5
 80025c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0c5      	b.n	8002756 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0e5      	beq.n	80025a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0202 	bic.w	r2, r2, #2
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e8:	f7ff fbc2 	bl	8001d70 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ee:	e012      	b.n	8002616 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f0:	f7ff fbbe 	bl	8001d70 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d90b      	bls.n	8002616 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e09f      	b.n	8002756 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e5      	bne.n	80025f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7e1b      	ldrb	r3, [r3, #24]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e007      	b.n	800264e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7e5b      	ldrb	r3, [r3, #25]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7e9b      	ldrb	r3, [r3, #26]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e007      	b.n	80026a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0220 	bic.w	r2, r2, #32
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7edb      	ldrb	r3, [r3, #27]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d108      	bne.n	80026bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0210 	bic.w	r2, r2, #16
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e007      	b.n	80026cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0210 	orr.w	r2, r2, #16
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7f1b      	ldrb	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0208 	orr.w	r2, r2, #8
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e007      	b.n	80026f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0208 	bic.w	r2, r2, #8
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7f5b      	ldrb	r3, [r3, #29]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0204 	orr.w	r2, r2, #4
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e007      	b.n	8002720 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	ea42 0103 	orr.w	r1, r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002776:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d003      	beq.n	8002786 <HAL_CAN_ConfigFilter+0x26>
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b02      	cmp	r3, #2
 8002782:	f040 80be 	bne.w	8002902 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <HAL_CAN_ConfigFilter+0x1bc>)
 8002788:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027a0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	431a      	orrs	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2201      	movs	r2, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d123      	bne.n	8002830 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800280a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3248      	adds	r2, #72	@ 0x48
 8002810:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002824:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002826:	6979      	ldr	r1, [r7, #20]
 8002828:	3348      	adds	r3, #72	@ 0x48
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d122      	bne.n	800287e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	431a      	orrs	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002858:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3248      	adds	r2, #72	@ 0x48
 800285e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002872:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002874:	6979      	ldr	r1, [r7, #20]
 8002876:	3348      	adds	r3, #72	@ 0x48
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	401a      	ands	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002898:	e007      	b.n	80028aa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	401a      	ands	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80028c4:	e007      	b.n	80028d6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028f4:	f023 0201 	bic.w	r2, r3, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e006      	b.n	8002910 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40006400 	.word	0x40006400

08002920 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d12e      	bne.n	8002992 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800294c:	f7ff fa10 	bl	8001d70 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002952:	e012      	b.n	800297a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002954:	f7ff fa0c 	bl	8001d70 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d90b      	bls.n	800297a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2205      	movs	r2, #5
 8002972:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e012      	b.n	80029a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e5      	bne.n	8002954 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e006      	b.n	80029a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	@ 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d003      	beq.n	80029d4 <HAL_CAN_AddTxMessage+0x2c>
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	f040 80b8 	bne.w	8002b44 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a0 	beq.w	8002b34 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	0e1b      	lsrs	r3, r3, #24
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d907      	bls.n	8002a14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e09e      	b.n	8002b52 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a14:	2201      	movs	r2, #1
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	6809      	ldr	r1, [r1, #0]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3318      	adds	r3, #24
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e00f      	b.n	8002a62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	440b      	add	r3, r1
 8002a60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	3304      	adds	r3, #4
 8002a74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	7d1b      	ldrb	r3, [r3, #20]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d111      	bne.n	8002aa2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3318      	adds	r3, #24
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3318      	adds	r3, #24
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3307      	adds	r3, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	061a      	lsls	r2, r3, #24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3306      	adds	r3, #6
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3305      	adds	r3, #5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	4313      	orrs	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	3204      	adds	r2, #4
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6811      	ldr	r1, [r2, #0]
 8002aca:	ea43 0200 	orr.w	r2, r3, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ad8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3303      	adds	r3, #3
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	061a      	lsls	r2, r3, #24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	4313      	orrs	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	4610      	mov	r0, r2
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	ea43 0200 	orr.w	r2, r3, r0
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3318      	adds	r3, #24
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	6811      	ldr	r1, [r2, #0]
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	440b      	add	r3, r1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e00e      	b.n	8002b52 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e006      	b.n	8002b52 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	@ 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b72:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d003      	beq.n	8002b82 <HAL_CAN_GetRxMessage+0x24>
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	f040 80f3 	bne.w	8002d68 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10e      	bne.n	8002ba6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0e7      	b.n	8002d76 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0d8      	b.n	8002d76 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	331b      	adds	r3, #27
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	4413      	add	r3, r2
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0204 	and.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	331b      	adds	r3, #27
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0d5b      	lsrs	r3, r3, #21
 8002bf2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	331b      	adds	r3, #27
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	4413      	add	r3, r2
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	08db      	lsrs	r3, r3, #3
 8002c0c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0202 	and.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	331b      	adds	r3, #27
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	331b      	adds	r3, #27
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	331b      	adds	r3, #27
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0a1a      	lsrs	r2, r3, #8
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0c1a      	lsrs	r2, r3, #16
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0e1a      	lsrs	r2, r3, #24
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	3303      	adds	r3, #3
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0a1a      	lsrs	r2, r3, #8
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3305      	adds	r3, #5
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0c1a      	lsrs	r2, r3, #16
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	3306      	adds	r3, #6
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e1a      	lsrs	r2, r3, #24
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	3307      	adds	r3, #7
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0220 	orr.w	r2, r2, #32
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	e007      	b.n	8002d64 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e006      	b.n	8002d76 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d002      	beq.n	8002da0 <HAL_CAN_ActivateNotification+0x1e>
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d109      	bne.n	8002db4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6959      	ldr	r1, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e006      	b.n	8002dc2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08a      	sub	sp, #40	@ 0x28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d07c      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d023      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f983 	bl	800313c <HAL_CAN_TxMailbox0CompleteCallback>
 8002e36:	e016      	b.n	8002e66 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	e00c      	b.n	8002e66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	e002      	b.n	8002e66 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f989 	bl	8003178 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d024      	beq.n	8002eba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f963 	bl	8003150 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e8a:	e016      	b.n	8002eba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9e:	e00c      	b.n	8002eba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb2:	e002      	b.n	8002eba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f969 	bl	800318c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d024      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ecc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f943 	bl	8003164 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ede:	e016      	b.n	8002f0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	e00c      	b.n	8002f0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f06:	e002      	b.n	8002f0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f949 	bl	80031a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f930 	bl	80031b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd fef7 	bl	8000d60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2210      	movs	r2, #16
 8002f94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d006      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f912 	bl	80031dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8f9 	bl	80031c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8fc 	bl	80031f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2208      	movs	r2, #8
 8003012:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8f5 	bl	8003204 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d07b      	beq.n	800311c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d072      	beq.n	8003114 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003088:	2b00      	cmp	r3, #0
 800308a:	d043      	beq.n	8003114 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03e      	beq.n	8003114 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800309c:	2b60      	cmp	r3, #96	@ 0x60
 800309e:	d02b      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x32a>
 80030a0:	2b60      	cmp	r3, #96	@ 0x60
 80030a2:	d82e      	bhi.n	8003102 <HAL_CAN_IRQHandler+0x334>
 80030a4:	2b50      	cmp	r3, #80	@ 0x50
 80030a6:	d022      	beq.n	80030ee <HAL_CAN_IRQHandler+0x320>
 80030a8:	2b50      	cmp	r3, #80	@ 0x50
 80030aa:	d82a      	bhi.n	8003102 <HAL_CAN_IRQHandler+0x334>
 80030ac:	2b40      	cmp	r3, #64	@ 0x40
 80030ae:	d019      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x316>
 80030b0:	2b40      	cmp	r3, #64	@ 0x40
 80030b2:	d826      	bhi.n	8003102 <HAL_CAN_IRQHandler+0x334>
 80030b4:	2b30      	cmp	r3, #48	@ 0x30
 80030b6:	d010      	beq.n	80030da <HAL_CAN_IRQHandler+0x30c>
 80030b8:	2b30      	cmp	r3, #48	@ 0x30
 80030ba:	d822      	bhi.n	8003102 <HAL_CAN_IRQHandler+0x334>
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d002      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x2f8>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d005      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030c4:	e01d      	b.n	8003102 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030ce:	e019      	b.n	8003104 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	f043 0310 	orr.w	r3, r3, #16
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030d8:	e014      	b.n	8003104 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	f043 0320 	orr.w	r3, r3, #32
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030e2:	e00f      	b.n	8003104 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030ec:	e00a      	b.n	8003104 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030f6:	e005      	b.n	8003104 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003100:	e000      	b.n	8003104 <HAL_CAN_IRQHandler+0x336>
            break;
 8003102:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003112:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2204      	movs	r2, #4
 800311a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f872 	bl	8003218 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003134:	bf00      	nop
 8003136:	3728      	adds	r7, #40	@ 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4907      	ldr	r1, [pc, #28]	@ (80032c8 <__NVIC_EnableIRQ+0x38>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	@ (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003398:	d301      	bcc.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <SysTick_Config+0x40>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	210f      	movs	r1, #15
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f7ff ff8e 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <SysTick_Config+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b6:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <SysTick_Config+0x40>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000e010 	.word	0xe000e010

080033cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff29 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f4:	f7ff ff3e 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff8e 	bl	8003320 <NVIC_EncodePriority>
 8003404:	4602      	mov	r2, r0
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff5d 	bl	80032cc <__NVIC_SetPriority>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff31 	bl	8003290 <__NVIC_EnableIRQ>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffa2 	bl	8003388 <SysTick_Config>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7fe fc88 	bl	8001d70 <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d008      	beq.n	8003480 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e052      	b.n	8003526 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0216 	bic.w	r2, r2, #22
 800348e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800349e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_DMA_Abort+0x62>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0208 	bic.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d0:	e013      	b.n	80034fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d2:	f7fe fc4d 	bl	8001d70 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d90c      	bls.n	80034fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e015      	b.n	8003526 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e4      	bne.n	80034d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350c:	223f      	movs	r2, #63	@ 0x3f
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d004      	beq.n	800354c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e00c      	b.n	8003566 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2205      	movs	r2, #5
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	@ 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	e16b      	b.n	8003868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 815a 	bne.w	8003862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d005      	beq.n	80035c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d130      	bne.n	8003628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0201 	and.w	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d017      	beq.n	8003664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d123      	bne.n	80036b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	220f      	movs	r2, #15
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80b4 	beq.w	8003862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b60      	ldr	r3, [pc, #384]	@ (8003880 <HAL_GPIO_Init+0x30c>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	4a5f      	ldr	r2, [pc, #380]	@ (8003880 <HAL_GPIO_Init+0x30c>)
 8003704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003708:	6453      	str	r3, [r2, #68]	@ 0x44
 800370a:	4b5d      	ldr	r3, [pc, #372]	@ (8003880 <HAL_GPIO_Init+0x30c>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003716:	4a5b      	ldr	r2, [pc, #364]	@ (8003884 <HAL_GPIO_Init+0x310>)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	220f      	movs	r2, #15
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a52      	ldr	r2, [pc, #328]	@ (8003888 <HAL_GPIO_Init+0x314>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02b      	beq.n	800379a <HAL_GPIO_Init+0x226>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a51      	ldr	r2, [pc, #324]	@ (800388c <HAL_GPIO_Init+0x318>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d025      	beq.n	8003796 <HAL_GPIO_Init+0x222>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a50      	ldr	r2, [pc, #320]	@ (8003890 <HAL_GPIO_Init+0x31c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <HAL_GPIO_Init+0x21e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a4f      	ldr	r2, [pc, #316]	@ (8003894 <HAL_GPIO_Init+0x320>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <HAL_GPIO_Init+0x21a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4e      	ldr	r2, [pc, #312]	@ (8003898 <HAL_GPIO_Init+0x324>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x216>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4d      	ldr	r2, [pc, #308]	@ (800389c <HAL_GPIO_Init+0x328>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x212>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4c      	ldr	r2, [pc, #304]	@ (80038a0 <HAL_GPIO_Init+0x32c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x20e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4b      	ldr	r2, [pc, #300]	@ (80038a4 <HAL_GPIO_Init+0x330>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x20a>
 800377a:	2307      	movs	r3, #7
 800377c:	e00e      	b.n	800379c <HAL_GPIO_Init+0x228>
 800377e:	2308      	movs	r3, #8
 8003780:	e00c      	b.n	800379c <HAL_GPIO_Init+0x228>
 8003782:	2306      	movs	r3, #6
 8003784:	e00a      	b.n	800379c <HAL_GPIO_Init+0x228>
 8003786:	2305      	movs	r3, #5
 8003788:	e008      	b.n	800379c <HAL_GPIO_Init+0x228>
 800378a:	2304      	movs	r3, #4
 800378c:	e006      	b.n	800379c <HAL_GPIO_Init+0x228>
 800378e:	2303      	movs	r3, #3
 8003790:	e004      	b.n	800379c <HAL_GPIO_Init+0x228>
 8003792:	2302      	movs	r3, #2
 8003794:	e002      	b.n	800379c <HAL_GPIO_Init+0x228>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_GPIO_Init+0x228>
 800379a:	2300      	movs	r3, #0
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f002 0203 	and.w	r2, r2, #3
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	4093      	lsls	r3, r2
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ac:	4935      	ldr	r1, [pc, #212]	@ (8003884 <HAL_GPIO_Init+0x310>)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ba:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037de:	4a32      	ldr	r2, [pc, #200]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e4:	4b30      	ldr	r3, [pc, #192]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003808:	4a27      	ldr	r2, [pc, #156]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800380e:	4b26      	ldr	r3, [pc, #152]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003832:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800385c:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_GPIO_Init+0x334>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3301      	adds	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b0f      	cmp	r3, #15
 800386c:	f67f ae90 	bls.w	8003590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	40013800 	.word	0x40013800
 8003888:	40020000 	.word	0x40020000
 800388c:	40020400 	.word	0x40020400
 8003890:	40020800 	.word	0x40020800
 8003894:	40020c00 	.word	0x40020c00
 8003898:	40021000 	.word	0x40021000
 800389c:	40021400 	.word	0x40021400
 80038a0:	40021800 	.word	0x40021800
 80038a4:	40021c00 	.word	0x40021c00
 80038a8:	40013c00 	.word	0x40013c00

080038ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038f6:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd faea 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e267      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d075      	beq.n	8003a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392e:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d00c      	beq.n	8003954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b85      	ldr	r3, [pc, #532]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003942:	2b08      	cmp	r3, #8
 8003944:	d112      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b82      	ldr	r3, [pc, #520]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003952:	d10b      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	4b7e      	ldr	r3, [pc, #504]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05b      	beq.n	8003a18 <HAL_RCC_OscConfig+0x108>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d157      	bne.n	8003a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e242      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d106      	bne.n	8003984 <HAL_RCC_OscConfig+0x74>
 8003976:	4b76      	ldr	r3, [pc, #472]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a75      	ldr	r2, [pc, #468]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e01d      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x98>
 800398e:	4b70      	ldr	r3, [pc, #448]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6f      	ldr	r2, [pc, #444]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 80039a8:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe f9d2 	bl	8001d70 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe f9ce 	bl	8001d70 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	@ 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e207      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0xc0>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe f9be 	bl	8001d70 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe f9ba 	bl	8001d70 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	@ 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1f3      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0xe8>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d063      	beq.n	8003aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a26:	4b4a      	ldr	r3, [pc, #296]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1c7      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4937      	ldr	r1, [pc, #220]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e03a      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b34      	ldr	r3, [pc, #208]	@ (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe f973 	bl	8001d70 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe f96f 	bl	8001d70 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1a8      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b28      	ldr	r3, [pc, #160]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4925      	ldr	r1, [pc, #148]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f952 	bl	8001d70 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f94e 	bl	8001d70 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e187      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d036      	beq.n	8003b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe f932 	bl	8001d70 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe f92e 	bl	8001d70 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e167      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x200>
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7fe f91b 	bl	8001d70 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	e00e      	b.n	8003b5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fe f917 	bl	8001d70 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d907      	bls.n	8003b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e150      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	42470000 	.word	0x42470000
 8003b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	4b88      	ldr	r3, [pc, #544]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ea      	bne.n	8003b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8097 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b81      	ldr	r3, [pc, #516]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b7a      	ldr	r3, [pc, #488]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b77      	ldr	r3, [pc, #476]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b74      	ldr	r3, [pc, #464]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a73      	ldr	r2, [pc, #460]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe f8d7 	bl	8001d70 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe f8d3 	bl	8001d70 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e10c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2ea>
 8003bec:	4b64      	ldr	r3, [pc, #400]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	4a63      	ldr	r2, [pc, #396]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x30c>
 8003c02:	4b5f      	ldr	r3, [pc, #380]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	4a5b      	ldr	r2, [pc, #364]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003c1c:	4b58      	ldr	r3, [pc, #352]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a57      	ldr	r2, [pc, #348]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c28:	4b55      	ldr	r3, [pc, #340]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fe f898 	bl	8001d70 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7fe f894 	bl	8001d70 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0cb      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	4b49      	ldr	r3, [pc, #292]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ee      	beq.n	8003c44 <HAL_RCC_OscConfig+0x334>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fe f882 	bl	8001d70 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fe f87e 	bl	8001d70 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0b5      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	4b3e      	ldr	r3, [pc, #248]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ee      	bne.n	8003c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	4a38      	ldr	r2, [pc, #224]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a1 	beq.w	8003df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cae:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d05c      	beq.n	8003d74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d141      	bne.n	8003d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f852 	bl	8001d70 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe f84e 	bl	8001d70 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e087      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	491b      	ldr	r1, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe f827 	bl	8001d70 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe f823 	bl	8001d70 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e05c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003d44:	e054      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f810 	bl	8001d70 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe f80c 	bl	8001d70 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e045      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x444>
 8003d72:	e03d      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e038      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x4ec>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d028      	beq.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d121      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d111      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0cc      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b68      	ldr	r3, [pc, #416]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d90c      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b65      	ldr	r3, [pc, #404]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b8      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a58      	ldr	r2, [pc, #352]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e6c:	4b53      	ldr	r3, [pc, #332]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a52      	ldr	r2, [pc, #328]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	494d      	ldr	r1, [pc, #308]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d044      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d119      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e067      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b37      	ldr	r3, [pc, #220]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4934      	ldr	r1, [pc, #208]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7fd ff3e 	bl	8001d70 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fd ff3a 	bl	8001d70 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e04f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b25      	ldr	r3, [pc, #148]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d20c      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e032      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4916      	ldr	r1, [pc, #88]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	490e      	ldr	r1, [pc, #56]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f86:	f000 f821 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	490a      	ldr	r1, [pc, #40]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	5ccb      	ldrb	r3, [r1, r3]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd fe9e 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08005cf8 	.word	0x08005cf8
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b094      	sub	sp, #80	@ 0x50
 8003fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fdc:	2300      	movs	r3, #0
 8003fde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe4:	4b79      	ldr	r3, [pc, #484]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d00d      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x40>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	f200 80e1 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffe:	e0db      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b73      	ldr	r3, [pc, #460]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004002:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004004:	e0db      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004006:	4b73      	ldr	r3, [pc, #460]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400a:	e0d8      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800400c:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004014:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004016:	4b6d      	ldr	r3, [pc, #436]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800402c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
 800403a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4621      	mov	r1, r4
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	6139      	str	r1, [r7, #16]
 800405c:	4629      	mov	r1, r5
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004070:	4659      	mov	r1, fp
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4651      	mov	r1, sl
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	ebb2 0801 	subs.w	r8, r2, r1
 8004084:	4659      	mov	r1, fp
 8004086:	eb63 0901 	sbc.w	r9, r3, r1
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800409a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409e:	4690      	mov	r8, r2
 80040a0:	4699      	mov	r9, r3
 80040a2:	4623      	mov	r3, r4
 80040a4:	eb18 0303 	adds.w	r3, r8, r3
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	462b      	mov	r3, r5
 80040ac:	eb49 0303 	adc.w	r3, r9, r3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040be:	4629      	mov	r1, r5
 80040c0:	024b      	lsls	r3, r1, #9
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c8:	4621      	mov	r1, r4
 80040ca:	024a      	lsls	r2, r1, #9
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040dc:	f7fc f8c8 	bl	8000270 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	e058      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b38      	ldr	r3, [pc, #224]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	2200      	movs	r2, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	4611      	mov	r1, r2
 80040f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004116:	0150      	lsls	r0, r2, #5
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4641      	mov	r1, r8
 800411e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb63 0b01 	sbc.w	fp, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800413c:	ebb2 040a 	subs.w	r4, r2, sl
 8004140:	eb63 050b 	sbc.w	r5, r3, fp
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	00eb      	lsls	r3, r5, #3
 800414e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004152:	00e2      	lsls	r2, r4, #3
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	4643      	mov	r3, r8
 800415a:	18e3      	adds	r3, r4, r3
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	464b      	mov	r3, r9
 8004160:	eb45 0303 	adc.w	r3, r5, r3
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004186:	2200      	movs	r2, #0
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	61fa      	str	r2, [r7, #28]
 800418c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004190:	f7fc f86e 	bl	8000270 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80041ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3750      	adds	r7, #80	@ 0x50
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	007a1200 	.word	0x007a1200

080041d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_GetHCLKFreq+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000008 	.word	0x20000008

080041f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f4:	f7ff fff0 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	@ (8004214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	08005d08 	.word	0x08005d08

08004218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800421c:	f7ff ffdc 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0b5b      	lsrs	r3, r3, #13
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	@ (800423c <HAL_RCC_GetPCLK2Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	08005d08 	.word	0x08005d08

08004240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03f      	b.n	80042d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fbf6 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	@ 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fddf 	bl	8004e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08a      	sub	sp, #40	@ 0x28
 80042de:	af02      	add	r7, sp, #8
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d17c      	bne.n	80043f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_UART_Transmit+0x2c>
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e075      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_UART_Transmit+0x3e>
 8004314:	2302      	movs	r3, #2
 8004316:	e06e      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	@ 0x21
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432e:	f7fd fd1f 	bl	8001d70 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x82>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800436c:	e02a      	b.n	80043c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	@ 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fb1f 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e036      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3302      	adds	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e007      	b.n	80043b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1cf      	bne.n	800436e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	@ 0x40
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 faef 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b20      	cmp	r3, #32
 8004416:	d11d      	bne.n	8004454 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Receive_IT+0x26>
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e016      	b.n	8004456 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive_IT+0x38>
 8004432:	2302      	movs	r3, #2
 8004434:	e00f      	b.n	8004456 <HAL_UART_Receive_IT+0x58>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	461a      	mov	r2, r3
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fb24 	bl	8004a98 <UART_Start_Receive_IT>
 8004450:	4603      	mov	r3, r0
 8004452:	e000      	b.n	8004456 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b0ba      	sub	sp, #232	@ 0xe8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800448c:	2300      	movs	r3, #0
 800448e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800449e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_UART_IRQHandler+0x66>
 80044b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fc07 	bl	8004cd2 <UART_Receive_IT>
      return;
 80044c4:	e256      	b.n	8004974 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80de 	beq.w	800468c <HAL_UART_IRQHandler+0x22c>
 80044d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80d1 	beq.w	800468c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_UART_IRQHandler+0xae>
 80044f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800450e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_UART_IRQHandler+0xd2>
 800451a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0202 	orr.w	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_UART_IRQHandler+0xf6>
 800453e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_UART_IRQHandler+0x126>
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d105      	bne.n	800457a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f043 0208 	orr.w	r2, r3, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 81ed 	beq.w	800496a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_UART_IRQHandler+0x14e>
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fb92 	bl	8004cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <HAL_UART_IRQHandler+0x17a>
 80045d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04f      	beq.n	800467a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa9a 	bl	8004b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ea:	2b40      	cmp	r3, #64	@ 0x40
 80045ec:	d141      	bne.n	8004672 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004604:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800460c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3314      	adds	r3, #20
 8004616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800461a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800461e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1d9      	bne.n	80045ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463e:	2b00      	cmp	r3, #0
 8004640:	d013      	beq.n	800466a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	4a7d      	ldr	r2, [pc, #500]	@ (800483c <HAL_UART_IRQHandler+0x3dc>)
 8004648:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe ff6d 	bl	800352e <HAL_DMA_Abort_IT>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004664:	4610      	mov	r0, r2
 8004666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	e00e      	b.n	8004688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f990 	bl	8004990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	e00a      	b.n	8004688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f98c 	bl	8004990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	e006      	b.n	8004688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f988 	bl	8004990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004686:	e170      	b.n	800496a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004688:	bf00      	nop
    return;
 800468a:	e16e      	b.n	800496a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	2b01      	cmp	r3, #1
 8004692:	f040 814a 	bne.w	800492a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8143 	beq.w	800492a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 813c 	beq.w	800492a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b40      	cmp	r3, #64	@ 0x40
 80046d4:	f040 80b4 	bne.w	8004840 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8140 	beq.w	800496e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046f6:	429a      	cmp	r2, r3
 80046f8:	f080 8139 	bcs.w	800496e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004702:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470e:	f000 8088 	beq.w	8004822 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800473e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800474a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1d9      	bne.n	8004712 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800476e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3314      	adds	r3, #20
 800477e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004782:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800478a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e1      	bne.n	800475e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3314      	adds	r3, #20
 80047a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e3      	bne.n	800479a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004804:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004806:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800480a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e3      	bne.n	80047e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fe16 	bl	800344e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800482a:	b29b      	uxth	r3, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f8b6 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004838:	e099      	b.n	800496e <HAL_UART_IRQHandler+0x50e>
 800483a:	bf00      	nop
 800483c:	08004bdb 	.word	0x08004bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004848:	b29b      	uxth	r3, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 808b 	beq.w	8004972 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800485c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8086 	beq.w	8004972 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800487c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800488a:	647a      	str	r2, [r7, #68]	@ 0x44
 800488c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e3      	bne.n	8004866 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	623b      	str	r3, [r7, #32]
   return(result);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3314      	adds	r3, #20
 80048be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e3      	bne.n	800489e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004908:	61fa      	str	r2, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	69b9      	ldr	r1, [r7, #24]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	617b      	str	r3, [r7, #20]
   return(result);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e3      	bne.n	80048e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800491c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f83e 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004928:	e023      	b.n	8004972 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_UART_IRQHandler+0x4ea>
 8004936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f95d 	bl	8004c02 <UART_Transmit_IT>
    return;
 8004948:	e014      	b.n	8004974 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800494e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00e      	beq.n	8004974 <HAL_UART_IRQHandler+0x514>
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f99d 	bl	8004ca2 <UART_EndTransmit_IT>
    return;
 8004968:	e004      	b.n	8004974 <HAL_UART_IRQHandler+0x514>
    return;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_UART_IRQHandler+0x514>
      return;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_UART_IRQHandler+0x514>
      return;
 8004972:	bf00      	nop
  }
}
 8004974:	37e8      	adds	r7, #232	@ 0xe8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop

0800497c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b090      	sub	sp, #64	@ 0x40
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049cc:	e050      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d04c      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <UART_WaitOnFlagUntilTimeout+0x30>
 80049dc:	f7fd f9c8 	bl	8001d70 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d241      	bcs.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a40:	623a      	str	r2, [r7, #32]
 8004a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69f9      	ldr	r1, [r7, #28]
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e00f      	b.n	8004a90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d09f      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3740      	adds	r7, #64	@ 0x40
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2222      	movs	r2, #34	@ 0x22
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b095      	sub	sp, #84	@ 0x54
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d119      	bne.n	8004bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bce:	bf00      	nop
 8004bd0:	3754      	adds	r7, #84	@ 0x54
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fecb 	bl	8004990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b21      	cmp	r3, #33	@ 0x21
 8004c14:	d13e      	bne.n	8004c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1e:	d114      	bne.n	8004c4a <UART_Transmit_IT+0x48>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d110      	bne.n	8004c4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]
 8004c48:	e008      	b.n	8004c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6211      	str	r1, [r2, #32]
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fe5a 	bl	800497c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08c      	sub	sp, #48	@ 0x30
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b22      	cmp	r3, #34	@ 0x22
 8004ce4:	f040 80ab 	bne.w	8004e3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf0:	d117      	bne.n	8004d22 <UART_Receive_IT+0x50>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d113      	bne.n	8004d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	1c9a      	adds	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d20:	e026      	b.n	8004d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d34:	d007      	beq.n	8004d46 <UART_Receive_IT+0x74>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <UART_Receive_IT+0x82>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e008      	b.n	8004d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d15a      	bne.n	8004e3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0220 	bic.w	r2, r2, #32
 8004d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d135      	bne.n	8004e30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f023 0310 	bic.w	r3, r3, #16
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dea:	623a      	str	r2, [r7, #32]
 8004dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	69f9      	ldr	r1, [r7, #28]
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d10a      	bne.n	8004e22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fdbb 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
 8004e2e:	e002      	b.n	8004e36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fc fccd 	bl	80017d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e002      	b.n	8004e40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3730      	adds	r7, #48	@ 0x30
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e4c:	b0c0      	sub	sp, #256	@ 0x100
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	68d9      	ldr	r1, [r3, #12]
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	ea40 0301 	orr.w	r3, r0, r1
 8004e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ea0:	f021 010c 	bic.w	r1, r1, #12
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	6999      	ldr	r1, [r3, #24]
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	ea40 0301 	orr.w	r3, r0, r1
 8004ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8005114 <UART_SetConfig+0x2cc>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d005      	beq.n	8004ee8 <UART_SetConfig+0xa0>
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8005118 <UART_SetConfig+0x2d0>)
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d104      	bne.n	8004ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ee8:	f7ff f996 	bl	8004218 <HAL_RCC_GetPCLK2Freq>
 8004eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ef0:	e003      	b.n	8004efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ef2:	f7ff f97d 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8004ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f04:	f040 810c 	bne.w	8005120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	462b      	mov	r3, r5
 8004f1e:	1891      	adds	r1, r2, r2
 8004f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f22:	415b      	adcs	r3, r3
 8004f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	eb12 0801 	adds.w	r8, r2, r1
 8004f30:	4629      	mov	r1, r5
 8004f32:	eb43 0901 	adc.w	r9, r3, r1
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4a:	4690      	mov	r8, r2
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	4623      	mov	r3, r4
 8004f50:	eb18 0303 	adds.w	r3, r8, r3
 8004f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f58:	462b      	mov	r3, r5
 8004f5a:	eb49 0303 	adc.w	r3, r9, r3
 8004f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f76:	460b      	mov	r3, r1
 8004f78:	18db      	adds	r3, r3, r3
 8004f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	eb42 0303 	adc.w	r3, r2, r3
 8004f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f8c:	f7fb f970 	bl	8000270 <__aeabi_uldivmod>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4b61      	ldr	r3, [pc, #388]	@ (800511c <UART_SetConfig+0x2d4>)
 8004f96:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	011c      	lsls	r4, r3, #4
 8004f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	1891      	adds	r1, r2, r2
 8004fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fb8:	415b      	adcs	r3, r3
 8004fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe0:	4692      	mov	sl, r2
 8004fe2:	469b      	mov	fp, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800500c:	460b      	mov	r3, r1
 800500e:	18db      	adds	r3, r3, r3
 8005010:	643b      	str	r3, [r7, #64]	@ 0x40
 8005012:	4613      	mov	r3, r2
 8005014:	eb42 0303 	adc.w	r3, r2, r3
 8005018:	647b      	str	r3, [r7, #68]	@ 0x44
 800501a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800501e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005022:	f7fb f925 	bl	8000270 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4611      	mov	r1, r2
 800502c:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <UART_SetConfig+0x2d4>)
 800502e:	fba3 2301 	umull	r2, r3, r3, r1
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2264      	movs	r2, #100	@ 0x64
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	1acb      	subs	r3, r1, r3
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005042:	4b36      	ldr	r3, [pc, #216]	@ (800511c <UART_SetConfig+0x2d4>)
 8005044:	fba3 2302 	umull	r2, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005050:	441c      	add	r4, r3
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800505c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	1891      	adds	r1, r2, r2
 800506a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800506c:	415b      	adcs	r3, r3
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005074:	4641      	mov	r1, r8
 8005076:	1851      	adds	r1, r2, r1
 8005078:	6339      	str	r1, [r7, #48]	@ 0x30
 800507a:	4649      	mov	r1, r9
 800507c:	414b      	adcs	r3, r1
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800508c:	4659      	mov	r1, fp
 800508e:	00cb      	lsls	r3, r1, #3
 8005090:	4651      	mov	r1, sl
 8005092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005096:	4651      	mov	r1, sl
 8005098:	00ca      	lsls	r2, r1, #3
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	4642      	mov	r2, r8
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050a8:	464b      	mov	r3, r9
 80050aa:	460a      	mov	r2, r1
 80050ac:	eb42 0303 	adc.w	r3, r2, r3
 80050b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050c8:	460b      	mov	r3, r1
 80050ca:	18db      	adds	r3, r3, r3
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ce:	4613      	mov	r3, r2
 80050d0:	eb42 0303 	adc.w	r3, r2, r3
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050de:	f7fb f8c7 	bl	8000270 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <UART_SetConfig+0x2d4>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	@ 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	3332      	adds	r3, #50	@ 0x32
 80050fa:	4a08      	ldr	r2, [pc, #32]	@ (800511c <UART_SetConfig+0x2d4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 0207 	and.w	r2, r3, #7
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4422      	add	r2, r4
 800510e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005110:	e106      	b.n	8005320 <UART_SetConfig+0x4d8>
 8005112:	bf00      	nop
 8005114:	40011000 	.word	0x40011000
 8005118:	40011400 	.word	0x40011400
 800511c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800512a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800512e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005132:	4642      	mov	r2, r8
 8005134:	464b      	mov	r3, r9
 8005136:	1891      	adds	r1, r2, r2
 8005138:	6239      	str	r1, [r7, #32]
 800513a:	415b      	adcs	r3, r3
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
 800513e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005142:	4641      	mov	r1, r8
 8005144:	1854      	adds	r4, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb43 0501 	adc.w	r5, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	00eb      	lsls	r3, r5, #3
 8005156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800515a:	00e2      	lsls	r2, r4, #3
 800515c:	4614      	mov	r4, r2
 800515e:	461d      	mov	r5, r3
 8005160:	4643      	mov	r3, r8
 8005162:	18e3      	adds	r3, r4, r3
 8005164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005168:	464b      	mov	r3, r9
 800516a:	eb45 0303 	adc.w	r3, r5, r3
 800516e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800517e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800518e:	4629      	mov	r1, r5
 8005190:	008b      	lsls	r3, r1, #2
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005198:	4621      	mov	r1, r4
 800519a:	008a      	lsls	r2, r1, #2
 800519c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051a0:	f7fb f866 	bl	8000270 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4b60      	ldr	r3, [pc, #384]	@ (800532c <UART_SetConfig+0x4e4>)
 80051aa:	fba3 2302 	umull	r2, r3, r3, r2
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	011c      	lsls	r4, r3, #4
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	61b9      	str	r1, [r7, #24]
 80051cc:	415b      	adcs	r3, r3
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d4:	4641      	mov	r1, r8
 80051d6:	1851      	adds	r1, r2, r1
 80051d8:	6139      	str	r1, [r7, #16]
 80051da:	4649      	mov	r1, r9
 80051dc:	414b      	adcs	r3, r1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ec:	4659      	mov	r1, fp
 80051ee:	00cb      	lsls	r3, r1, #3
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f6:	4651      	mov	r1, sl
 80051f8:	00ca      	lsls	r2, r1, #3
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	4642      	mov	r2, r8
 8005202:	189b      	adds	r3, r3, r2
 8005204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800521e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800522c:	4649      	mov	r1, r9
 800522e:	008b      	lsls	r3, r1, #2
 8005230:	4641      	mov	r1, r8
 8005232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005236:	4641      	mov	r1, r8
 8005238:	008a      	lsls	r2, r1, #2
 800523a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800523e:	f7fb f817 	bl	8000270 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4611      	mov	r1, r2
 8005248:	4b38      	ldr	r3, [pc, #224]	@ (800532c <UART_SetConfig+0x4e4>)
 800524a:	fba3 2301 	umull	r2, r3, r3, r1
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2264      	movs	r2, #100	@ 0x64
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	1acb      	subs	r3, r1, r3
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	3332      	adds	r3, #50	@ 0x32
 800525c:	4a33      	ldr	r2, [pc, #204]	@ (800532c <UART_SetConfig+0x4e4>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005268:	441c      	add	r4, r3
 800526a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526e:	2200      	movs	r2, #0
 8005270:	673b      	str	r3, [r7, #112]	@ 0x70
 8005272:	677a      	str	r2, [r7, #116]	@ 0x74
 8005274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	415b      	adcs	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005288:	4641      	mov	r1, r8
 800528a:	1851      	adds	r1, r2, r1
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	4649      	mov	r1, r9
 8005290:	414b      	adcs	r3, r1
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a0:	4659      	mov	r1, fp
 80052a2:	00cb      	lsls	r3, r1, #3
 80052a4:	4651      	mov	r1, sl
 80052a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052aa:	4651      	mov	r1, sl
 80052ac:	00ca      	lsls	r2, r1, #3
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	4642      	mov	r2, r8
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ba:	464b      	mov	r3, r9
 80052bc:	460a      	mov	r2, r1
 80052be:	eb42 0303 	adc.w	r3, r2, r3
 80052c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052dc:	4649      	mov	r1, r9
 80052de:	008b      	lsls	r3, r1, #2
 80052e0:	4641      	mov	r1, r8
 80052e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e6:	4641      	mov	r1, r8
 80052e8:	008a      	lsls	r2, r1, #2
 80052ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052ee:	f7fa ffbf 	bl	8000270 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <UART_SetConfig+0x4e4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	@ 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3332      	adds	r3, #50	@ 0x32
 800530a:	4a08      	ldr	r2, [pc, #32]	@ (800532c <UART_SetConfig+0x4e4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4422      	add	r2, r4
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005326:	46bd      	mov	sp, r7
 8005328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532c:	51eb851f 	.word	0x51eb851f

08005330 <siprintf>:
 8005330:	b40e      	push	{r1, r2, r3}
 8005332:	b510      	push	{r4, lr}
 8005334:	b09d      	sub	sp, #116	@ 0x74
 8005336:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005338:	9002      	str	r0, [sp, #8]
 800533a:	9006      	str	r0, [sp, #24]
 800533c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005340:	480a      	ldr	r0, [pc, #40]	@ (800536c <siprintf+0x3c>)
 8005342:	9107      	str	r1, [sp, #28]
 8005344:	9104      	str	r1, [sp, #16]
 8005346:	490a      	ldr	r1, [pc, #40]	@ (8005370 <siprintf+0x40>)
 8005348:	f853 2b04 	ldr.w	r2, [r3], #4
 800534c:	9105      	str	r1, [sp, #20]
 800534e:	2400      	movs	r4, #0
 8005350:	a902      	add	r1, sp, #8
 8005352:	6800      	ldr	r0, [r0, #0]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005358:	f000 f9a4 	bl	80056a4 <_svfiprintf_r>
 800535c:	9b02      	ldr	r3, [sp, #8]
 800535e:	701c      	strb	r4, [r3, #0]
 8005360:	b01d      	add	sp, #116	@ 0x74
 8005362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005366:	b003      	add	sp, #12
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000014 	.word	0x20000014
 8005370:	ffff0208 	.word	0xffff0208

08005374 <memcmp>:
 8005374:	b510      	push	{r4, lr}
 8005376:	3901      	subs	r1, #1
 8005378:	4402      	add	r2, r0
 800537a:	4290      	cmp	r0, r2
 800537c:	d101      	bne.n	8005382 <memcmp+0xe>
 800537e:	2000      	movs	r0, #0
 8005380:	e005      	b.n	800538e <memcmp+0x1a>
 8005382:	7803      	ldrb	r3, [r0, #0]
 8005384:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005388:	42a3      	cmp	r3, r4
 800538a:	d001      	beq.n	8005390 <memcmp+0x1c>
 800538c:	1b18      	subs	r0, r3, r4
 800538e:	bd10      	pop	{r4, pc}
 8005390:	3001      	adds	r0, #1
 8005392:	e7f2      	b.n	800537a <memcmp+0x6>

08005394 <memset>:
 8005394:	4402      	add	r2, r0
 8005396:	4603      	mov	r3, r0
 8005398:	4293      	cmp	r3, r2
 800539a:	d100      	bne.n	800539e <memset+0xa>
 800539c:	4770      	bx	lr
 800539e:	f803 1b01 	strb.w	r1, [r3], #1
 80053a2:	e7f9      	b.n	8005398 <memset+0x4>

080053a4 <__errno>:
 80053a4:	4b01      	ldr	r3, [pc, #4]	@ (80053ac <__errno+0x8>)
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000014 	.word	0x20000014

080053b0 <__libc_init_array>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4d0d      	ldr	r5, [pc, #52]	@ (80053e8 <__libc_init_array+0x38>)
 80053b4:	4c0d      	ldr	r4, [pc, #52]	@ (80053ec <__libc_init_array+0x3c>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	2600      	movs	r6, #0
 80053bc:	42a6      	cmp	r6, r4
 80053be:	d109      	bne.n	80053d4 <__libc_init_array+0x24>
 80053c0:	4d0b      	ldr	r5, [pc, #44]	@ (80053f0 <__libc_init_array+0x40>)
 80053c2:	4c0c      	ldr	r4, [pc, #48]	@ (80053f4 <__libc_init_array+0x44>)
 80053c4:	f000 fc64 	bl	8005c90 <_init>
 80053c8:	1b64      	subs	r4, r4, r5
 80053ca:	10a4      	asrs	r4, r4, #2
 80053cc:	2600      	movs	r6, #0
 80053ce:	42a6      	cmp	r6, r4
 80053d0:	d105      	bne.n	80053de <__libc_init_array+0x2e>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d8:	4798      	blx	r3
 80053da:	3601      	adds	r6, #1
 80053dc:	e7ee      	b.n	80053bc <__libc_init_array+0xc>
 80053de:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e2:	4798      	blx	r3
 80053e4:	3601      	adds	r6, #1
 80053e6:	e7f2      	b.n	80053ce <__libc_init_array+0x1e>
 80053e8:	08005d4c 	.word	0x08005d4c
 80053ec:	08005d4c 	.word	0x08005d4c
 80053f0:	08005d4c 	.word	0x08005d4c
 80053f4:	08005d50 	.word	0x08005d50

080053f8 <__retarget_lock_acquire_recursive>:
 80053f8:	4770      	bx	lr

080053fa <__retarget_lock_release_recursive>:
 80053fa:	4770      	bx	lr

080053fc <_free_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4605      	mov	r5, r0
 8005400:	2900      	cmp	r1, #0
 8005402:	d041      	beq.n	8005488 <_free_r+0x8c>
 8005404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005408:	1f0c      	subs	r4, r1, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfb8      	it	lt
 800540e:	18e4      	addlt	r4, r4, r3
 8005410:	f000 f8e0 	bl	80055d4 <__malloc_lock>
 8005414:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <_free_r+0x90>)
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	b933      	cbnz	r3, 8005428 <_free_r+0x2c>
 800541a:	6063      	str	r3, [r4, #4]
 800541c:	6014      	str	r4, [r2, #0]
 800541e:	4628      	mov	r0, r5
 8005420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005424:	f000 b8dc 	b.w	80055e0 <__malloc_unlock>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d908      	bls.n	800543e <_free_r+0x42>
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	1821      	adds	r1, r4, r0
 8005430:	428b      	cmp	r3, r1
 8005432:	bf01      	itttt	eq
 8005434:	6819      	ldreq	r1, [r3, #0]
 8005436:	685b      	ldreq	r3, [r3, #4]
 8005438:	1809      	addeq	r1, r1, r0
 800543a:	6021      	streq	r1, [r4, #0]
 800543c:	e7ed      	b.n	800541a <_free_r+0x1e>
 800543e:	461a      	mov	r2, r3
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b10b      	cbz	r3, 8005448 <_free_r+0x4c>
 8005444:	42a3      	cmp	r3, r4
 8005446:	d9fa      	bls.n	800543e <_free_r+0x42>
 8005448:	6811      	ldr	r1, [r2, #0]
 800544a:	1850      	adds	r0, r2, r1
 800544c:	42a0      	cmp	r0, r4
 800544e:	d10b      	bne.n	8005468 <_free_r+0x6c>
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	4401      	add	r1, r0
 8005454:	1850      	adds	r0, r2, r1
 8005456:	4283      	cmp	r3, r0
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	d1e0      	bne.n	800541e <_free_r+0x22>
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	6053      	str	r3, [r2, #4]
 8005462:	4408      	add	r0, r1
 8005464:	6010      	str	r0, [r2, #0]
 8005466:	e7da      	b.n	800541e <_free_r+0x22>
 8005468:	d902      	bls.n	8005470 <_free_r+0x74>
 800546a:	230c      	movs	r3, #12
 800546c:	602b      	str	r3, [r5, #0]
 800546e:	e7d6      	b.n	800541e <_free_r+0x22>
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	1821      	adds	r1, r4, r0
 8005474:	428b      	cmp	r3, r1
 8005476:	bf04      	itt	eq
 8005478:	6819      	ldreq	r1, [r3, #0]
 800547a:	685b      	ldreq	r3, [r3, #4]
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	bf04      	itt	eq
 8005480:	1809      	addeq	r1, r1, r0
 8005482:	6021      	streq	r1, [r4, #0]
 8005484:	6054      	str	r4, [r2, #4]
 8005486:	e7ca      	b.n	800541e <_free_r+0x22>
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	2000137c 	.word	0x2000137c

08005490 <sbrk_aligned>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4e0f      	ldr	r6, [pc, #60]	@ (80054d0 <sbrk_aligned+0x40>)
 8005494:	460c      	mov	r4, r1
 8005496:	6831      	ldr	r1, [r6, #0]
 8005498:	4605      	mov	r5, r0
 800549a:	b911      	cbnz	r1, 80054a2 <sbrk_aligned+0x12>
 800549c:	f000 fba4 	bl	8005be8 <_sbrk_r>
 80054a0:	6030      	str	r0, [r6, #0]
 80054a2:	4621      	mov	r1, r4
 80054a4:	4628      	mov	r0, r5
 80054a6:	f000 fb9f 	bl	8005be8 <_sbrk_r>
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	d103      	bne.n	80054b6 <sbrk_aligned+0x26>
 80054ae:	f04f 34ff 	mov.w	r4, #4294967295
 80054b2:	4620      	mov	r0, r4
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d0f8      	beq.n	80054b2 <sbrk_aligned+0x22>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fb90 	bl	8005be8 <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d1f2      	bne.n	80054b2 <sbrk_aligned+0x22>
 80054cc:	e7ef      	b.n	80054ae <sbrk_aligned+0x1e>
 80054ce:	bf00      	nop
 80054d0:	20001378 	.word	0x20001378

080054d4 <_malloc_r>:
 80054d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d8:	1ccd      	adds	r5, r1, #3
 80054da:	f025 0503 	bic.w	r5, r5, #3
 80054de:	3508      	adds	r5, #8
 80054e0:	2d0c      	cmp	r5, #12
 80054e2:	bf38      	it	cc
 80054e4:	250c      	movcc	r5, #12
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	4606      	mov	r6, r0
 80054ea:	db01      	blt.n	80054f0 <_malloc_r+0x1c>
 80054ec:	42a9      	cmp	r1, r5
 80054ee:	d904      	bls.n	80054fa <_malloc_r+0x26>
 80054f0:	230c      	movs	r3, #12
 80054f2:	6033      	str	r3, [r6, #0]
 80054f4:	2000      	movs	r0, #0
 80054f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055d0 <_malloc_r+0xfc>
 80054fe:	f000 f869 	bl	80055d4 <__malloc_lock>
 8005502:	f8d8 3000 	ldr.w	r3, [r8]
 8005506:	461c      	mov	r4, r3
 8005508:	bb44      	cbnz	r4, 800555c <_malloc_r+0x88>
 800550a:	4629      	mov	r1, r5
 800550c:	4630      	mov	r0, r6
 800550e:	f7ff ffbf 	bl	8005490 <sbrk_aligned>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	4604      	mov	r4, r0
 8005516:	d158      	bne.n	80055ca <_malloc_r+0xf6>
 8005518:	f8d8 4000 	ldr.w	r4, [r8]
 800551c:	4627      	mov	r7, r4
 800551e:	2f00      	cmp	r7, #0
 8005520:	d143      	bne.n	80055aa <_malloc_r+0xd6>
 8005522:	2c00      	cmp	r4, #0
 8005524:	d04b      	beq.n	80055be <_malloc_r+0xea>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	4639      	mov	r1, r7
 800552a:	4630      	mov	r0, r6
 800552c:	eb04 0903 	add.w	r9, r4, r3
 8005530:	f000 fb5a 	bl	8005be8 <_sbrk_r>
 8005534:	4581      	cmp	r9, r0
 8005536:	d142      	bne.n	80055be <_malloc_r+0xea>
 8005538:	6821      	ldr	r1, [r4, #0]
 800553a:	1a6d      	subs	r5, r5, r1
 800553c:	4629      	mov	r1, r5
 800553e:	4630      	mov	r0, r6
 8005540:	f7ff ffa6 	bl	8005490 <sbrk_aligned>
 8005544:	3001      	adds	r0, #1
 8005546:	d03a      	beq.n	80055be <_malloc_r+0xea>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	442b      	add	r3, r5
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	f8d8 3000 	ldr.w	r3, [r8]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	bb62      	cbnz	r2, 80055b0 <_malloc_r+0xdc>
 8005556:	f8c8 7000 	str.w	r7, [r8]
 800555a:	e00f      	b.n	800557c <_malloc_r+0xa8>
 800555c:	6822      	ldr	r2, [r4, #0]
 800555e:	1b52      	subs	r2, r2, r5
 8005560:	d420      	bmi.n	80055a4 <_malloc_r+0xd0>
 8005562:	2a0b      	cmp	r2, #11
 8005564:	d917      	bls.n	8005596 <_malloc_r+0xc2>
 8005566:	1961      	adds	r1, r4, r5
 8005568:	42a3      	cmp	r3, r4
 800556a:	6025      	str	r5, [r4, #0]
 800556c:	bf18      	it	ne
 800556e:	6059      	strne	r1, [r3, #4]
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	bf08      	it	eq
 8005574:	f8c8 1000 	streq.w	r1, [r8]
 8005578:	5162      	str	r2, [r4, r5]
 800557a:	604b      	str	r3, [r1, #4]
 800557c:	4630      	mov	r0, r6
 800557e:	f000 f82f 	bl	80055e0 <__malloc_unlock>
 8005582:	f104 000b 	add.w	r0, r4, #11
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	f020 0007 	bic.w	r0, r0, #7
 800558c:	1ac2      	subs	r2, r0, r3
 800558e:	bf1c      	itt	ne
 8005590:	1a1b      	subne	r3, r3, r0
 8005592:	50a3      	strne	r3, [r4, r2]
 8005594:	e7af      	b.n	80054f6 <_malloc_r+0x22>
 8005596:	6862      	ldr	r2, [r4, #4]
 8005598:	42a3      	cmp	r3, r4
 800559a:	bf0c      	ite	eq
 800559c:	f8c8 2000 	streq.w	r2, [r8]
 80055a0:	605a      	strne	r2, [r3, #4]
 80055a2:	e7eb      	b.n	800557c <_malloc_r+0xa8>
 80055a4:	4623      	mov	r3, r4
 80055a6:	6864      	ldr	r4, [r4, #4]
 80055a8:	e7ae      	b.n	8005508 <_malloc_r+0x34>
 80055aa:	463c      	mov	r4, r7
 80055ac:	687f      	ldr	r7, [r7, #4]
 80055ae:	e7b6      	b.n	800551e <_malloc_r+0x4a>
 80055b0:	461a      	mov	r2, r3
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	d1fb      	bne.n	80055b0 <_malloc_r+0xdc>
 80055b8:	2300      	movs	r3, #0
 80055ba:	6053      	str	r3, [r2, #4]
 80055bc:	e7de      	b.n	800557c <_malloc_r+0xa8>
 80055be:	230c      	movs	r3, #12
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 f80c 	bl	80055e0 <__malloc_unlock>
 80055c8:	e794      	b.n	80054f4 <_malloc_r+0x20>
 80055ca:	6005      	str	r5, [r0, #0]
 80055cc:	e7d6      	b.n	800557c <_malloc_r+0xa8>
 80055ce:	bf00      	nop
 80055d0:	2000137c 	.word	0x2000137c

080055d4 <__malloc_lock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	@ (80055dc <__malloc_lock+0x8>)
 80055d6:	f7ff bf0f 	b.w	80053f8 <__retarget_lock_acquire_recursive>
 80055da:	bf00      	nop
 80055dc:	20001374 	.word	0x20001374

080055e0 <__malloc_unlock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	@ (80055e8 <__malloc_unlock+0x8>)
 80055e2:	f7ff bf0a 	b.w	80053fa <__retarget_lock_release_recursive>
 80055e6:	bf00      	nop
 80055e8:	20001374 	.word	0x20001374

080055ec <__ssputs_r>:
 80055ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	688e      	ldr	r6, [r1, #8]
 80055f2:	461f      	mov	r7, r3
 80055f4:	42be      	cmp	r6, r7
 80055f6:	680b      	ldr	r3, [r1, #0]
 80055f8:	4682      	mov	sl, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4690      	mov	r8, r2
 80055fe:	d82d      	bhi.n	800565c <__ssputs_r+0x70>
 8005600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005604:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005608:	d026      	beq.n	8005658 <__ssputs_r+0x6c>
 800560a:	6965      	ldr	r5, [r4, #20]
 800560c:	6909      	ldr	r1, [r1, #16]
 800560e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005612:	eba3 0901 	sub.w	r9, r3, r1
 8005616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800561a:	1c7b      	adds	r3, r7, #1
 800561c:	444b      	add	r3, r9
 800561e:	106d      	asrs	r5, r5, #1
 8005620:	429d      	cmp	r5, r3
 8005622:	bf38      	it	cc
 8005624:	461d      	movcc	r5, r3
 8005626:	0553      	lsls	r3, r2, #21
 8005628:	d527      	bpl.n	800567a <__ssputs_r+0x8e>
 800562a:	4629      	mov	r1, r5
 800562c:	f7ff ff52 	bl	80054d4 <_malloc_r>
 8005630:	4606      	mov	r6, r0
 8005632:	b360      	cbz	r0, 800568e <__ssputs_r+0xa2>
 8005634:	6921      	ldr	r1, [r4, #16]
 8005636:	464a      	mov	r2, r9
 8005638:	f000 fae6 	bl	8005c08 <memcpy>
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	6126      	str	r6, [r4, #16]
 800564a:	6165      	str	r5, [r4, #20]
 800564c:	444e      	add	r6, r9
 800564e:	eba5 0509 	sub.w	r5, r5, r9
 8005652:	6026      	str	r6, [r4, #0]
 8005654:	60a5      	str	r5, [r4, #8]
 8005656:	463e      	mov	r6, r7
 8005658:	42be      	cmp	r6, r7
 800565a:	d900      	bls.n	800565e <__ssputs_r+0x72>
 800565c:	463e      	mov	r6, r7
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	4632      	mov	r2, r6
 8005662:	4641      	mov	r1, r8
 8005664:	f000 faa6 	bl	8005bb4 <memmove>
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	1b9b      	subs	r3, r3, r6
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	4433      	add	r3, r6
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	2000      	movs	r0, #0
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	462a      	mov	r2, r5
 800567c:	f000 fad2 	bl	8005c24 <_realloc_r>
 8005680:	4606      	mov	r6, r0
 8005682:	2800      	cmp	r0, #0
 8005684:	d1e0      	bne.n	8005648 <__ssputs_r+0x5c>
 8005686:	6921      	ldr	r1, [r4, #16]
 8005688:	4650      	mov	r0, sl
 800568a:	f7ff feb7 	bl	80053fc <_free_r>
 800568e:	230c      	movs	r3, #12
 8005690:	f8ca 3000 	str.w	r3, [sl]
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	e7e9      	b.n	8005676 <__ssputs_r+0x8a>
	...

080056a4 <_svfiprintf_r>:
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	4698      	mov	r8, r3
 80056aa:	898b      	ldrh	r3, [r1, #12]
 80056ac:	061b      	lsls	r3, r3, #24
 80056ae:	b09d      	sub	sp, #116	@ 0x74
 80056b0:	4607      	mov	r7, r0
 80056b2:	460d      	mov	r5, r1
 80056b4:	4614      	mov	r4, r2
 80056b6:	d510      	bpl.n	80056da <_svfiprintf_r+0x36>
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	b973      	cbnz	r3, 80056da <_svfiprintf_r+0x36>
 80056bc:	2140      	movs	r1, #64	@ 0x40
 80056be:	f7ff ff09 	bl	80054d4 <_malloc_r>
 80056c2:	6028      	str	r0, [r5, #0]
 80056c4:	6128      	str	r0, [r5, #16]
 80056c6:	b930      	cbnz	r0, 80056d6 <_svfiprintf_r+0x32>
 80056c8:	230c      	movs	r3, #12
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
 80056d0:	b01d      	add	sp, #116	@ 0x74
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d6:	2340      	movs	r3, #64	@ 0x40
 80056d8:	616b      	str	r3, [r5, #20]
 80056da:	2300      	movs	r3, #0
 80056dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056de:	2320      	movs	r3, #32
 80056e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e8:	2330      	movs	r3, #48	@ 0x30
 80056ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005888 <_svfiprintf_r+0x1e4>
 80056ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056f2:	f04f 0901 	mov.w	r9, #1
 80056f6:	4623      	mov	r3, r4
 80056f8:	469a      	mov	sl, r3
 80056fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056fe:	b10a      	cbz	r2, 8005704 <_svfiprintf_r+0x60>
 8005700:	2a25      	cmp	r2, #37	@ 0x25
 8005702:	d1f9      	bne.n	80056f8 <_svfiprintf_r+0x54>
 8005704:	ebba 0b04 	subs.w	fp, sl, r4
 8005708:	d00b      	beq.n	8005722 <_svfiprintf_r+0x7e>
 800570a:	465b      	mov	r3, fp
 800570c:	4622      	mov	r2, r4
 800570e:	4629      	mov	r1, r5
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ff6b 	bl	80055ec <__ssputs_r>
 8005716:	3001      	adds	r0, #1
 8005718:	f000 80a7 	beq.w	800586a <_svfiprintf_r+0x1c6>
 800571c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800571e:	445a      	add	r2, fp
 8005720:	9209      	str	r2, [sp, #36]	@ 0x24
 8005722:	f89a 3000 	ldrb.w	r3, [sl]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 809f 	beq.w	800586a <_svfiprintf_r+0x1c6>
 800572c:	2300      	movs	r3, #0
 800572e:	f04f 32ff 	mov.w	r2, #4294967295
 8005732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005736:	f10a 0a01 	add.w	sl, sl, #1
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	9307      	str	r3, [sp, #28]
 800573e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005742:	931a      	str	r3, [sp, #104]	@ 0x68
 8005744:	4654      	mov	r4, sl
 8005746:	2205      	movs	r2, #5
 8005748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574c:	484e      	ldr	r0, [pc, #312]	@ (8005888 <_svfiprintf_r+0x1e4>)
 800574e:	f7fa fd3f 	bl	80001d0 <memchr>
 8005752:	9a04      	ldr	r2, [sp, #16]
 8005754:	b9d8      	cbnz	r0, 800578e <_svfiprintf_r+0xea>
 8005756:	06d0      	lsls	r0, r2, #27
 8005758:	bf44      	itt	mi
 800575a:	2320      	movmi	r3, #32
 800575c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005760:	0711      	lsls	r1, r2, #28
 8005762:	bf44      	itt	mi
 8005764:	232b      	movmi	r3, #43	@ 0x2b
 8005766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800576a:	f89a 3000 	ldrb.w	r3, [sl]
 800576e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005770:	d015      	beq.n	800579e <_svfiprintf_r+0xfa>
 8005772:	9a07      	ldr	r2, [sp, #28]
 8005774:	4654      	mov	r4, sl
 8005776:	2000      	movs	r0, #0
 8005778:	f04f 0c0a 	mov.w	ip, #10
 800577c:	4621      	mov	r1, r4
 800577e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005782:	3b30      	subs	r3, #48	@ 0x30
 8005784:	2b09      	cmp	r3, #9
 8005786:	d94b      	bls.n	8005820 <_svfiprintf_r+0x17c>
 8005788:	b1b0      	cbz	r0, 80057b8 <_svfiprintf_r+0x114>
 800578a:	9207      	str	r2, [sp, #28]
 800578c:	e014      	b.n	80057b8 <_svfiprintf_r+0x114>
 800578e:	eba0 0308 	sub.w	r3, r0, r8
 8005792:	fa09 f303 	lsl.w	r3, r9, r3
 8005796:	4313      	orrs	r3, r2
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	46a2      	mov	sl, r4
 800579c:	e7d2      	b.n	8005744 <_svfiprintf_r+0xa0>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	9103      	str	r1, [sp, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfbb      	ittet	lt
 80057aa:	425b      	neglt	r3, r3
 80057ac:	f042 0202 	orrlt.w	r2, r2, #2
 80057b0:	9307      	strge	r3, [sp, #28]
 80057b2:	9307      	strlt	r3, [sp, #28]
 80057b4:	bfb8      	it	lt
 80057b6:	9204      	strlt	r2, [sp, #16]
 80057b8:	7823      	ldrb	r3, [r4, #0]
 80057ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80057bc:	d10a      	bne.n	80057d4 <_svfiprintf_r+0x130>
 80057be:	7863      	ldrb	r3, [r4, #1]
 80057c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c2:	d132      	bne.n	800582a <_svfiprintf_r+0x186>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	9203      	str	r2, [sp, #12]
 80057cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057d0:	3402      	adds	r4, #2
 80057d2:	9305      	str	r3, [sp, #20]
 80057d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005898 <_svfiprintf_r+0x1f4>
 80057d8:	7821      	ldrb	r1, [r4, #0]
 80057da:	2203      	movs	r2, #3
 80057dc:	4650      	mov	r0, sl
 80057de:	f7fa fcf7 	bl	80001d0 <memchr>
 80057e2:	b138      	cbz	r0, 80057f4 <_svfiprintf_r+0x150>
 80057e4:	9b04      	ldr	r3, [sp, #16]
 80057e6:	eba0 000a 	sub.w	r0, r0, sl
 80057ea:	2240      	movs	r2, #64	@ 0x40
 80057ec:	4082      	lsls	r2, r0
 80057ee:	4313      	orrs	r3, r2
 80057f0:	3401      	adds	r4, #1
 80057f2:	9304      	str	r3, [sp, #16]
 80057f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f8:	4824      	ldr	r0, [pc, #144]	@ (800588c <_svfiprintf_r+0x1e8>)
 80057fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057fe:	2206      	movs	r2, #6
 8005800:	f7fa fce6 	bl	80001d0 <memchr>
 8005804:	2800      	cmp	r0, #0
 8005806:	d036      	beq.n	8005876 <_svfiprintf_r+0x1d2>
 8005808:	4b21      	ldr	r3, [pc, #132]	@ (8005890 <_svfiprintf_r+0x1ec>)
 800580a:	bb1b      	cbnz	r3, 8005854 <_svfiprintf_r+0x1b0>
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	3307      	adds	r3, #7
 8005810:	f023 0307 	bic.w	r3, r3, #7
 8005814:	3308      	adds	r3, #8
 8005816:	9303      	str	r3, [sp, #12]
 8005818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581a:	4433      	add	r3, r6
 800581c:	9309      	str	r3, [sp, #36]	@ 0x24
 800581e:	e76a      	b.n	80056f6 <_svfiprintf_r+0x52>
 8005820:	fb0c 3202 	mla	r2, ip, r2, r3
 8005824:	460c      	mov	r4, r1
 8005826:	2001      	movs	r0, #1
 8005828:	e7a8      	b.n	800577c <_svfiprintf_r+0xd8>
 800582a:	2300      	movs	r3, #0
 800582c:	3401      	adds	r4, #1
 800582e:	9305      	str	r3, [sp, #20]
 8005830:	4619      	mov	r1, r3
 8005832:	f04f 0c0a 	mov.w	ip, #10
 8005836:	4620      	mov	r0, r4
 8005838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800583c:	3a30      	subs	r2, #48	@ 0x30
 800583e:	2a09      	cmp	r2, #9
 8005840:	d903      	bls.n	800584a <_svfiprintf_r+0x1a6>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0c6      	beq.n	80057d4 <_svfiprintf_r+0x130>
 8005846:	9105      	str	r1, [sp, #20]
 8005848:	e7c4      	b.n	80057d4 <_svfiprintf_r+0x130>
 800584a:	fb0c 2101 	mla	r1, ip, r1, r2
 800584e:	4604      	mov	r4, r0
 8005850:	2301      	movs	r3, #1
 8005852:	e7f0      	b.n	8005836 <_svfiprintf_r+0x192>
 8005854:	ab03      	add	r3, sp, #12
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	462a      	mov	r2, r5
 800585a:	4b0e      	ldr	r3, [pc, #56]	@ (8005894 <_svfiprintf_r+0x1f0>)
 800585c:	a904      	add	r1, sp, #16
 800585e:	4638      	mov	r0, r7
 8005860:	f3af 8000 	nop.w
 8005864:	1c42      	adds	r2, r0, #1
 8005866:	4606      	mov	r6, r0
 8005868:	d1d6      	bne.n	8005818 <_svfiprintf_r+0x174>
 800586a:	89ab      	ldrh	r3, [r5, #12]
 800586c:	065b      	lsls	r3, r3, #25
 800586e:	f53f af2d 	bmi.w	80056cc <_svfiprintf_r+0x28>
 8005872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005874:	e72c      	b.n	80056d0 <_svfiprintf_r+0x2c>
 8005876:	ab03      	add	r3, sp, #12
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	462a      	mov	r2, r5
 800587c:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <_svfiprintf_r+0x1f0>)
 800587e:	a904      	add	r1, sp, #16
 8005880:	4638      	mov	r0, r7
 8005882:	f000 f879 	bl	8005978 <_printf_i>
 8005886:	e7ed      	b.n	8005864 <_svfiprintf_r+0x1c0>
 8005888:	08005d10 	.word	0x08005d10
 800588c:	08005d1a 	.word	0x08005d1a
 8005890:	00000000 	.word	0x00000000
 8005894:	080055ed 	.word	0x080055ed
 8005898:	08005d16 	.word	0x08005d16

0800589c <_printf_common>:
 800589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	4616      	mov	r6, r2
 80058a2:	4698      	mov	r8, r3
 80058a4:	688a      	ldr	r2, [r1, #8]
 80058a6:	690b      	ldr	r3, [r1, #16]
 80058a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058ac:	4293      	cmp	r3, r2
 80058ae:	bfb8      	it	lt
 80058b0:	4613      	movlt	r3, r2
 80058b2:	6033      	str	r3, [r6, #0]
 80058b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058b8:	4607      	mov	r7, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	b10a      	cbz	r2, 80058c2 <_printf_common+0x26>
 80058be:	3301      	adds	r3, #1
 80058c0:	6033      	str	r3, [r6, #0]
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	0699      	lsls	r1, r3, #26
 80058c6:	bf42      	ittt	mi
 80058c8:	6833      	ldrmi	r3, [r6, #0]
 80058ca:	3302      	addmi	r3, #2
 80058cc:	6033      	strmi	r3, [r6, #0]
 80058ce:	6825      	ldr	r5, [r4, #0]
 80058d0:	f015 0506 	ands.w	r5, r5, #6
 80058d4:	d106      	bne.n	80058e4 <_printf_common+0x48>
 80058d6:	f104 0a19 	add.w	sl, r4, #25
 80058da:	68e3      	ldr	r3, [r4, #12]
 80058dc:	6832      	ldr	r2, [r6, #0]
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	42ab      	cmp	r3, r5
 80058e2:	dc26      	bgt.n	8005932 <_printf_common+0x96>
 80058e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	3b00      	subs	r3, #0
 80058ec:	bf18      	it	ne
 80058ee:	2301      	movne	r3, #1
 80058f0:	0692      	lsls	r2, r2, #26
 80058f2:	d42b      	bmi.n	800594c <_printf_common+0xb0>
 80058f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058f8:	4641      	mov	r1, r8
 80058fa:	4638      	mov	r0, r7
 80058fc:	47c8      	blx	r9
 80058fe:	3001      	adds	r0, #1
 8005900:	d01e      	beq.n	8005940 <_printf_common+0xa4>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	f003 0306 	and.w	r3, r3, #6
 800590a:	2b04      	cmp	r3, #4
 800590c:	bf02      	ittt	eq
 800590e:	68e5      	ldreq	r5, [r4, #12]
 8005910:	6833      	ldreq	r3, [r6, #0]
 8005912:	1aed      	subeq	r5, r5, r3
 8005914:	68a3      	ldr	r3, [r4, #8]
 8005916:	bf0c      	ite	eq
 8005918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800591c:	2500      	movne	r5, #0
 800591e:	4293      	cmp	r3, r2
 8005920:	bfc4      	itt	gt
 8005922:	1a9b      	subgt	r3, r3, r2
 8005924:	18ed      	addgt	r5, r5, r3
 8005926:	2600      	movs	r6, #0
 8005928:	341a      	adds	r4, #26
 800592a:	42b5      	cmp	r5, r6
 800592c:	d11a      	bne.n	8005964 <_printf_common+0xc8>
 800592e:	2000      	movs	r0, #0
 8005930:	e008      	b.n	8005944 <_printf_common+0xa8>
 8005932:	2301      	movs	r3, #1
 8005934:	4652      	mov	r2, sl
 8005936:	4641      	mov	r1, r8
 8005938:	4638      	mov	r0, r7
 800593a:	47c8      	blx	r9
 800593c:	3001      	adds	r0, #1
 800593e:	d103      	bne.n	8005948 <_printf_common+0xac>
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005948:	3501      	adds	r5, #1
 800594a:	e7c6      	b.n	80058da <_printf_common+0x3e>
 800594c:	18e1      	adds	r1, r4, r3
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	2030      	movs	r0, #48	@ 0x30
 8005952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005956:	4422      	add	r2, r4
 8005958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800595c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005960:	3302      	adds	r3, #2
 8005962:	e7c7      	b.n	80058f4 <_printf_common+0x58>
 8005964:	2301      	movs	r3, #1
 8005966:	4622      	mov	r2, r4
 8005968:	4641      	mov	r1, r8
 800596a:	4638      	mov	r0, r7
 800596c:	47c8      	blx	r9
 800596e:	3001      	adds	r0, #1
 8005970:	d0e6      	beq.n	8005940 <_printf_common+0xa4>
 8005972:	3601      	adds	r6, #1
 8005974:	e7d9      	b.n	800592a <_printf_common+0x8e>
	...

08005978 <_printf_i>:
 8005978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	7e0f      	ldrb	r7, [r1, #24]
 800597e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005980:	2f78      	cmp	r7, #120	@ 0x78
 8005982:	4691      	mov	r9, r2
 8005984:	4680      	mov	r8, r0
 8005986:	460c      	mov	r4, r1
 8005988:	469a      	mov	sl, r3
 800598a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800598e:	d807      	bhi.n	80059a0 <_printf_i+0x28>
 8005990:	2f62      	cmp	r7, #98	@ 0x62
 8005992:	d80a      	bhi.n	80059aa <_printf_i+0x32>
 8005994:	2f00      	cmp	r7, #0
 8005996:	f000 80d1 	beq.w	8005b3c <_printf_i+0x1c4>
 800599a:	2f58      	cmp	r7, #88	@ 0x58
 800599c:	f000 80b8 	beq.w	8005b10 <_printf_i+0x198>
 80059a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059a8:	e03a      	b.n	8005a20 <_printf_i+0xa8>
 80059aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ae:	2b15      	cmp	r3, #21
 80059b0:	d8f6      	bhi.n	80059a0 <_printf_i+0x28>
 80059b2:	a101      	add	r1, pc, #4	@ (adr r1, 80059b8 <_printf_i+0x40>)
 80059b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a25 	.word	0x08005a25
 80059c0:	080059a1 	.word	0x080059a1
 80059c4:	080059a1 	.word	0x080059a1
 80059c8:	080059a1 	.word	0x080059a1
 80059cc:	080059a1 	.word	0x080059a1
 80059d0:	08005a25 	.word	0x08005a25
 80059d4:	080059a1 	.word	0x080059a1
 80059d8:	080059a1 	.word	0x080059a1
 80059dc:	080059a1 	.word	0x080059a1
 80059e0:	080059a1 	.word	0x080059a1
 80059e4:	08005b23 	.word	0x08005b23
 80059e8:	08005a4f 	.word	0x08005a4f
 80059ec:	08005add 	.word	0x08005add
 80059f0:	080059a1 	.word	0x080059a1
 80059f4:	080059a1 	.word	0x080059a1
 80059f8:	08005b45 	.word	0x08005b45
 80059fc:	080059a1 	.word	0x080059a1
 8005a00:	08005a4f 	.word	0x08005a4f
 8005a04:	080059a1 	.word	0x080059a1
 8005a08:	080059a1 	.word	0x080059a1
 8005a0c:	08005ae5 	.word	0x08005ae5
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6032      	str	r2, [r6, #0]
 8005a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a20:	2301      	movs	r3, #1
 8005a22:	e09c      	b.n	8005b5e <_printf_i+0x1e6>
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	6820      	ldr	r0, [r4, #0]
 8005a28:	1d19      	adds	r1, r3, #4
 8005a2a:	6031      	str	r1, [r6, #0]
 8005a2c:	0606      	lsls	r6, r0, #24
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0xbc>
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	e003      	b.n	8005a3c <_printf_i+0xc4>
 8005a34:	0645      	lsls	r5, r0, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0xb8>
 8005a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	da03      	bge.n	8005a48 <_printf_i+0xd0>
 8005a40:	232d      	movs	r3, #45	@ 0x2d
 8005a42:	426d      	negs	r5, r5
 8005a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a48:	4858      	ldr	r0, [pc, #352]	@ (8005bac <_printf_i+0x234>)
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	e011      	b.n	8005a72 <_printf_i+0xfa>
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	0608      	lsls	r0, r1, #24
 8005a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a58:	d402      	bmi.n	8005a60 <_printf_i+0xe8>
 8005a5a:	0649      	lsls	r1, r1, #25
 8005a5c:	bf48      	it	mi
 8005a5e:	b2ad      	uxthmi	r5, r5
 8005a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a62:	4852      	ldr	r0, [pc, #328]	@ (8005bac <_printf_i+0x234>)
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	bf14      	ite	ne
 8005a68:	230a      	movne	r3, #10
 8005a6a:	2308      	moveq	r3, #8
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a72:	6866      	ldr	r6, [r4, #4]
 8005a74:	60a6      	str	r6, [r4, #8]
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	db05      	blt.n	8005a86 <_printf_i+0x10e>
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	432e      	orrs	r6, r5
 8005a7e:	f021 0104 	bic.w	r1, r1, #4
 8005a82:	6021      	str	r1, [r4, #0]
 8005a84:	d04b      	beq.n	8005b1e <_printf_i+0x1a6>
 8005a86:	4616      	mov	r6, r2
 8005a88:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a8c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a90:	5dc7      	ldrb	r7, [r0, r7]
 8005a92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a96:	462f      	mov	r7, r5
 8005a98:	42bb      	cmp	r3, r7
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	d9f4      	bls.n	8005a88 <_printf_i+0x110>
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d10b      	bne.n	8005aba <_printf_i+0x142>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	07df      	lsls	r7, r3, #31
 8005aa6:	d508      	bpl.n	8005aba <_printf_i+0x142>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6861      	ldr	r1, [r4, #4]
 8005aac:	4299      	cmp	r1, r3
 8005aae:	bfde      	ittt	le
 8005ab0:	2330      	movle	r3, #48	@ 0x30
 8005ab2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005aba:	1b92      	subs	r2, r2, r6
 8005abc:	6122      	str	r2, [r4, #16]
 8005abe:	f8cd a000 	str.w	sl, [sp]
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	aa03      	add	r2, sp, #12
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4640      	mov	r0, r8
 8005aca:	f7ff fee7 	bl	800589c <_printf_common>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d14a      	bne.n	8005b68 <_printf_i+0x1f0>
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	b004      	add	sp, #16
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f043 0320 	orr.w	r3, r3, #32
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	4832      	ldr	r0, [pc, #200]	@ (8005bb0 <_printf_i+0x238>)
 8005ae6:	2778      	movs	r7, #120	@ 0x78
 8005ae8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	6831      	ldr	r1, [r6, #0]
 8005af0:	061f      	lsls	r7, r3, #24
 8005af2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005af6:	d402      	bmi.n	8005afe <_printf_i+0x186>
 8005af8:	065f      	lsls	r7, r3, #25
 8005afa:	bf48      	it	mi
 8005afc:	b2ad      	uxthmi	r5, r5
 8005afe:	6031      	str	r1, [r6, #0]
 8005b00:	07d9      	lsls	r1, r3, #31
 8005b02:	bf44      	itt	mi
 8005b04:	f043 0320 	orrmi.w	r3, r3, #32
 8005b08:	6023      	strmi	r3, [r4, #0]
 8005b0a:	b11d      	cbz	r5, 8005b14 <_printf_i+0x19c>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	e7ad      	b.n	8005a6c <_printf_i+0xf4>
 8005b10:	4826      	ldr	r0, [pc, #152]	@ (8005bac <_printf_i+0x234>)
 8005b12:	e7e9      	b.n	8005ae8 <_printf_i+0x170>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	f023 0320 	bic.w	r3, r3, #32
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	e7f6      	b.n	8005b0c <_printf_i+0x194>
 8005b1e:	4616      	mov	r6, r2
 8005b20:	e7bd      	b.n	8005a9e <_printf_i+0x126>
 8005b22:	6833      	ldr	r3, [r6, #0]
 8005b24:	6825      	ldr	r5, [r4, #0]
 8005b26:	6961      	ldr	r1, [r4, #20]
 8005b28:	1d18      	adds	r0, r3, #4
 8005b2a:	6030      	str	r0, [r6, #0]
 8005b2c:	062e      	lsls	r6, r5, #24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	d501      	bpl.n	8005b36 <_printf_i+0x1be>
 8005b32:	6019      	str	r1, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <_printf_i+0x1c4>
 8005b36:	0668      	lsls	r0, r5, #25
 8005b38:	d5fb      	bpl.n	8005b32 <_printf_i+0x1ba>
 8005b3a:	8019      	strh	r1, [r3, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	4616      	mov	r6, r2
 8005b42:	e7bc      	b.n	8005abe <_printf_i+0x146>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	6032      	str	r2, [r6, #0]
 8005b4a:	681e      	ldr	r6, [r3, #0]
 8005b4c:	6862      	ldr	r2, [r4, #4]
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7fa fb3d 	bl	80001d0 <memchr>
 8005b56:	b108      	cbz	r0, 8005b5c <_printf_i+0x1e4>
 8005b58:	1b80      	subs	r0, r0, r6
 8005b5a:	6060      	str	r0, [r4, #4]
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	2300      	movs	r3, #0
 8005b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b66:	e7aa      	b.n	8005abe <_printf_i+0x146>
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4640      	mov	r0, r8
 8005b70:	47d0      	blx	sl
 8005b72:	3001      	adds	r0, #1
 8005b74:	d0ad      	beq.n	8005ad2 <_printf_i+0x15a>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	079b      	lsls	r3, r3, #30
 8005b7a:	d413      	bmi.n	8005ba4 <_printf_i+0x22c>
 8005b7c:	68e0      	ldr	r0, [r4, #12]
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	4298      	cmp	r0, r3
 8005b82:	bfb8      	it	lt
 8005b84:	4618      	movlt	r0, r3
 8005b86:	e7a6      	b.n	8005ad6 <_printf_i+0x15e>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4640      	mov	r0, r8
 8005b90:	47d0      	blx	sl
 8005b92:	3001      	adds	r0, #1
 8005b94:	d09d      	beq.n	8005ad2 <_printf_i+0x15a>
 8005b96:	3501      	adds	r5, #1
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	9903      	ldr	r1, [sp, #12]
 8005b9c:	1a5b      	subs	r3, r3, r1
 8005b9e:	42ab      	cmp	r3, r5
 8005ba0:	dcf2      	bgt.n	8005b88 <_printf_i+0x210>
 8005ba2:	e7eb      	b.n	8005b7c <_printf_i+0x204>
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	f104 0619 	add.w	r6, r4, #25
 8005baa:	e7f5      	b.n	8005b98 <_printf_i+0x220>
 8005bac:	08005d21 	.word	0x08005d21
 8005bb0:	08005d32 	.word	0x08005d32

08005bb4 <memmove>:
 8005bb4:	4288      	cmp	r0, r1
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	eb01 0402 	add.w	r4, r1, r2
 8005bbc:	d902      	bls.n	8005bc4 <memmove+0x10>
 8005bbe:	4284      	cmp	r4, r0
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	d807      	bhi.n	8005bd4 <memmove+0x20>
 8005bc4:	1e43      	subs	r3, r0, #1
 8005bc6:	42a1      	cmp	r1, r4
 8005bc8:	d008      	beq.n	8005bdc <memmove+0x28>
 8005bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bd2:	e7f8      	b.n	8005bc6 <memmove+0x12>
 8005bd4:	4402      	add	r2, r0
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	d100      	bne.n	8005bde <memmove+0x2a>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005be6:	e7f7      	b.n	8005bd8 <memmove+0x24>

08005be8 <_sbrk_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d06      	ldr	r5, [pc, #24]	@ (8005c04 <_sbrk_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb ffe4 	bl	8001bc0 <_sbrk>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_sbrk_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_sbrk_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	20001370 	.word	0x20001370

08005c08 <memcpy>:
 8005c08:	440a      	add	r2, r1
 8005c0a:	4291      	cmp	r1, r2
 8005c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c10:	d100      	bne.n	8005c14 <memcpy+0xc>
 8005c12:	4770      	bx	lr
 8005c14:	b510      	push	{r4, lr}
 8005c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c1e:	4291      	cmp	r1, r2
 8005c20:	d1f9      	bne.n	8005c16 <memcpy+0xe>
 8005c22:	bd10      	pop	{r4, pc}

08005c24 <_realloc_r>:
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	4607      	mov	r7, r0
 8005c2a:	4614      	mov	r4, r2
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	b921      	cbnz	r1, 8005c3a <_realloc_r+0x16>
 8005c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c34:	4611      	mov	r1, r2
 8005c36:	f7ff bc4d 	b.w	80054d4 <_malloc_r>
 8005c3a:	b92a      	cbnz	r2, 8005c48 <_realloc_r+0x24>
 8005c3c:	f7ff fbde 	bl	80053fc <_free_r>
 8005c40:	4625      	mov	r5, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c48:	f000 f81a 	bl	8005c80 <_malloc_usable_size_r>
 8005c4c:	4284      	cmp	r4, r0
 8005c4e:	4606      	mov	r6, r0
 8005c50:	d802      	bhi.n	8005c58 <_realloc_r+0x34>
 8005c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c56:	d8f4      	bhi.n	8005c42 <_realloc_r+0x1e>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f7ff fc3a 	bl	80054d4 <_malloc_r>
 8005c60:	4680      	mov	r8, r0
 8005c62:	b908      	cbnz	r0, 8005c68 <_realloc_r+0x44>
 8005c64:	4645      	mov	r5, r8
 8005c66:	e7ec      	b.n	8005c42 <_realloc_r+0x1e>
 8005c68:	42b4      	cmp	r4, r6
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	bf28      	it	cs
 8005c70:	4632      	movcs	r2, r6
 8005c72:	f7ff ffc9 	bl	8005c08 <memcpy>
 8005c76:	4629      	mov	r1, r5
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff fbbf 	bl	80053fc <_free_r>
 8005c7e:	e7f1      	b.n	8005c64 <_realloc_r+0x40>

08005c80 <_malloc_usable_size_r>:
 8005c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c84:	1f18      	subs	r0, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfbc      	itt	lt
 8005c8a:	580b      	ldrlt	r3, [r1, r0]
 8005c8c:	18c0      	addlt	r0, r0, r3
 8005c8e:	4770      	bx	lr

08005c90 <_init>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr

08005c9c <_fini>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr
