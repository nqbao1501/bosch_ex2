
BEA_CAN2CAN_DEMO_TEN1HC_HUST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a0  080061a0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080061a0  080061a0  000071a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a8  080061a8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a8  080061a8  000071a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061ac  080061ac  000071ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080061b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00001384  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013e0  200013e0  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc6b  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022bc  00000000  00000000  00014cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  00016fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b1  00000000  00000000  000179d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211f2  00000000  00000000  00018189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2c7  00000000  00000000  0003937b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c74d0  00000000  00000000  00047642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010eb12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003078  00000000  00000000  0010eb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00111bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ffc 	.word	0x08005ffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ffc 	.word	0x08005ffc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <prepare_CAN_TX_frame>:
/*for further services please add service header here*/
#include "dcm_rdbi.h"
#include "dcm_wdbi.h"
#include "dcm_seca.h"

void prepare_CAN_TX_frame(uint8_t* CAN_TX_frame, uint8_t* data, uint8_t data_count){
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]
	CAN_TX_frame[0] = data_count;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 1; i <= data_count; i++){
 80005c0:	2301      	movs	r3, #1
 80005c2:	75fb      	strb	r3, [r7, #23]
 80005c4:	e00b      	b.n	80005de <prepare_CAN_TX_frame+0x32>
		CAN_TX_frame[i] = data[i - 1];
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	441a      	add	r2, r3
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	68f9      	ldr	r1, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= data_count; i++){
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	3301      	adds	r3, #1
 80005dc:	75fb      	strb	r3, [r7, #23]
 80005de:	7dfa      	ldrb	r2, [r7, #23]
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d9ef      	bls.n	80005c6 <prepare_CAN_TX_frame+0x1a>
	}
	//Padding những bit còn lại bằng 0x55
	for (uint8_t j = 1; j < (8 - data_count); j++){
 80005e6:	2301      	movs	r3, #1
 80005e8:	75bb      	strb	r3, [r7, #22]
 80005ea:	e00a      	b.n	8000602 <prepare_CAN_TX_frame+0x56>
		CAN_TX_frame[(data_count + j)] = 0x55;
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	7dbb      	ldrb	r3, [r7, #22]
 80005f0:	4413      	add	r3, r2
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	2255      	movs	r2, #85	@ 0x55
 80005fa:	701a      	strb	r2, [r3, #0]
	for (uint8_t j = 1; j < (8 - data_count); j++){
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	3301      	adds	r3, #1
 8000600:	75bb      	strb	r3, [r7, #22]
 8000602:	7dba      	ldrb	r2, [r7, #22]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f1c3 0308 	rsb	r3, r3, #8
 800060a:	429a      	cmp	r2, r3
 800060c:	dbee      	blt.n	80005ec <prepare_CAN_TX_frame+0x40>
	}

}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	371c      	adds	r7, #28
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <CAN2_SendMessage>:

void CAN2_SendMessage(uint8_t* data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;
	HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &txMailbox);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <CAN2_SendMessage+0x20>)
 800062a:	4905      	ldr	r1, [pc, #20]	@ (8000640 <CAN2_SendMessage+0x24>)
 800062c:	4805      	ldr	r0, [pc, #20]	@ (8000644 <CAN2_SendMessage+0x28>)
 800062e:	f001 fe9f 	bl	8002370 <HAL_CAN_AddTxMessage>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200011ec 	.word	0x200011ec
 8000640:	20000194 	.word	0x20000194
 8000644:	200000e8 	.word	0x200000e8

08000648 <CAN1_SendMessage>:

void CAN1_SendMessage(uint8_t* data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    uint32_t txMailbox;
	HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &txMailbox);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <CAN1_SendMessage+0x20>)
 8000656:	4905      	ldr	r1, [pc, #20]	@ (800066c <CAN1_SendMessage+0x24>)
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <CAN1_SendMessage+0x28>)
 800065a:	f001 fe89 	bl	8002370 <HAL_CAN_AddTxMessage>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200011dc 	.word	0x200011dc
 800066c:	20000154 	.word	0x20000154
 8000670:	200000c0 	.word	0x200000c0

08000674 <prepare_negetive_response_buffer>:
void prepare_negetive_response_buffer(uint8_t* CAN_TX_frame, uint8_t* buffer, uint8_t SID, uint8_t NRC){
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	460b      	mov	r3, r1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	4613      	mov	r3, r2
 8000688:	71bb      	strb	r3, [r7, #6]
	buffer[0] = 0x7F;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	227f      	movs	r2, #127	@ 0x7f
 800068e:	701a      	strb	r2, [r3, #0]
	buffer[1] = SID;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	3301      	adds	r3, #1
 8000694:	79fa      	ldrb	r2, [r7, #7]
 8000696:	701a      	strb	r2, [r3, #0]
	buffer[2] = NRC;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	3302      	adds	r3, #2
 800069c:	79ba      	ldrb	r2, [r7, #6]
 800069e:	701a      	strb	r2, [r3, #0]

	prepare_CAN_TX_frame(CAN_TX_frame, buffer, 3);
 80006a0:	2203      	movs	r2, #3
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f7ff ff81 	bl	80005ac <prepare_CAN_TX_frame>
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <SID_22_Practice>:
/*********BOSCH BEA PROGRAM SKELETON DEMO CODE************/
/*********************************************************/

#include "dcm_rdbi.h"

void SID_22_Practice(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	uint8_t SID = CAN1_DATA_RX[1];
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <SID_22_Practice+0x78>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	73fb      	strb	r3, [r7, #15]
	uint8_t	DID_High = CAN1_DATA_RX[2];
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <SID_22_Practice+0x78>)
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	73bb      	strb	r3, [r7, #14]
	uint8_t	DID_Low = CAN1_DATA_RX[3];
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <SID_22_Practice+0x78>)
 80006c8:	78db      	ldrb	r3, [r3, #3]
 80006ca:	737b      	strb	r3, [r7, #13]
	uint8_t	len = CAN1_DATA_RX[0];
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <SID_22_Practice+0x78>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	733b      	strb	r3, [r7, #12]
	uint8_t data_buffer[8];

	if (len != 3) {
 80006d2:	7b3b      	ldrb	r3, [r7, #12]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d006      	beq.n	80006e6 <SID_22_Practice+0x32>
	    // Error 0x13: Incorrect length
		prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	1d39      	adds	r1, r7, #4
 80006dc:	2313      	movs	r3, #19
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <SID_22_Practice+0x7c>)
 80006e0:	f7ff ffc8 	bl	8000674 <prepare_negetive_response_buffer>
 80006e4:	e01e      	b.n	8000724 <SID_22_Practice+0x70>

	    return;
	}

	if (DID_High == 0x01 && DID_Low == 0x23) {
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d115      	bne.n	8000718 <SID_22_Practice+0x64>
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b23      	cmp	r3, #35	@ 0x23
 80006f0:	d112      	bne.n	8000718 <SID_22_Practice+0x64>
	    data_buffer[0] = SID + 0x40;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	3340      	adds	r3, #64	@ 0x40
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	713b      	strb	r3, [r7, #4]
	    data_buffer[1] = 0x01;
 80006fa:	2301      	movs	r3, #1
 80006fc:	717b      	strb	r3, [r7, #5]
	    data_buffer[2] = 0x23;
 80006fe:	2323      	movs	r3, #35	@ 0x23
 8000700:	71bb      	strb	r3, [r7, #6]
	    data_buffer[3] = 0x00;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
	    data_buffer[4] = 0x78;
 8000706:	2378      	movs	r3, #120	@ 0x78
 8000708:	723b      	strb	r3, [r7, #8]
	    prepare_CAN_TX_frame(CAN1_DATA_TX, data_buffer, 5);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2205      	movs	r2, #5
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	@ (8000730 <SID_22_Practice+0x7c>)
 8000712:	f7ff ff4b 	bl	80005ac <prepare_CAN_TX_frame>
 8000716:	e005      	b.n	8000724 <SID_22_Practice+0x70>
	} else {
	    // Error 0x31: Request out of range
		prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x31);
 8000718:	7bfa      	ldrb	r2, [r7, #15]
 800071a:	1d39      	adds	r1, r7, #4
 800071c:	2331      	movs	r3, #49	@ 0x31
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <SID_22_Practice+0x7c>)
 8000720:	f7ff ffa8 	bl	8000674 <prepare_negetive_response_buffer>
	}
}
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200011e4 	.word	0x200011e4
 8000730:	200011dc 	.word	0x200011dc

08000734 <generate_seed>:
/*********BOSCH BEA PROGRAM SKELETON DEMO CODE************/
/*********************************************************/

#include "dcm_seca.h"

void generate_seed(){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e020      	b.n	8000782 <generate_seed+0x4e>
        HAL_ADC_Start(&hadc1);
 8000740:	4823      	ldr	r0, [pc, #140]	@ (80007d0 <generate_seed+0x9c>)
 8000742:	f001 f86d 	bl	8001820 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000746:	f04f 31ff 	mov.w	r1, #4294967295
 800074a:	4821      	ldr	r0, [pc, #132]	@ (80007d0 <generate_seed+0x9c>)
 800074c:	f001 f93a 	bl	80019c4 <HAL_ADC_PollForConversion>
        uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8000750:	481f      	ldr	r0, [pc, #124]	@ (80007d0 <generate_seed+0x9c>)
 8000752:	f001 f9c2 	bl	8001ada <HAL_ADC_GetValue>
 8000756:	6038      	str	r0, [r7, #0]

        seed[i] = (uint8_t)((adc_val ^ (TimeStamp << i)) & 0xFF);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <generate_seed+0xa0>)
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4053      	eors	r3, r2
 800076a:	b2d9      	uxtb	r1, r3
 800076c:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <generate_seed+0xa4>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
        HAL_Delay(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 ffea 	bl	8001750 <HAL_Delay>
	for (int i = 0; i < 4; i++){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b03      	cmp	r3, #3
 8000786:	dddb      	ble.n	8000740 <generate_seed+0xc>
	}

	key[0] = seed[0] ^ seed[1];
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <generate_seed+0xa4>)
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <generate_seed+0xa4>)
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	4053      	eors	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <generate_seed+0xa8>)
 8000796:	701a      	strb	r2, [r3, #0]
	key[1] = seed[1] + seed[2];
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <generate_seed+0xa4>)
 800079a:	785a      	ldrb	r2, [r3, #1]
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <generate_seed+0xa4>)
 800079e:	789b      	ldrb	r3, [r3, #2]
 80007a0:	4413      	add	r3, r2
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <generate_seed+0xa8>)
 80007a6:	705a      	strb	r2, [r3, #1]
	key[2] = seed[2] ^ seed[3];
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <generate_seed+0xa4>)
 80007aa:	789a      	ldrb	r2, [r3, #2]
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <generate_seed+0xa4>)
 80007ae:	78db      	ldrb	r3, [r3, #3]
 80007b0:	4053      	eors	r3, r2
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <generate_seed+0xa8>)
 80007b6:	709a      	strb	r2, [r3, #2]
	key[3] = seed[3] + seed[0];
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <generate_seed+0xa4>)
 80007ba:	78da      	ldrb	r2, [r3, #3]
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <generate_seed+0xa4>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <generate_seed+0xa8>)
 80007c6:	70da      	strb	r2, [r3, #3]
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000078 	.word	0x20000078
 80007d4:	20001200 	.word	0x20001200
 80007d8:	20001280 	.word	0x20001280
 80007dc:	20001284 	.word	0x20001284

080007e0 <validate_key>:


bool validate_key(uint8_t key_from_user[4]){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	if (memcmp(key_from_user, key, 4) == 0) return true;
 80007e8:	2204      	movs	r2, #4
 80007ea:	4907      	ldr	r1, [pc, #28]	@ (8000808 <validate_key+0x28>)
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f004 faf9 	bl	8004de4 <memcmp>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <validate_key+0x1c>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <validate_key+0x1e>
	else return false;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20001284 	.word	0x20001284

0800080c <SID_27_Practice>:
void SID_27_Practice(){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
	uint8_t SID = CAN1_DATA_RX[1];
 8000812:	4b3d      	ldr	r3, [pc, #244]	@ (8000908 <SID_27_Practice+0xfc>)
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	73fb      	strb	r3, [r7, #15]
	uint8_t	sub_func = CAN1_DATA_RX[2];
 8000818:	4b3b      	ldr	r3, [pc, #236]	@ (8000908 <SID_27_Practice+0xfc>)
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	73bb      	strb	r3, [r7, #14]
	uint8_t	len = CAN1_DATA_RX[0];
 800081e:	4b3a      	ldr	r3, [pc, #232]	@ (8000908 <SID_27_Practice+0xfc>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	737b      	strb	r3, [r7, #13]
	uint8_t data_buffer[8];

	if (sub_func == 1){
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d12a      	bne.n	8000880 <SID_27_Practice+0x74>
		if (len != 2){
 800082a:	7b7b      	ldrb	r3, [r7, #13]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d006      	beq.n	800083e <SID_27_Practice+0x32>
			//Loi 0x13: sai format
			prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	1d39      	adds	r1, r7, #4
 8000834:	2313      	movs	r3, #19
 8000836:	4835      	ldr	r0, [pc, #212]	@ (800090c <SID_27_Practice+0x100>)
 8000838:	f7ff ff1c 	bl	8000674 <prepare_negetive_response_buffer>
			return;
 800083c:	e060      	b.n	8000900 <SID_27_Practice+0xf4>
		}

		if (security_access_granted){
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <SID_27_Practice+0x104>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <SID_27_Practice+0x48>
			//goi seed khi he thong da mo roi -> loi 0x10
			prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x10);
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	1d39      	adds	r1, r7, #4
 800084a:	2310      	movs	r3, #16
 800084c:	482f      	ldr	r0, [pc, #188]	@ (800090c <SID_27_Practice+0x100>)
 800084e:	f7ff ff11 	bl	8000674 <prepare_negetive_response_buffer>
			return;
 8000852:	e055      	b.n	8000900 <SID_27_Practice+0xf4>
		}

		seed_sent = true;
 8000854:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <SID_27_Practice+0x108>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		generate_seed();
 800085a:	f7ff ff6b 	bl	8000734 <generate_seed>
	    data_buffer[0] = SID + 0x40;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3340      	adds	r3, #64	@ 0x40
 8000862:	b2db      	uxtb	r3, r3
 8000864:	713b      	strb	r3, [r7, #4]
	    data_buffer[1] = 0x01;
 8000866:	2301      	movs	r3, #1
 8000868:	717b      	strb	r3, [r7, #5]
	    memcpy(&data_buffer[2],seed, 4);
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <SID_27_Practice+0x10c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f8c7 3006 	str.w	r3, [r7, #6]
	    prepare_CAN_TX_frame(CAN1_DATA_TX, data_buffer, 6);
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2206      	movs	r2, #6
 8000876:	4619      	mov	r1, r3
 8000878:	4824      	ldr	r0, [pc, #144]	@ (800090c <SID_27_Practice+0x100>)
 800087a:	f7ff fe97 	bl	80005ac <prepare_CAN_TX_frame>

		return;
 800087e:	e03f      	b.n	8000900 <SID_27_Practice+0xf4>
	}

	if (sub_func == 2){
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d13c      	bne.n	8000900 <SID_27_Practice+0xf4>
		if (len != 6){
 8000886:	7b7b      	ldrb	r3, [r7, #13]
 8000888:	2b06      	cmp	r3, #6
 800088a:	d006      	beq.n	800089a <SID_27_Practice+0x8e>
			//Loi 0x13: sai format
			prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x13);
 800088c:	7bfa      	ldrb	r2, [r7, #15]
 800088e:	1d39      	adds	r1, r7, #4
 8000890:	2313      	movs	r3, #19
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <SID_27_Practice+0x100>)
 8000894:	f7ff feee 	bl	8000674 <prepare_negetive_response_buffer>
			return;
 8000898:	e032      	b.n	8000900 <SID_27_Practice+0xf4>
		}

		if (!seed_sent){
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <SID_27_Practice+0x108>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f083 0301 	eor.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d006      	beq.n	80008b6 <SID_27_Practice+0xaa>
			//Chua gui 27 01 de lay seed ma da gui 27 02 voi key -> loi 0x10
			prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x10);
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	1d39      	adds	r1, r7, #4
 80008ac:	2310      	movs	r3, #16
 80008ae:	4817      	ldr	r0, [pc, #92]	@ (800090c <SID_27_Practice+0x100>)
 80008b0:	f7ff fee0 	bl	8000674 <prepare_negetive_response_buffer>
			return;
 80008b4:	e024      	b.n	8000900 <SID_27_Practice+0xf4>
		}

		uint8_t key_from_user[4];
		memcpy(key_from_user, &CAN1_DATA_RX[3], 4);
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <SID_27_Practice+0xfc>)
 80008b8:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80008bc:	603b      	str	r3, [r7, #0]

		if (!validate_key(key_from_user)){
 80008be:	463b      	mov	r3, r7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff8d 	bl	80007e0 <validate_key>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f083 0301 	eor.w	r3, r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d006      	beq.n	80008e0 <SID_27_Practice+0xd4>
			//key khong dung voi seed -> loi 0x35
			prepare_negetive_response_buffer(CAN1_DATA_TX, data_buffer, SID, 0x35);
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	1d39      	adds	r1, r7, #4
 80008d6:	2335      	movs	r3, #53	@ 0x35
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <SID_27_Practice+0x100>)
 80008da:	f7ff fecb 	bl	8000674 <prepare_negetive_response_buffer>
			return;
 80008de:	e00f      	b.n	8000900 <SID_27_Practice+0xf4>
		}

		//Dung key -> positive response
	    data_buffer[0] = SID + 0x40;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3340      	adds	r3, #64	@ 0x40
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	713b      	strb	r3, [r7, #4]
	    data_buffer[1] = 0x02;
 80008e8:	2302      	movs	r3, #2
 80008ea:	717b      	strb	r3, [r7, #5]
	    prepare_CAN_TX_frame(CAN1_DATA_TX, data_buffer, 2);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2202      	movs	r2, #2
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <SID_27_Practice+0x100>)
 80008f4:	f7ff fe5a 	bl	80005ac <prepare_CAN_TX_frame>
		security_access_granted = true;
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <SID_27_Practice+0x104>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
		return;
 80008fe:	bf00      	nop
	}
}
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200011e4 	.word	0x200011e4
 800090c:	200011dc 	.word	0x200011dc
 8000910:	20001289 	.word	0x20001289
 8000914:	20001288 	.word	0x20001288
 8000918:	20001280 	.word	0x20001280

0800091c <SID_2E_Practice>:
/*********************************************************/

#include "dcm_wdbi.h"


void SID_2E_Practice(){
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Đây là callback, chạy sau khi node 1 hoặc node 2 nhận dữ liệu

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	f107 0210 	add.w	r2, r7, #16
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f001 fdf1 	bl	8002526 <HAL_CAN_GetRxMessage>
    if (hcan->Instance == CAN1) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d11d      	bne.n	800098a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
        if (currentState == STATE_CAN2_TRANSMISSION){
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d119      	bne.n	800098a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
        	for (uint8_t i = 0; i < 8; i++){
 8000956:	2300      	movs	r3, #0
 8000958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800095c:	e00e      	b.n	800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
        		CAN1_DATA_RX[i] = rxData[i];
 800095e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000966:	3230      	adds	r2, #48	@ 0x30
 8000968:	443a      	add	r2, r7
 800096a:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000970:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < 8; i++){
 8000972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000976:	3301      	adds	r3, #1
 8000978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800097c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000980:	2b07      	cmp	r3, #7
 8000982:	d9ec      	bls.n	800095e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
        	}
        	currentState = STATE_READING_CAN1_RECEPTION;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000986:	2202      	movs	r2, #2
 8000988:	701a      	strb	r2, [r3, #0]
        }
    }
    if (hcan->Instance == CAN2) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d11d      	bne.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
        if (currentState == STATE_CAN1_TRANSMISSION){
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b04      	cmp	r3, #4
 800099a:	d119      	bne.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
        	for (uint8_t i = 0; i < 8; i++){
 800099c:	2300      	movs	r3, #0
 800099e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80009a2:	e00e      	b.n	80009c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
        		CAN2_DATA_RX[i] = rxData[i];
 80009a4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80009a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009ac:	3230      	adds	r2, #48	@ 0x30
 80009ae:	443a      	add	r2, r7
 80009b0:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 80009b4:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80009b6:	54d1      	strb	r1, [r2, r3]
        	for (uint8_t i = 0; i < 8; i++){
 80009b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009bc:	3301      	adds	r3, #1
 80009be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80009c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d9ec      	bls.n	80009a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
        	}
        	currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
        }

    }
}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	@ 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40006400 	.word	0x40006400
 80009dc:	200011fc 	.word	0x200011fc
 80009e0:	200011e4 	.word	0x200011e4
 80009e4:	40006800 	.word	0x40006800
 80009e8:	200011f4 	.word	0x200011f4

080009ec <receive_uart_string>:


void receive_uart_string(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    uart_rx_index = 0;
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <receive_uart_string+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
    while (1)
    {
        HAL_UART_Receive(&huart3, &uart_byte, 1, HAL_MAX_DELAY);
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	2201      	movs	r2, #1
 80009fc:	4914      	ldr	r1, [pc, #80]	@ (8000a50 <receive_uart_string+0x64>)
 80009fe:	4815      	ldr	r0, [pc, #84]	@ (8000a54 <receive_uart_string+0x68>)
 8000a00:	f003 f9d3 	bl	8003daa <HAL_UART_Receive>
        if (uart_byte == '\r' || uart_byte == '\n') {
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <receive_uart_string+0x64>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b0d      	cmp	r3, #13
 8000a0a:	d003      	beq.n	8000a14 <receive_uart_string+0x28>
 8000a0c:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <receive_uart_string+0x64>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b0a      	cmp	r3, #10
 8000a12:	d106      	bne.n	8000a22 <receive_uart_string+0x36>
            uart_rx_buffer[uart_rx_index] = '\0'; // null-terminate
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <receive_uart_string+0x60>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <receive_uart_string+0x6c>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	5499      	strb	r1, [r3, r2]
            break;
 8000a20:	e012      	b.n	8000a48 <receive_uart_string+0x5c>
        } else {
            uart_rx_buffer[uart_rx_index++] = uart_byte;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <receive_uart_string+0x60>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	b2d1      	uxtb	r1, r2
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <receive_uart_string+0x60>)
 8000a2c:	7011      	strb	r1, [r2, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <receive_uart_string+0x64>)
 8000a32:	7819      	ldrb	r1, [r3, #0]
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <receive_uart_string+0x6c>)
 8000a36:	5499      	strb	r1, [r3, r2]
            if (uart_rx_index >= UART_RX_BUFFER_SIZE)
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <receive_uart_string+0x60>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b63      	cmp	r3, #99	@ 0x63
 8000a3e:	d9da      	bls.n	80009f6 <receive_uart_string+0xa>
                uart_rx_index = 0; // reset if overflow
 8000a40:	4b02      	ldr	r3, [pc, #8]	@ (8000a4c <receive_uart_string+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive(&huart3, &uart_byte, 1, HAL_MAX_DELAY);
 8000a46:	e7d6      	b.n	80009f6 <receive_uart_string+0xa>
        }
    }

    // Do something with the received string
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20001268 	.word	0x20001268
 8000a50:	20001269 	.word	0x20001269
 8000a54:	20000110 	.word	0x20000110
 8000a58:	20001204 	.word	0x20001204

08000a5c <parse_hex_string>:

void parse_hex_string(const char *input, uint8_t *output, uint8_t *count) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
    const char *ptr = input;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	617b      	str	r3, [r7, #20]
    int value;
    *count = 0;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]

    while (sscanf(ptr, "%x", &value) == 1) {
 8000a72:	e01f      	b.n	8000ab4 <parse_hex_string+0x58>
        output[(*count)++] = (uint8_t)value;
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	b2d0      	uxtb	r0, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	7010      	strb	r0, [r2, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	b2ca      	uxtb	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]

        // Move ptr to the end of the current number
        while (*ptr && *ptr != ' ') ptr++;   // Skip over the current number
 8000a8c:	e002      	b.n	8000a94 <parse_hex_string+0x38>
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d007      	beq.n	8000aac <parse_hex_string+0x50>
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	d1f4      	bne.n	8000a8e <parse_hex_string+0x32>
        while (*ptr == ' ') ptr++;           // Skip any spaces
 8000aa4:	e002      	b.n	8000aac <parse_hex_string+0x50>
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b20      	cmp	r3, #32
 8000ab2:	d0f8      	beq.n	8000aa6 <parse_hex_string+0x4a>
    while (sscanf(ptr, "%x", &value) == 1) {
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	@ (8000adc <parse_hex_string+0x80>)
 8000abc:	6978      	ldr	r0, [r7, #20]
 8000abe:	f004 f963 	bl	8004d88 <siscanf>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d0d5      	beq.n	8000a74 <parse_hex_string+0x18>
    }
    memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8000ac8:	2264      	movs	r2, #100	@ 0x64
 8000aca:	2100      	movs	r1, #0
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <parse_hex_string+0x84>)
 8000ace:	f004 f999 	bl	8004e04 <memset>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08006014 	.word	0x08006014
 8000ae0:	20001204 	.word	0x20001204

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	80fb      	strh	r3, [r7, #6]
	uint16_t Consecutive_Cntr = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fdbb 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f87f 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 fa13 	bl	8000f24 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000afe:	f000 f937 	bl	8000d70 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000b02:	f000 f98f 	bl	8000e24 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000b06:	f000 f9e3 	bl	8000ed0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b0a:	f000 f8df 	bl	8000ccc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000b0e:	f000 fa85 	bl	800101c <MX_CAN1_Setup>
  MX_CAN2_Setup();
 8000b12:	f000 faa7 	bl	8001064 <MX_CAN2_Setup>



  while (1)
  {
	  switch (currentState){
 8000b16:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <main+0xf0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d8fb      	bhi.n	8000b16 <main+0x32>
 8000b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <main+0x40>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b39 	.word	0x08000b39
 8000b28:	08000b17 	.word	0x08000b17
 8000b2c:	08000b71 	.word	0x08000b71
 8000b30:	08000bb5 	.word	0x08000bb5
 8000b34:	08000b17 	.word	0x08000b17
	  		case STATE_PREPARING_FOR_CAN2_TRANSMISSION:
	  			currentState = STATE_CAN2_TRANSMISSION;
 8000b38:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <main+0xf0>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
	  			receive_uart_string();
 8000b3e:	f7ff ff55 	bl	80009ec <receive_uart_string>
	  			parse_hex_string((char*)uart_rx_buffer, parsed_values_from_uart, &parsed_values_from_uart_count);
 8000b42:	4a25      	ldr	r2, [pc, #148]	@ (8000bd8 <main+0xf4>)
 8000b44:	4925      	ldr	r1, [pc, #148]	@ (8000bdc <main+0xf8>)
 8000b46:	4826      	ldr	r0, [pc, #152]	@ (8000be0 <main+0xfc>)
 8000b48:	f7ff ff88 	bl	8000a5c <parse_hex_string>

	  			//Từ các giá trị lấy được ở UART, xây dựng CAN_frame
	  			prepare_CAN_TX_frame(CAN2_DATA_TX, parsed_values_from_uart, parsed_values_from_uart_count);
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <main+0xf4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4922      	ldr	r1, [pc, #136]	@ (8000bdc <main+0xf8>)
 8000b54:	4823      	ldr	r0, [pc, #140]	@ (8000be4 <main+0x100>)
 8000b56:	f7ff fd29 	bl	80005ac <prepare_CAN_TX_frame>
	  			//Gửi CAN_frame
	  			CAN2_SendMessage(CAN2_DATA_TX);
 8000b5a:	4822      	ldr	r0, [pc, #136]	@ (8000be4 <main+0x100>)
 8000b5c:	f7ff fd5e 	bl	800061c <CAN2_SendMessage>
	  			//Gửi lên UART cái CAN_frame ấy
	  			PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <main+0x104>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	491f      	ldr	r1, [pc, #124]	@ (8000be4 <main+0x100>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fab9 	bl	80010e0 <PrintCANLog>
	  			break;
 8000b6e:	e030      	b.n	8000bd2 <main+0xee>
	  			 * CAN_Frame[0] chứa số phần tử ở đằng sau
	  			 * CAN_Frame[1] chứa mã lệnh (SID) -> so sánh mã lệnh này có phải 1 trong 3 mã lệnh 22 27 2E không,
	  			 * 	-> Nếu không: reset state machine và break
	  			 * 	-> Nếu có: Đưa vào phương trình phân tích lệnh 22 27 2E
	  			 */
	  			switch (CAN1_DATA_RX[1]) {
 8000b70:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <main+0x108>)
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b76:	d012      	beq.n	8000b9e <main+0xba>
 8000b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b7a:	dc16      	bgt.n	8000baa <main+0xc6>
 8000b7c:	2b22      	cmp	r3, #34	@ 0x22
 8000b7e:	d002      	beq.n	8000b86 <main+0xa2>
 8000b80:	2b27      	cmp	r3, #39	@ 0x27
 8000b82:	d006      	beq.n	8000b92 <main+0xae>
 8000b84:	e011      	b.n	8000baa <main+0xc6>
					case 0x22:
						currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <main+0xf0>)
 8000b88:	2203      	movs	r2, #3
 8000b8a:	701a      	strb	r2, [r3, #0]
						SID_22_Practice();
 8000b8c:	f7ff fd92 	bl	80006b4 <SID_22_Practice>
						break;
 8000b90:	e00f      	b.n	8000bb2 <main+0xce>
					case 0x27:
						currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <main+0xf0>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	701a      	strb	r2, [r3, #0]
						SID_27_Practice();
 8000b98:	f7ff fe38 	bl	800080c <SID_27_Practice>
						break;
 8000b9c:	e009      	b.n	8000bb2 <main+0xce>
					case 0x2E:
						currentState = STATE_PREPARING_FOR_CAN1_TRANSMISSION;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <main+0xf0>)
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	701a      	strb	r2, [r3, #0]
						SID_2E_Practice();
 8000ba4:	f7ff feba 	bl	800091c <SID_2E_Practice>
						break;
 8000ba8:	e003      	b.n	8000bb2 <main+0xce>
					default:
						currentState = STATE_PREPARING_FOR_CAN2_TRANSMISSION;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <main+0xf0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
						break;
 8000bb0:	bf00      	nop
				}
	  			break;
 8000bb2:	e00e      	b.n	8000bd2 <main+0xee>

	  		case STATE_PREPARING_FOR_CAN1_TRANSMISSION:
	  			currentState = STATE_CAN1_TRANSMISSION;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <main+0xf0>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	701a      	strb	r2, [r3, #0]
	  			//Gửi CAN_frame
	  			CAN1_SendMessage(CAN1_DATA_TX);
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <main+0x10c>)
 8000bbc:	f7ff fd44 	bl	8000648 <CAN1_SendMessage>
	  			//Gửi lên UART cái CAN_frame ấy
	  			PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <main+0x110>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	490a      	ldr	r1, [pc, #40]	@ (8000bf0 <main+0x10c>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fa89 	bl	80010e0 <PrintCANLog>
	  			break;
 8000bce:	bf00      	nop
 8000bd0:	e7a1      	b.n	8000b16 <main+0x32>
	  switch (currentState){
 8000bd2:	e7a0      	b.n	8000b16 <main+0x32>
 8000bd4:	200011fc 	.word	0x200011fc
 8000bd8:	2000126a 	.word	0x2000126a
 8000bdc:	2000126c 	.word	0x2000126c
 8000be0:	20001204 	.word	0x20001204
 8000be4:	200011ec 	.word	0x200011ec
 8000be8:	20000194 	.word	0x20000194
 8000bec:	200011e4 	.word	0x200011e4
 8000bf0:	200011dc 	.word	0x200011dc
 8000bf4:	20000154 	.word	0x20000154

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	@ 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	2230      	movs	r2, #48	@ 0x30
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 f8fc 	bl	8004e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <SystemClock_Config+0xcc>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	4a27      	ldr	r2, [pc, #156]	@ (8000cc4 <SystemClock_Config+0xcc>)
 8000c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <SystemClock_Config+0xcc>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4b22      	ldr	r3, [pc, #136]	@ (8000cc8 <SystemClock_Config+0xd0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <SystemClock_Config+0xd0>)
 8000c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <SystemClock_Config+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000c6c:	2350      	movs	r3, #80	@ 0x50
 8000c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c74:	2304      	movs	r3, #4
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fb1d 	bl	80032bc <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c88:	f000 faae 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fd7e 	bl	80037ac <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cb6:	f000 fa97 	bl	80011e8 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3750      	adds	r7, #80	@ 0x50
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40007000 	.word	0x40007000

08000ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d0c:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_ADC1_Init+0xa0>)
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2a:	480e      	ldr	r0, [pc, #56]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d2c:	f000 fd34 	bl	8001798 <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fa57 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MX_ADC1_Init+0x98>)
 8000d4c:	f000 fed2 	bl	8001af4 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d56:	f000 fa47 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000078 	.word	0x20000078
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	0f000001 	.word	0x0f000001

08000d70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000d76:	4a29      	ldr	r2, [pc, #164]	@ (8000e1c <MX_CAN1_Init+0xac>)
 8000d78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d80:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000d86:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000d88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000d90:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000d94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000d98:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000d9c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dc2:	4815      	ldr	r0, [pc, #84]	@ (8000e18 <MX_CAN1_Init+0xa8>)
 8000dc4:	f001 f8b4 	bl	8001f30 <HAL_CAN_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000dce:	f000 fa0b 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000dd4:	220e      	movs	r2, #14
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
	CAN1_sFilterConfig.FilterBank = 0;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000dec:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8000df0:	601a      	str	r2, [r3, #0]
	CAN1_sFilterConfig.FilterIdLow = 0x0000;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000dfa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000dfe:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterActivation = ENABLE;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <MX_CAN1_Init+0xb0>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	621a      	str	r2, [r3, #32]
  /* USER CODE END CAN1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000c0 	.word	0x200000c0
 8000e1c:	40006400 	.word	0x40006400
 8000e20:	2000016c 	.word	0x2000016c

08000e24 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e2a:	4a27      	ldr	r2, [pc, #156]	@ (8000ec8 <MX_CAN2_Init+0xa4>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e30:	2205      	movs	r2, #5
 8000e32:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000e3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e40:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e44:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000e48:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e4c:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000e50:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e76:	4813      	ldr	r0, [pc, #76]	@ (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e78:	f001 f85a 	bl	8001f30 <HAL_CAN_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000e82:	f000 f9b1 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	//Cần config các setting của filter ở đây
	CAN2_sFilterConfig.FilterBank = 14;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000e88:	220e      	movs	r2, #14
 8000e8a:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	61da      	str	r2, [r3, #28]
	CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000e9a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000e9e:	601a      	str	r2, [r3, #0]
	CAN2_sFilterConfig.FilterIdLow = 0x0000;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000ea8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000eac:	609a      	str	r2, [r3, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterActivation = ENABLE;
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <MX_CAN2_Init+0xa8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	621a      	str	r2, [r3, #32]

  /* USER CODE END CAN2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000e8 	.word	0x200000e8
 8000ec8:	40006800 	.word	0x40006800
 8000ecc:	200001ac 	.word	0x200001ac

08000ed0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_USART3_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART3_UART_Init+0x4c>)
 8000f08:	f002 fe70 	bl	8003bec <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f000 f969 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000110 	.word	0x20000110
 8000f20:	40004800 	.word	0x40004800

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a33      	ldr	r2, [pc, #204]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_GPIO_Init+0xec>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000faa:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 8000fae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <MX_GPIO_Init+0xf0>)
 8000fc0:	f001 ffbc 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <MX_GPIO_Init+0xf4>)
 8000fda:	f001 ffaf 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4809      	ldr	r0, [pc, #36]	@ (8001018 <MX_GPIO_Init+0xf4>)
 8000ff2:	f001 ffa3 	bl	8002f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2006      	movs	r0, #6
 8000ffc:	f001 fed5 	bl	8002daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001000:	2006      	movs	r0, #6
 8001002:	f001 feee 	bl	8002de2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	@ 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020000 	.word	0x40020000

0800101c <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8001020:	490d      	ldr	r1, [pc, #52]	@ (8001058 <MX_CAN1_Setup+0x3c>)
 8001022:	480e      	ldr	r0, [pc, #56]	@ (800105c <MX_CAN1_Setup+0x40>)
 8001024:	f001 f880 	bl	8002128 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <MX_CAN1_Setup+0x40>)
 800102a:	f001 f95d 	bl	80022e8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800102e:	2102      	movs	r1, #2
 8001030:	480a      	ldr	r0, [pc, #40]	@ (800105c <MX_CAN1_Setup+0x40>)
 8001032:	f001 fb8a 	bl	800274a <HAL_CAN_ActivateNotification>

	//Cần config header của CAN1
    CAN1_pHeader.StdId = 0x012;                   // Set TX message ID
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <MX_CAN1_Setup+0x44>)
 8001038:	2212      	movs	r2, #18
 800103a:	601a      	str	r2, [r3, #0]
    CAN1_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <MX_CAN1_Setup+0x44>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
    CAN1_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <MX_CAN1_Setup+0x44>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
    CAN1_pHeader.DLC = 8;                         // 8 bytes of data
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <MX_CAN1_Setup+0x44>)
 800104a:	2208      	movs	r2, #8
 800104c:	611a      	str	r2, [r3, #16]
    CAN1_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <MX_CAN1_Setup+0x44>)
 8001050:	2200      	movs	r2, #0
 8001052:	751a      	strb	r2, [r3, #20]
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000016c 	.word	0x2000016c
 800105c:	200000c0 	.word	0x200000c0
 8001060:	20000154 	.word	0x20000154

08001064 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8001068:	490d      	ldr	r1, [pc, #52]	@ (80010a0 <MX_CAN2_Setup+0x3c>)
 800106a:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <MX_CAN2_Setup+0x40>)
 800106c:	f001 f85c 	bl	8002128 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <MX_CAN2_Setup+0x40>)
 8001072:	f001 f939 	bl	80022e8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001076:	2102      	movs	r1, #2
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <MX_CAN2_Setup+0x40>)
 800107a:	f001 fb66 	bl	800274a <HAL_CAN_ActivateNotification>

	//Cần config header của CAN2
    CAN2_pHeader.StdId = 0x0A2;                   // Set TX message ID
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <MX_CAN2_Setup+0x44>)
 8001080:	22a2      	movs	r2, #162	@ 0xa2
 8001082:	601a      	str	r2, [r3, #0]
    CAN2_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <MX_CAN2_Setup+0x44>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
    CAN2_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_CAN2_Setup+0x44>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    CAN2_pHeader.DLC = 8;                         // 8 bytes of data
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <MX_CAN2_Setup+0x44>)
 8001092:	2208      	movs	r2, #8
 8001094:	611a      	str	r2, [r3, #16]
    CAN2_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <MX_CAN2_Setup+0x44>)
 8001098:	2200      	movs	r2, #0
 800109a:	751a      	strb	r2, [r3, #20]
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001ac 	.word	0x200001ac
 80010a4:	200000e8 	.word	0x200000e8
 80010a8:	20000194 	.word	0x20000194

080010ac <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 80010b4:	e009      	b.n	80010ca <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	2201      	movs	r2, #1
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <USART3_SendString+0x30>)
 80010c0:	f002 fde1 	bl	8003c86 <HAL_UART_Transmit>
      ch++;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f1      	bne.n	80010b6 <USART3_SendString+0xa>
   }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000110 	.word	0x20000110

080010e0 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t *CAN_Frame)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	@ 0x50
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	80fb      	strh	r3, [r7, #6]
    char bufsend[64];  // Safe enough size
    uint16_t i = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    // Format timestamp
    int len = sprintf(bufsend, "%d ", TimeStamp);
 80010f2:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <PrintCANLog+0xbc>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4929      	ldr	r1, [pc, #164]	@ (80011a0 <PrintCANLog+0xc0>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fe21 	bl	8004d44 <siprintf>
 8001102:	64b8      	str	r0, [r7, #72]	@ 0x48

    // Format CAN ID (always 3 digits, uppercase hex)
    len += sprintf(bufsend + len, "%03X: ", CANID & 0x7FF);  // mask to 11 bits
 8001104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001106:	f107 0208 	add.w	r2, r7, #8
 800110a:	18d0      	adds	r0, r2, r3
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001112:	461a      	mov	r2, r3
 8001114:	4923      	ldr	r1, [pc, #140]	@ (80011a4 <PrintCANLog+0xc4>)
 8001116:	f003 fe15 	bl	8004d44 <siprintf>
 800111a:	4602      	mov	r2, r0
 800111c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800111e:	4413      	add	r3, r2
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Format 8 bytes of CAN data
    for (i = 0; i < 8; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001128:	e015      	b.n	8001156 <PrintCANLog+0x76>
        len += sprintf(bufsend + len, "%02X ", CAN_Frame[i]);
 800112a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	18d0      	adds	r0, r2, r3
 8001132:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	491a      	ldr	r1, [pc, #104]	@ (80011a8 <PrintCANLog+0xc8>)
 8001140:	f003 fe00 	bl	8004d44 <siprintf>
 8001144:	4602      	mov	r2, r0
 8001146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001148:	4413      	add	r3, r2
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (i = 0; i < 8; i++) {
 800114c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001150:	3301      	adds	r3, #1
 8001152:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001156:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800115a:	2b07      	cmp	r3, #7
 800115c:	d9e5      	bls.n	800112a <PrintCANLog+0x4a>
    }

    // End with CRLF
    bufsend[len++] = '\r';
 800115e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001164:	3350      	adds	r3, #80	@ 0x50
 8001166:	443b      	add	r3, r7
 8001168:	220d      	movs	r2, #13
 800116a:	f803 2c48 	strb.w	r2, [r3, #-72]
    bufsend[len++] = '\n';
 800116e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001174:	3350      	adds	r3, #80	@ 0x50
 8001176:	443b      	add	r3, r7
 8001178:	220a      	movs	r2, #10
 800117a:	f803 2c48 	strb.w	r2, [r3, #-72]
    bufsend[len] = '\0';
 800117e:	f107 0208 	add.w	r2, r7, #8
 8001182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]

    // Send over UART
    USART3_SendString((uint8_t *)bufsend);
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff8c 	bl	80010ac <USART3_SendString>
}
 8001194:	bf00      	nop
 8001196:	3750      	adds	r7, #80	@ 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20001200 	.word	0x20001200
 80011a0:	08006018 	.word	0x08006018
 80011a4:	0800601c 	.word	0x0800601c
 80011a8:	08006024 	.word	0x08006024

080011ac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_UART_RxCpltCallback+0x30>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_UART_RxCpltCallback+0x34>)
 80011bc:	7819      	ldrb	r1, [r3, #0]
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_UART_RxCpltCallback+0x38>)
 80011c0:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_UART_RxCpltCallback+0x30>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <HAL_UART_RxCpltCallback+0x30>)
 80011cc:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200001d4 	.word	0x200001d4
 80011e0:	200011d8 	.word	0x200011d8
 80011e4:	200001d8 	.word	0x200001d8

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	@ 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a17      	ldr	r2, [pc, #92]	@ (80012c0 <HAL_ADC_MspInit+0x7c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d127      	bne.n	80012b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_ADC_MspInit+0x80>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <HAL_ADC_MspInit+0x80>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_ADC_MspInit+0x80>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_ADC_MspInit+0x80>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_ADC_MspInit+0x80>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_ADC_MspInit+0x80>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129e:	2304      	movs	r3, #4
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <HAL_ADC_MspInit+0x84>)
 80012b2:	f001 fe43 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	@ 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000

080012cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	@ 0x30
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001414 <HAL_CAN_MspInit+0x148>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d13e      	bne.n	800136c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001418 <HAL_CAN_MspInit+0x14c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a48      	ldr	r2, [pc, #288]	@ (8001418 <HAL_CAN_MspInit+0x14c>)
 80012f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012f8:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_CAN_MspInit+0x14c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10d      	bne.n	800131c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	4b45      	ldr	r3, [pc, #276]	@ (800141c <HAL_CAN_MspInit+0x150>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	4a44      	ldr	r2, [pc, #272]	@ (800141c <HAL_CAN_MspInit+0x150>)
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800130e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001310:	4b42      	ldr	r3, [pc, #264]	@ (800141c <HAL_CAN_MspInit+0x150>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_CAN_MspInit+0x150>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	4a3d      	ldr	r2, [pc, #244]	@ (800141c <HAL_CAN_MspInit+0x150>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6313      	str	r3, [r2, #48]	@ 0x30
 800132c:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_CAN_MspInit+0x150>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001338:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800134a:	2309      	movs	r3, #9
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4832      	ldr	r0, [pc, #200]	@ (8001420 <HAL_CAN_MspInit+0x154>)
 8001356:	f001 fdf1 	bl	8002f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2102      	movs	r1, #2
 800135e:	2014      	movs	r0, #20
 8001360:	f001 fd23 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001364:	2014      	movs	r0, #20
 8001366:	f001 fd3c 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800136a:	e04f      	b.n	800140c <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2c      	ldr	r2, [pc, #176]	@ (8001424 <HAL_CAN_MspInit+0x158>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d14a      	bne.n	800140c <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_CAN_MspInit+0x150>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a27      	ldr	r2, [pc, #156]	@ (800141c <HAL_CAN_MspInit+0x150>)
 8001380:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_CAN_MspInit+0x150>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001392:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <HAL_CAN_MspInit+0x14c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a1f      	ldr	r2, [pc, #124]	@ (8001418 <HAL_CAN_MspInit+0x14c>)
 800139a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_CAN_MspInit+0x14c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d10d      	bne.n	80013c0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_CAN_MspInit+0x150>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <HAL_CAN_MspInit+0x150>)
 80013ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_CAN_MspInit+0x150>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_CAN_MspInit+0x150>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	4a14      	ldr	r2, [pc, #80]	@ (800141c <HAL_CAN_MspInit+0x150>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_CAN_MspInit+0x150>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013dc:	2360      	movs	r3, #96	@ 0x60
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80013ec:	2309      	movs	r3, #9
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	480c      	ldr	r0, [pc, #48]	@ (8001428 <HAL_CAN_MspInit+0x15c>)
 80013f8:	f001 fda0 	bl	8002f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2102      	movs	r1, #2
 8001400:	2040      	movs	r0, #64	@ 0x40
 8001402:	f001 fcd2 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001406:	2040      	movs	r0, #64	@ 0x40
 8001408:	f001 fceb 	bl	8002de2 <HAL_NVIC_EnableIRQ>
}
 800140c:	bf00      	nop
 800140e:	3730      	adds	r7, #48	@ 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40006400 	.word	0x40006400
 8001418:	2000128c 	.word	0x2000128c
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40006800 	.word	0x40006800
 8001428:	40020400 	.word	0x40020400

0800142c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <HAL_UART_MspInit+0x94>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d134      	bne.n	80014b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <HAL_UART_MspInit+0x98>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <HAL_UART_MspInit+0x98>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_UART_MspInit+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_UART_MspInit+0x98>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <HAL_UART_MspInit+0x98>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_UART_MspInit+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001486:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001498:	2307      	movs	r3, #7
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <HAL_UART_MspInit+0x9c>)
 80014a4:	f001 fd4a 	bl	8002f3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2101      	movs	r1, #1
 80014ac:	2027      	movs	r0, #39	@ 0x27
 80014ae:	f001 fc7c 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014b2:	2027      	movs	r0, #39	@ 0x27
 80014b4:	f001 fc95 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020800 	.word	0x40020800

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <NMI_Handler+0x4>

080014d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <MemManage_Handler+0x4>

080014e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 f8f4 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <SysTick_Handler+0x18>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a02      	ldr	r2, [pc, #8]	@ (8001538 <SysTick_Handler+0x18>)
 8001530:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20001200 	.word	0x20001200

0800153c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001540:	2001      	movs	r0, #1
 8001542:	f001 fe97 	bl	8003274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <CAN1_RX0_IRQHandler+0x10>)
 8001552:	f001 f920 	bl	8002796 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000c0 	.word	0x200000c0

08001560 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <USART3_IRQHandler+0x10>)
 8001566:	f002 fcc3 	bl	8003ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000110 	.word	0x20000110

08001574 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <CAN2_RX0_IRQHandler+0x10>)
 800157a:	f001 f90c 	bl	8002796 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200000e8 	.word	0x200000e8

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f003 fc2c 	bl	8004e14 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20020000 	.word	0x20020000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	20001290 	.word	0x20001290
 80015f0:	200013e0 	.word	0x200013e0

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	@ (8001658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	@ (8001664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001642:	f7ff ffd7 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f003 fbeb 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fa4b 	bl	8000ae4 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800165c:	080061b0 	.word	0x080061b0
  ldr r2, =_sbss
 8001660:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001664:	200013e0 	.word	0x200013e0

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f001 fb7d 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fda8 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fb95 	bl	8002dfe <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f001 fb5d 	bl	8002daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	20001294 	.word	0x20001294

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20001294 	.word	0x20001294

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e033      	b.n	8001816 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fd44 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017de:	f023 0302 	bic.w	r3, r3, #2
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 faa4 	bl	8001d38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
 8001806:	e001      	b.n	800180c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_Start+0x1a>
 8001836:	2302      	movs	r3, #2
 8001838:	e0b2      	b.n	80019a0 <HAL_ADC_Start+0x180>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d018      	beq.n	8001882 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001860:	4b52      	ldr	r3, [pc, #328]	@ (80019ac <HAL_ADC_Start+0x18c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_ADC_Start+0x190>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9a      	lsrs	r2, r3, #18
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001874:	e002      	b.n	800187c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d17a      	bne.n	8001986 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018ce:	d106      	bne.n	80018de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d4:	f023 0206 	bic.w	r2, r3, #6
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ec:	4b31      	ldr	r3, [pc, #196]	@ (80019b4 <HAL_ADC_Start+0x194>)
 80018ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2b00      	cmp	r3, #0
 8001904:	d12a      	bne.n	800195c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2b      	ldr	r2, [pc, #172]	@ (80019b8 <HAL_ADC_Start+0x198>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d015      	beq.n	800193c <HAL_ADC_Start+0x11c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <HAL_ADC_Start+0x19c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d105      	bne.n	8001926 <HAL_ADC_Start+0x106>
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <HAL_ADC_Start+0x194>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00a      	beq.n	800193c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <HAL_ADC_Start+0x1a0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d136      	bne.n	800199e <HAL_ADC_Start+0x17e>
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <HAL_ADC_Start+0x194>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d130      	bne.n	800199e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d129      	bne.n	800199e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	e020      	b.n	800199e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a15      	ldr	r2, [pc, #84]	@ (80019b8 <HAL_ADC_Start+0x198>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d11b      	bne.n	800199e <HAL_ADC_Start+0x17e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d114      	bne.n	800199e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	e00b      	b.n	800199e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f043 0210 	orr.w	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	40012300 	.word	0x40012300
 80019b8:	40012000 	.word	0x40012000
 80019bc:	40012100 	.word	0x40012100
 80019c0:	40012200 	.word	0x40012200

080019c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e0:	d113      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019f0:	d10b      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e063      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a0a:	f7ff fe95 	bl	8001738 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a10:	e021      	b.n	8001a56 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d01d      	beq.n	8001a56 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_ADC_PollForConversion+0x6c>
 8001a20:	f7ff fe8a 	bl	8001738 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d212      	bcs.n	8001a56 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d00b      	beq.n	8001a56 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e03d      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d1d6      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0212 	mvn.w	r2, #18
 8001a6c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d123      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d11f      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1c>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e105      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x228>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d925      	bls.n	8001b6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	3b1e      	subs	r3, #30
 8001b36:	2207      	movs	r2, #7
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	400a      	ands	r2, r1
 8001b44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	4603      	mov	r3, r0
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4403      	add	r3, r0
 8001b5e:	3b1e      	subs	r3, #30
 8001b60:	409a      	lsls	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	e022      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6919      	ldr	r1, [r3, #16]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	2207      	movs	r2, #7
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6919      	ldr	r1, [r3, #16]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4403      	add	r3, r0
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d824      	bhi.n	8001c04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b05      	subs	r3, #5
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b05      	subs	r3, #5
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c02:	e04c      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	d824      	bhi.n	8001c56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b23      	subs	r3, #35	@ 0x23
 8001c1e:	221f      	movs	r2, #31
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43da      	mvns	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b23      	subs	r3, #35	@ 0x23
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c54:	e023      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b41      	subs	r3, #65	@ 0x41
 8001c68:	221f      	movs	r2, #31
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	400a      	ands	r2, r1
 8001c76:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b41      	subs	r3, #65	@ 0x41
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <HAL_ADC_ConfigChannel+0x234>)
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <HAL_ADC_ConfigChannel+0x238>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d109      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1cc>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b12      	cmp	r3, #18
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <HAL_ADC_ConfigChannel+0x238>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d123      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x21e>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d003      	beq.n	8001cda <HAL_ADC_ConfigChannel+0x1e6>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b11      	cmp	r3, #17
 8001cd8:	d11b      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d111      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_ADC_ConfigChannel+0x23c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_ADC_ConfigChannel+0x240>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	0c9a      	lsrs	r2, r3, #18
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40012300 	.word	0x40012300
 8001d2c:	40012000 	.word	0x40012000
 8001d30:	20000000 	.word	0x20000000
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d40:	4b79      	ldr	r3, [pc, #484]	@ (8001f28 <ADC_Init+0x1f0>)
 8001d42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	021a      	lsls	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	4a58      	ldr	r2, [pc, #352]	@ (8001f2c <ADC_Init+0x1f4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d022      	beq.n	8001e16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e00f      	b.n	8001e36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0202 	bic.w	r2, r2, #2
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
 8001e50:	005a      	lsls	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	035a      	lsls	r2, r3, #13
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e007      	b.n	8001eac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	051a      	lsls	r2, r3, #20
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eee:	025a      	lsls	r2, r3, #9
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	029a      	lsls	r2, r3, #10
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0ed      	b.n	800211e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff f9bc 	bl	80012cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f64:	f7ff fbe8 	bl	8001738 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f6a:	e012      	b.n	8001f92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f6c:	f7ff fbe4 	bl	8001738 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b0a      	cmp	r3, #10
 8001f78:	d90b      	bls.n	8001f92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0c5      	b.n	800211e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0e5      	beq.n	8001f6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0202 	bic.w	r2, r2, #2
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb0:	f7ff fbc2 	bl	8001738 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fb6:	e012      	b.n	8001fde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fb8:	f7ff fbbe 	bl	8001738 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b0a      	cmp	r3, #10
 8001fc4:	d90b      	bls.n	8001fde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e09f      	b.n	800211e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e5      	bne.n	8001fb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e1b      	ldrb	r3, [r3, #24]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e007      	b.n	8002016 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7e5b      	ldrb	r3, [r3, #25]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e007      	b.n	8002040 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800203e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e9b      	ldrb	r3, [r3, #26]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0220 	orr.w	r2, r2, #32
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e007      	b.n	800206a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0220 	bic.w	r2, r2, #32
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7edb      	ldrb	r3, [r3, #27]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d108      	bne.n	8002084 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0210 	bic.w	r2, r2, #16
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e007      	b.n	8002094 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0210 	orr.w	r2, r2, #16
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7f1b      	ldrb	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d108      	bne.n	80020ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0208 	orr.w	r2, r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e007      	b.n	80020be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7f5b      	ldrb	r3, [r3, #29]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0204 	orr.w	r2, r2, #4
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0204 	bic.w	r2, r2, #4
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	ea42 0103 	orr.w	r1, r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	1e5a      	subs	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d003      	beq.n	800214e <HAL_CAN_ConfigFilter+0x26>
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	2b02      	cmp	r3, #2
 800214a:	f040 80be 	bne.w	80022ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800214e:	4b65      	ldr	r3, [pc, #404]	@ (80022e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002150:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002168:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	431a      	orrs	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2201      	movs	r2, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d123      	bne.n	80021f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3248      	adds	r2, #72	@ 0x48
 80021d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	3348      	adds	r3, #72	@ 0x48
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d122      	bne.n	8002246 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002220:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3248      	adds	r2, #72	@ 0x48
 8002226:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800223a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	3348      	adds	r3, #72	@ 0x48
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	401a      	ands	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002260:	e007      	b.n	8002272 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	431a      	orrs	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	401a      	ands	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800228c:	e007      	b.n	800229e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	431a      	orrs	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022bc:	f023 0201 	bic.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e006      	b.n	80022d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
  }
}
 80022d8:	4618      	mov	r0, r3
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40006400 	.word	0x40006400

080022e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d12e      	bne.n	800235a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002314:	f7ff fa10 	bl	8001738 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800231a:	e012      	b.n	8002342 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800231c:	f7ff fa0c 	bl	8001738 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b0a      	cmp	r3, #10
 8002328:	d90b      	bls.n	8002342 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2205      	movs	r2, #5
 800233a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e012      	b.n	8002368 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e5      	bne.n	800231c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e006      	b.n	8002368 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002384:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d003      	beq.n	800239c <HAL_CAN_AddTxMessage+0x2c>
 8002394:	7ffb      	ldrb	r3, [r7, #31]
 8002396:	2b02      	cmp	r3, #2
 8002398:	f040 80b8 	bne.w	800250c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80a0 	beq.w	80024fc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	0e1b      	lsrs	r3, r3, #24
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d907      	bls.n	80023dc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e09e      	b.n	800251a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023dc:	2201      	movs	r2, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	409a      	lsls	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	6809      	ldr	r1, [r1, #0]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3318      	adds	r3, #24
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	440b      	add	r3, r1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e00f      	b.n	800242a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002414:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800241a:	68f9      	ldr	r1, [r7, #12]
 800241c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800241e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3318      	adds	r3, #24
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	440b      	add	r3, r1
 8002428:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3318      	adds	r3, #24
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	440b      	add	r3, r1
 800243a:	3304      	adds	r3, #4
 800243c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	7d1b      	ldrb	r3, [r3, #20]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d111      	bne.n	800246a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3318      	adds	r3, #24
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3318      	adds	r3, #24
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	440b      	add	r3, r1
 8002466:	3304      	adds	r3, #4
 8002468:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3307      	adds	r3, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	061a      	lsls	r2, r3, #24
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3306      	adds	r3, #6
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3305      	adds	r3, #5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4313      	orrs	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	3204      	adds	r2, #4
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	4610      	mov	r0, r2
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	6811      	ldr	r1, [r2, #0]
 8002492:	ea43 0200 	orr.w	r2, r3, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	440b      	add	r3, r1
 800249c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80024a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3303      	adds	r3, #3
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	061a      	lsls	r2, r3, #24
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3302      	adds	r3, #2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	4313      	orrs	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4610      	mov	r0, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6811      	ldr	r1, [r2, #0]
 80024c8:	ea43 0200 	orr.w	r2, r3, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80024d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3318      	adds	r3, #24
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	6811      	ldr	r1, [r2, #0]
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3318      	adds	r3, #24
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	440b      	add	r3, r1
 80024f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e00e      	b.n	800251a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e006      	b.n	800251a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	@ 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002526:	b480      	push	{r7}
 8002528:	b087      	sub	sp, #28
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d003      	beq.n	800254a <HAL_CAN_GetRxMessage+0x24>
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 80f3 	bne.w	8002730 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0e7      	b.n	800273e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0d8      	b.n	800273e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	331b      	adds	r3, #27
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0204 	and.w	r2, r3, #4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	331b      	adds	r3, #27
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	331b      	adds	r3, #27
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	08db      	lsrs	r3, r3, #3
 80025d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	331b      	adds	r3, #27
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4413      	add	r3, r2
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0202 	and.w	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	331b      	adds	r3, #27
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4413      	add	r3, r2
 80025fe:	3304      	adds	r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	331b      	adds	r3, #27
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b2da      	uxtb	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	331b      	adds	r3, #27
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4413      	add	r3, r2
 800262e:	3304      	adds	r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	4413      	add	r3, r2
 8002644:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0a1a      	lsrs	r2, r3, #8
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0c1a      	lsrs	r2, r3, #16
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3302      	adds	r3, #2
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4413      	add	r3, r2
 800268e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0e1a      	lsrs	r2, r3, #24
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3303      	adds	r3, #3
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3304      	adds	r3, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0a1a      	lsrs	r2, r3, #8
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3305      	adds	r3, #5
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0c1a      	lsrs	r2, r3, #16
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3306      	adds	r3, #6
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e1a      	lsrs	r2, r3, #24
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3307      	adds	r3, #7
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0220 	orr.w	r2, r2, #32
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e007      	b.n	800272c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e006      	b.n	800273e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800275a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d002      	beq.n	8002768 <HAL_CAN_ActivateNotification+0x1e>
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d109      	bne.n	800277c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6959      	ldr	r1, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e006      	b.n	800278a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	@ 0x28
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d07c      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d023      	beq.n	800282e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2201      	movs	r2, #1
 80027ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f983 	bl	8002b04 <HAL_CAN_TxMailbox0CompleteCallback>
 80027fe:	e016      	b.n	800282e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	e00c      	b.n	800282e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
 8002826:	e002      	b.n	800282e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f989 	bl	8002b40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d024      	beq.n	8002882 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002840:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f963 	bl	8002b18 <HAL_CAN_TxMailbox1CompleteCallback>
 8002852:	e016      	b.n	8002882 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
 8002866:	e00c      	b.n	8002882 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	e002      	b.n	8002882 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f969 	bl	8002b54 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d024      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002894:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f943 	bl	8002b2c <HAL_CAN_TxMailbox2CompleteCallback>
 80028a6:	e016      	b.n	80028d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ba:	e00c      	b.n	80028d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	e002      	b.n	80028d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f949 	bl	8002b68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2210      	movs	r2, #16
 80028f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2208      	movs	r2, #8
 8002914:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f930 	bl	8002b7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7fd fff9 	bl	800092c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2210      	movs	r2, #16
 800295c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2208      	movs	r2, #8
 8002978:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f912 	bl	8002ba4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8f9 	bl	8002b90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8fc 	bl	8002bb8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2208      	movs	r2, #8
 80029da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8f5 	bl	8002bcc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d07b      	beq.n	8002ae4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d072      	beq.n	8002adc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d043      	beq.n	8002adc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d03e      	beq.n	8002adc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a64:	2b60      	cmp	r3, #96	@ 0x60
 8002a66:	d02b      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x32a>
 8002a68:	2b60      	cmp	r3, #96	@ 0x60
 8002a6a:	d82e      	bhi.n	8002aca <HAL_CAN_IRQHandler+0x334>
 8002a6c:	2b50      	cmp	r3, #80	@ 0x50
 8002a6e:	d022      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x320>
 8002a70:	2b50      	cmp	r3, #80	@ 0x50
 8002a72:	d82a      	bhi.n	8002aca <HAL_CAN_IRQHandler+0x334>
 8002a74:	2b40      	cmp	r3, #64	@ 0x40
 8002a76:	d019      	beq.n	8002aac <HAL_CAN_IRQHandler+0x316>
 8002a78:	2b40      	cmp	r3, #64	@ 0x40
 8002a7a:	d826      	bhi.n	8002aca <HAL_CAN_IRQHandler+0x334>
 8002a7c:	2b30      	cmp	r3, #48	@ 0x30
 8002a7e:	d010      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x30c>
 8002a80:	2b30      	cmp	r3, #48	@ 0x30
 8002a82:	d822      	bhi.n	8002aca <HAL_CAN_IRQHandler+0x334>
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d002      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x2f8>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d005      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a8c:	e01d      	b.n	8002aca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a96:	e019      	b.n	8002acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aa0:	e014      	b.n	8002acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aaa:	e00f      	b.n	8002acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ab4:	e00a      	b.n	8002acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002abe:	e005      	b.n	8002acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ac8:	e000      	b.n	8002acc <HAL_CAN_IRQHandler+0x336>
            break;
 8002aca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ada:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f872 	bl	8002be0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002afc:	bf00      	nop
 8002afe:	3728      	adds	r7, #40	@ 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	@ (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	@ (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d60:	d301      	bcc.n	8002d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00f      	b.n	8002d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <SysTick_Config+0x40>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295
 8002d74:	f7ff ff8e 	bl	8002c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <SysTick_Config+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7e:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <SysTick_Config+0x40>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff29 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dbc:	f7ff ff3e 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6978      	ldr	r0, [r7, #20]
 8002dc8:	f7ff ff8e 	bl	8002ce8 <NVIC_EncodePriority>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff5d 	bl	8002c94 <__NVIC_SetPriority>
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff31 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffa2 	bl	8002d50 <SysTick_Config>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7fe fc88 	bl	8001738 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d008      	beq.n	8002e48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e052      	b.n	8002eee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0216 	bic.w	r2, r2, #22
 8002e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d103      	bne.n	8002e78 <HAL_DMA_Abort+0x62>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0208 	bic.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e98:	e013      	b.n	8002ec2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9a:	f7fe fc4d 	bl	8001738 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d90c      	bls.n	8002ec2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e015      	b.n	8002eee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e4      	bne.n	8002e9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	223f      	movs	r2, #63	@ 0x3f
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d004      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2280      	movs	r2, #128	@ 0x80
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e00c      	b.n	8002f2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2205      	movs	r2, #5
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	@ 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e16b      	b.n	8003230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f040 815a 	bne.w	800322a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d005      	beq.n	8002f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d130      	bne.n	8002ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 0201 	and.w	r2, r3, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d017      	beq.n	800302c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d123      	bne.n	8003080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80b4 	beq.w	800322a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b60      	ldr	r3, [pc, #384]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030de:	4a5b      	ldr	r2, [pc, #364]	@ (800324c <HAL_GPIO_Init+0x310>)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_GPIO_Init+0x314>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x226>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a51      	ldr	r2, [pc, #324]	@ (8003254 <HAL_GPIO_Init+0x318>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x222>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a50      	ldr	r2, [pc, #320]	@ (8003258 <HAL_GPIO_Init+0x31c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x21e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4f      	ldr	r2, [pc, #316]	@ (800325c <HAL_GPIO_Init+0x320>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x21a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4e      	ldr	r2, [pc, #312]	@ (8003260 <HAL_GPIO_Init+0x324>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x216>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4d      	ldr	r2, [pc, #308]	@ (8003264 <HAL_GPIO_Init+0x328>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x212>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4c      	ldr	r2, [pc, #304]	@ (8003268 <HAL_GPIO_Init+0x32c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <HAL_GPIO_Init+0x330>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x20a>
 8003142:	2307      	movs	r3, #7
 8003144:	e00e      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003146:	2308      	movs	r3, #8
 8003148:	e00c      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800314a:	2306      	movs	r3, #6
 800314c:	e00a      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800314e:	2305      	movs	r3, #5
 8003150:	e008      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003152:	2304      	movs	r3, #4
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003162:	2300      	movs	r3, #0
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f002 0203 	and.w	r2, r2, #3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003174:	4935      	ldr	r1, [pc, #212]	@ (800324c <HAL_GPIO_Init+0x310>)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003182:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <HAL_GPIO_Init+0x334>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a6:	4a32      	ldr	r2, [pc, #200]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ac:	4b30      	ldr	r3, [pc, #192]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d0:	4a27      	ldr	r2, [pc, #156]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031d6:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003200:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_GPIO_Init+0x334>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003224:	4a12      	ldr	r2, [pc, #72]	@ (8003270 <HAL_GPIO_Init+0x334>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	f67f ae90 	bls.w	8002f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	@ 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	40013800 	.word	0x40013800
 8003250:	40020000 	.word	0x40020000
 8003254:	40020400 	.word	0x40020400
 8003258:	40020800 	.word	0x40020800
 800325c:	40020c00 	.word	0x40020c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40021400 	.word	0x40021400
 8003268:	40021800 	.word	0x40021800
 800326c:	40021c00 	.word	0x40021c00
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800327e:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f806 	bl	80032a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e267      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	4b88      	ldr	r3, [pc, #544]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b82      	ldr	r3, [pc, #520]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b7e      	ldr	r3, [pc, #504]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e242      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b76      	ldr	r3, [pc, #472]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b70      	ldr	r3, [pc, #448]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6f      	ldr	r2, [pc, #444]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b6d      	ldr	r3, [pc, #436]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6c      	ldr	r2, [pc, #432]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b69      	ldr	r3, [pc, #420]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b66      	ldr	r3, [pc, #408]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe f9e0 	bl	8001738 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe f9dc 	bl	8001738 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e207      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b5b      	ldr	r3, [pc, #364]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe f9cc 	bl	8001738 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe f9c8 	bl	8001738 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1f3      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b51      	ldr	r3, [pc, #324]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	4b4a      	ldr	r3, [pc, #296]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b44      	ldr	r3, [pc, #272]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	4b41      	ldr	r3, [pc, #260]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1c7      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4937      	ldr	r1, [pc, #220]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	e03a      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342c:	4b34      	ldr	r3, [pc, #208]	@ (8003500 <HAL_RCC_OscConfig+0x244>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe f981 	bl	8001738 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe f97d 	bl	8001738 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1a8      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	4b2b      	ldr	r3, [pc, #172]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b28      	ldr	r3, [pc, #160]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4925      	ldr	r1, [pc, #148]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	4b24      	ldr	r3, [pc, #144]	@ (8003500 <HAL_RCC_OscConfig+0x244>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f960 	bl	8001738 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347c:	f7fe f95c 	bl	8001738 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e187      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d036      	beq.n	8003514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <HAL_RCC_OscConfig+0x248>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe f940 	bl	8001738 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe f93c 	bl	8001738 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e167      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_RCC_OscConfig+0x240>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
 80034da:	e01b      	b.n	8003514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <HAL_RCC_OscConfig+0x248>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fe f929 	bl	8001738 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e00e      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fe f925 	bl	8001738 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e150      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 80034fc:	40023800 	.word	0x40023800
 8003500:	42470000 	.word	0x42470000
 8003504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ea      	bne.n	80034ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8097 	beq.w	8003650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b81      	ldr	r3, [pc, #516]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b7d      	ldr	r3, [pc, #500]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	4a7c      	ldr	r2, [pc, #496]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	@ 0x40
 8003542:	4b7a      	ldr	r3, [pc, #488]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b77      	ldr	r3, [pc, #476]	@ (8003730 <HAL_RCC_OscConfig+0x474>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b74      	ldr	r3, [pc, #464]	@ (8003730 <HAL_RCC_OscConfig+0x474>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	@ (8003730 <HAL_RCC_OscConfig+0x474>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe f8e5 	bl	8001738 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7fe f8e1 	bl	8001738 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e10c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b6a      	ldr	r3, [pc, #424]	@ (8003730 <HAL_RCC_OscConfig+0x474>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2ea>
 8003598:	4b64      	ldr	r3, [pc, #400]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	4a63      	ldr	r2, [pc, #396]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x30c>
 80035ae:	4b5f      	ldr	r3, [pc, #380]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	4a5e      	ldr	r2, [pc, #376]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ba:	4b5c      	ldr	r3, [pc, #368]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035c8:	4b58      	ldr	r3, [pc, #352]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4a57      	ldr	r2, [pc, #348]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d4:	4b55      	ldr	r3, [pc, #340]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d8:	4a54      	ldr	r2, [pc, #336]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f8a6 	bl	8001738 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe f8a2 	bl	8001738 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0cb      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	4b49      	ldr	r3, [pc, #292]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ee      	beq.n	80035f0 <HAL_RCC_OscConfig+0x334>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fe f890 	bl	8001738 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe f88c 	bl	8001738 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0b5      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	4b3e      	ldr	r3, [pc, #248]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b39      	ldr	r3, [pc, #228]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	4a38      	ldr	r2, [pc, #224]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a1 	beq.w	800379c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365a:	4b34      	ldr	r3, [pc, #208]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d05c      	beq.n	8003720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d141      	bne.n	80036f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <HAL_RCC_OscConfig+0x478>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe f860 	bl	8001738 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe f85c 	bl	8001738 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e087      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b27      	ldr	r3, [pc, #156]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	491b      	ldr	r1, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x478>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe f835 	bl	8001738 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe f831 	bl	8001738 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e05c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x416>
 80036f0:	e054      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <HAL_RCC_OscConfig+0x478>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe f81e 	bl	8001738 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe f81a 	bl	8001738 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e045      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	@ (800372c <HAL_RCC_OscConfig+0x470>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x444>
 800371e:	e03d      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e038      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003738:	4b1b      	ldr	r3, [pc, #108]	@ (80037a8 <HAL_RCC_OscConfig+0x4ec>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d028      	beq.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d121      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d11a      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800376e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b65      	ldr	r3, [pc, #404]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b59      	ldr	r3, [pc, #356]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003818:	4b53      	ldr	r3, [pc, #332]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b50      	ldr	r3, [pc, #320]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b47      	ldr	r3, [pc, #284]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b37      	ldr	r3, [pc, #220]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fd ff4c 	bl	8001738 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fd ff48 	bl	8001738 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003932:	f000 f821 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd feac 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	08006038 	.word	0x08006038
 8003970:	20000000 	.word	0x20000000
 8003974:	20000004 	.word	0x20000004

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b094      	sub	sp, #80	@ 0x50
 800397e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	647b      	str	r3, [r7, #68]	@ 0x44
 8003984:	2300      	movs	r3, #0
 8003986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003988:	2300      	movs	r3, #0
 800398a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003990:	4b79      	ldr	r3, [pc, #484]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d00d      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x40>
 800399c:	2b08      	cmp	r3, #8
 800399e:	f200 80e1 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x34>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039aa:	e0db      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b73      	ldr	r3, [pc, #460]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80039ae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80039b0:	e0db      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b2:	4b73      	ldr	r3, [pc, #460]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80039b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039b6:	e0d8      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d063      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	2200      	movs	r2, #0
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e2:	2300      	movs	r3, #0
 80039e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	f04f 0000 	mov.w	r0, #0
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	0159      	lsls	r1, r3, #5
 80039f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039fc:	0150      	lsls	r0, r2, #5
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4621      	mov	r1, r4
 8003a04:	1a51      	subs	r1, r2, r1
 8003a06:	6139      	str	r1, [r7, #16]
 8003a08:	4629      	mov	r1, r5
 8003a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	018b      	lsls	r3, r1, #6
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a26:	4651      	mov	r1, sl
 8003a28:	018a      	lsls	r2, r1, #6
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a30:	4659      	mov	r1, fp
 8003a32:	eb63 0901 	sbc.w	r9, r3, r1
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	eb18 0303 	adds.w	r3, r8, r3
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	462b      	mov	r3, r5
 8003a58:	eb49 0303 	adc.w	r3, r9, r3
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	024b      	lsls	r3, r1, #9
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a74:	4621      	mov	r1, r4
 8003a76:	024a      	lsls	r2, r1, #9
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a88:	f7fc fbfa 	bl	8000280 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a94:	e058      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b38      	ldr	r3, [pc, #224]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	f04f 0000 	mov.w	r0, #0
 8003ab8:	f04f 0100 	mov.w	r1, #0
 8003abc:	0159      	lsls	r1, r3, #5
 8003abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac2:	0150      	lsls	r0, r2, #5
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4641      	mov	r1, r8
 8003aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ace:	4649      	mov	r1, r9
 8003ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8003aec:	eb63 050b 	sbc.w	r5, r3, fp
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	00eb      	lsls	r3, r5, #3
 8003afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003afe:	00e2      	lsls	r2, r4, #3
 8003b00:	4614      	mov	r4, r2
 8003b02:	461d      	mov	r5, r3
 8003b04:	4643      	mov	r3, r8
 8003b06:	18e3      	adds	r3, r4, r3
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	eb45 0303 	adc.w	r3, r5, r3
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b1e:	4629      	mov	r1, r5
 8003b20:	028b      	lsls	r3, r1, #10
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b28:	4621      	mov	r1, r4
 8003b2a:	028a      	lsls	r2, r1, #10
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b32:	2200      	movs	r2, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	61fa      	str	r2, [r7, #28]
 8003b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3c:	f7fc fba0 	bl	8000280 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3750      	adds	r7, #80	@ 0x50
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b88:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000000 	.word	0x20000000

08003b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba0:	f7ff fff0 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	@ (8003bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08006048 	.word	0x08006048

08003bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc8:	f7ff ffdc 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0b5b      	lsrs	r3, r3, #13
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	@ (8003be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08006048 	.word	0x08006048

08003bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e03f      	b.n	8003c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fc0a 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	@ 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fe13 	bl	800485c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b08a      	sub	sp, #40	@ 0x28
 8003c8a:	af02      	add	r7, sp, #8
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d17c      	bne.n	8003da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Transmit+0x2c>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e075      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Transmit+0x3e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e06e      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	@ 0x21
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fd2d 	bl	8001738 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf4:	d108      	bne.n	8003d08 <HAL_UART_Transmit+0x82>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d104      	bne.n	8003d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e003      	b.n	8003d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003d18:	e02a      	b.n	8003d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2180      	movs	r1, #128	@ 0x80
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fb91 	bl	800444c <UART_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e036      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	e007      	b.n	8003d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1cf      	bne.n	8003d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	@ 0x40
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fb61 	bl	800444c <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e006      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08a      	sub	sp, #40	@ 0x28
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f040 808c 	bne.w	8003ee4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Receive+0x2e>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e084      	b.n	8003ee6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Receive+0x40>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e07d      	b.n	8003ee6 <HAL_UART_Receive+0x13c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2222      	movs	r2, #34	@ 0x22
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e06:	f7fd fc97 	bl	8001738 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d108      	bne.n	8003e34 <HAL_UART_Receive+0x8a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e003      	b.n	8003e3c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e44:	e043      	b.n	8003ece <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2120      	movs	r1, #32
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fafb 	bl	800444c <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e042      	b.n	8003ee6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10c      	bne.n	8003e80 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e01f      	b.n	8003ec0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e88:	d007      	beq.n	8003e9a <HAL_UART_Receive+0xf0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <HAL_UART_Receive+0xfe>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e008      	b.n	8003eba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1b6      	bne.n	8003e46 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_UART_IRQHandler+0x66>
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fbc9 	bl	80046e6 <UART_Receive_IT>
      return;
 8003f54:	e256      	b.n	8004404 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80de 	beq.w	800411c <HAL_UART_IRQHandler+0x22c>
 8003f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80d1 	beq.w	800411c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_UART_IRQHandler+0xae>
 8003f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xd2>
 8003faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_UART_IRQHandler+0xf6>
 8003fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d011      	beq.n	8004016 <HAL_UART_IRQHandler+0x126>
 8003ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f043 0208 	orr.w	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 81ed 	beq.w	80043fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_UART_IRQHandler+0x14e>
 800402c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb54 	bl	80046e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_UART_IRQHandler+0x17a>
 8004062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d04f      	beq.n	800410a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa5c 	bl	8004528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407a:	2b40      	cmp	r3, #64	@ 0x40
 800407c:	d141      	bne.n	8004102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800409c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1d9      	bne.n	800407e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d013      	beq.n	80040fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	4a7d      	ldr	r2, [pc, #500]	@ (80042cc <HAL_UART_IRQHandler+0x3dc>)
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe ff09 	bl	8002ef6 <HAL_DMA_Abort_IT>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d016      	beq.n	8004118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040f4:	4610      	mov	r0, r2
 80040f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	e00e      	b.n	8004118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f990 	bl	8004420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	e00a      	b.n	8004118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f98c 	bl	8004420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	e006      	b.n	8004118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f988 	bl	8004420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004116:	e170      	b.n	80043fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	bf00      	nop
    return;
 800411a:	e16e      	b.n	80043fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 814a 	bne.w	80043ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8143 	beq.w	80043ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 813c 	beq.w	80043ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	f040 80b4 	bne.w	80042d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8140 	beq.w	80043fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004186:	429a      	cmp	r2, r3
 8004188:	f080 8139 	bcs.w	80043fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004192:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800419e:	f000 8088 	beq.w	80042b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1d9      	bne.n	80041a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004212:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004216:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800421a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e1      	bne.n	80041ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800423a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800423c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800424e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800425c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e3      	bne.n	800422a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004294:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004296:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800429a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e3      	bne.n	8004270 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe fdb2 	bl	8002e16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8b6 	bl	8004434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042c8:	e099      	b.n	80043fe <HAL_UART_IRQHandler+0x50e>
 80042ca:	bf00      	nop
 80042cc:	080045ef 	.word	0x080045ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 808b 	beq.w	8004402 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8086 	beq.w	8004402 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800431a:	647a      	str	r2, [r7, #68]	@ 0x44
 800431c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e3      	bne.n	80042f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	623b      	str	r3, [r7, #32]
   return(result);
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004352:	633a      	str	r2, [r7, #48]	@ 0x30
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e3      	bne.n	800432e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	60fb      	str	r3, [r7, #12]
   return(result);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0310 	bic.w	r3, r3, #16
 800438a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004398:	61fa      	str	r2, [r7, #28]
 800439a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	69b9      	ldr	r1, [r7, #24]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	617b      	str	r3, [r7, #20]
   return(result);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e3      	bne.n	8004374 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f83e 	bl	8004434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b8:	e023      	b.n	8004402 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_UART_IRQHandler+0x4ea>
 80043c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f91f 	bl	8004616 <UART_Transmit_IT>
    return;
 80043d8:	e014      	b.n	8004404 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <HAL_UART_IRQHandler+0x514>
 80043e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f95f 	bl	80046b6 <UART_EndTransmit_IT>
    return;
 80043f8:	e004      	b.n	8004404 <HAL_UART_IRQHandler+0x514>
    return;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <HAL_UART_IRQHandler+0x514>
      return;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_UART_IRQHandler+0x514>
      return;
 8004402:	bf00      	nop
  }
}
 8004404:	37e8      	adds	r7, #232	@ 0xe8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop

0800440c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b090      	sub	sp, #64	@ 0x40
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	e050      	b.n	8004500 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d04c      	beq.n	8004500 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <UART_WaitOnFlagUntilTimeout+0x30>
 800446c:	f7fd f964 	bl	8001738 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004478:	429a      	cmp	r2, r3
 800447a:	d241      	bcs.n	8004500 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800449c:	637a      	str	r2, [r7, #52]	@ 0x34
 800449e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	613b      	str	r3, [r7, #16]
   return(result);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044d0:	623a      	str	r2, [r7, #32]
 80044d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e00f      	b.n	8004520 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4013      	ands	r3, r2
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	429a      	cmp	r2, r3
 800451c:	d09f      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3740      	adds	r7, #64	@ 0x40
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b095      	sub	sp, #84	@ 0x54
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004550:	643a      	str	r2, [r7, #64]	@ 0x40
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3314      	adds	r3, #20
 800456a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	61fb      	str	r3, [r7, #28]
   return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	2b01      	cmp	r3, #1
 800459e:	d119      	bne.n	80045d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c0:	61ba      	str	r2, [r7, #24]
 80045c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	613b      	str	r3, [r7, #16]
   return(result);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045e2:	bf00      	nop
 80045e4:	3754      	adds	r7, #84	@ 0x54
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff ff09 	bl	8004420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	@ 0x21
 8004628:	d13e      	bne.n	80046a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d114      	bne.n	800465e <UART_Transmit_IT+0x48>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004650:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]
 800465c:	e008      	b.n	8004670 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6211      	str	r1, [r2, #32]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4619      	mov	r1, r3
 800467e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe98 	bl	800440c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08c      	sub	sp, #48	@ 0x30
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b22      	cmp	r3, #34	@ 0x22
 80046f8:	f040 80ab 	bne.w	8004852 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004704:	d117      	bne.n	8004736 <UART_Receive_IT+0x50>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d113      	bne.n	8004736 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	b29a      	uxth	r2, r3
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	629a      	str	r2, [r3, #40]	@ 0x28
 8004734:	e026      	b.n	8004784 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d007      	beq.n	800475a <UART_Receive_IT+0x74>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <UART_Receive_IT+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e008      	b.n	800477a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004794:	2b00      	cmp	r3, #0
 8004796:	d15a      	bne.n	800484e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0220 	bic.w	r2, r2, #32
 80047a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d135      	bne.n	8004844 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	613b      	str	r3, [r7, #16]
   return(result);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f023 0310 	bic.w	r3, r3, #16
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fe:	623a      	str	r2, [r7, #32]
 8004800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	69f9      	ldr	r1, [r7, #28]
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	61bb      	str	r3, [r7, #24]
   return(result);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b10      	cmp	r3, #16
 800481e:	d10a      	bne.n	8004836 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800483a:	4619      	mov	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fdf9 	bl	8004434 <HAL_UARTEx_RxEventCallback>
 8004842:	e002      	b.n	800484a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fc fcb1 	bl	80011ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e002      	b.n	8004854 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3730      	adds	r7, #48	@ 0x30
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b0c0      	sub	sp, #256	@ 0x100
 8004862:	af00      	add	r7, sp, #0
 8004864:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	ea40 0301 	orr.w	r3, r0, r1
 8004884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	431a      	orrs	r2, r3
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	431a      	orrs	r2, r3
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048b4:	f021 010c 	bic.w	r1, r1, #12
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048c2:	430b      	orrs	r3, r1
 80048c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d6:	6999      	ldr	r1, [r3, #24]
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	ea40 0301 	orr.w	r3, r0, r1
 80048e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004b28 <UART_SetConfig+0x2cc>)
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d005      	beq.n	80048fc <UART_SetConfig+0xa0>
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004b2c <UART_SetConfig+0x2d0>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d104      	bne.n	8004906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7ff f962 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004900:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004904:	e003      	b.n	800490e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004906:	f7ff f949 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 800490a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004918:	f040 810c 	bne.w	8004b34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800491c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004926:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800492a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	1891      	adds	r1, r2, r2
 8004934:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004936:	415b      	adcs	r3, r3
 8004938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800493a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800493e:	4621      	mov	r1, r4
 8004940:	eb12 0801 	adds.w	r8, r2, r1
 8004944:	4629      	mov	r1, r5
 8004946:	eb43 0901 	adc.w	r9, r3, r1
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800495a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495e:	4690      	mov	r8, r2
 8004960:	4699      	mov	r9, r3
 8004962:	4623      	mov	r3, r4
 8004964:	eb18 0303 	adds.w	r3, r8, r3
 8004968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800496c:	462b      	mov	r3, r5
 800496e:	eb49 0303 	adc.w	r3, r9, r3
 8004972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004982:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800498a:	460b      	mov	r3, r1
 800498c:	18db      	adds	r3, r3, r3
 800498e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004990:	4613      	mov	r3, r2
 8004992:	eb42 0303 	adc.w	r3, r2, r3
 8004996:	657b      	str	r3, [r7, #84]	@ 0x54
 8004998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800499c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049a0:	f7fb fc6e 	bl	8000280 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b61      	ldr	r3, [pc, #388]	@ (8004b30 <UART_SetConfig+0x2d4>)
 80049aa:	fba3 2302 	umull	r2, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	011c      	lsls	r4, r3, #4
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049cc:	415b      	adcs	r3, r3
 80049ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049d4:	4641      	mov	r1, r8
 80049d6:	eb12 0a01 	adds.w	sl, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb43 0b01 	adc.w	fp, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f4:	4692      	mov	sl, r2
 80049f6:	469b      	mov	fp, r3
 80049f8:	4643      	mov	r3, r8
 80049fa:	eb1a 0303 	adds.w	r3, sl, r3
 80049fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a02:	464b      	mov	r3, r9
 8004a04:	eb4b 0303 	adc.w	r3, fp, r3
 8004a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a36:	f7fb fc23 	bl	8000280 <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4b3b      	ldr	r3, [pc, #236]	@ (8004b30 <UART_SetConfig+0x2d4>)
 8004a42:	fba3 2301 	umull	r2, r3, r3, r1
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2264      	movs	r2, #100	@ 0x64
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	1acb      	subs	r3, r1, r3
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a56:	4b36      	ldr	r3, [pc, #216]	@ (8004b30 <UART_SetConfig+0x2d4>)
 8004a58:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a64:	441c      	add	r4, r3
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a80:	415b      	adcs	r3, r3
 8004a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a88:	4641      	mov	r1, r8
 8004a8a:	1851      	adds	r1, r2, r1
 8004a8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a8e:	4649      	mov	r1, r9
 8004a90:	414b      	adcs	r3, r1
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	00cb      	lsls	r3, r1, #3
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aaa:	4651      	mov	r1, sl
 8004aac:	00ca      	lsls	r2, r1, #3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004abc:	464b      	mov	r3, r9
 8004abe:	460a      	mov	r2, r1
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ad4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004adc:	460b      	mov	r3, r1
 8004ade:	18db      	adds	r3, r3, r3
 8004ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004af2:	f7fb fbc5 	bl	8000280 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <UART_SetConfig+0x2d4>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	@ 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	3332      	adds	r3, #50	@ 0x32
 8004b0e:	4a08      	ldr	r2, [pc, #32]	@ (8004b30 <UART_SetConfig+0x2d4>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 0207 	and.w	r2, r3, #7
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4422      	add	r2, r4
 8004b22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b24:	e106      	b.n	8004d34 <UART_SetConfig+0x4d8>
 8004b26:	bf00      	nop
 8004b28:	40011000 	.word	0x40011000
 8004b2c:	40011400 	.word	0x40011400
 8004b30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b46:	4642      	mov	r2, r8
 8004b48:	464b      	mov	r3, r9
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	6239      	str	r1, [r7, #32]
 8004b4e:	415b      	adcs	r3, r3
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b56:	4641      	mov	r1, r8
 8004b58:	1854      	adds	r4, r2, r1
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	eb43 0501 	adc.w	r5, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	18e3      	adds	r3, r4, r3
 8004b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	eb45 0303 	adc.w	r3, r5, r3
 8004b82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	008b      	lsls	r3, r1, #2
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bac:	4621      	mov	r1, r4
 8004bae:	008a      	lsls	r2, r1, #2
 8004bb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bb4:	f7fb fb64 	bl	8000280 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4b60      	ldr	r3, [pc, #384]	@ (8004d40 <UART_SetConfig+0x4e4>)
 8004bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	011c      	lsls	r4, r3, #4
 8004bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	1891      	adds	r1, r2, r2
 8004bde:	61b9      	str	r1, [r7, #24]
 8004be0:	415b      	adcs	r3, r3
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be8:	4641      	mov	r1, r8
 8004bea:	1851      	adds	r1, r2, r1
 8004bec:	6139      	str	r1, [r7, #16]
 8004bee:	4649      	mov	r1, r9
 8004bf0:	414b      	adcs	r3, r1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c00:	4659      	mov	r1, fp
 8004c02:	00cb      	lsls	r3, r1, #3
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	00ca      	lsls	r2, r1, #3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	4642      	mov	r2, r8
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	460a      	mov	r2, r1
 8004c20:	eb42 0303 	adc.w	r3, r2, r3
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c40:	4649      	mov	r1, r9
 8004c42:	008b      	lsls	r3, r1, #2
 8004c44:	4641      	mov	r1, r8
 8004c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	008a      	lsls	r2, r1, #2
 8004c4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c52:	f7fb fb15 	bl	8000280 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4b38      	ldr	r3, [pc, #224]	@ (8004d40 <UART_SetConfig+0x4e4>)
 8004c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2264      	movs	r2, #100	@ 0x64
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	1acb      	subs	r3, r1, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	@ 0x32
 8004c70:	4a33      	ldr	r2, [pc, #204]	@ (8004d40 <UART_SetConfig+0x4e4>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c7c:	441c      	add	r4, r3
 8004c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c82:	2200      	movs	r2, #0
 8004c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	6039      	str	r1, [r7, #0]
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	414b      	adcs	r3, r1
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cce:	464b      	mov	r3, r9
 8004cd0:	460a      	mov	r2, r1
 8004cd2:	eb42 0303 	adc.w	r3, r2, r3
 8004cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ce2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	008b      	lsls	r3, r1, #2
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	008a      	lsls	r2, r1, #2
 8004cfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d02:	f7fb fabd 	bl	8000280 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <UART_SetConfig+0x4e4>)
 8004d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	2164      	movs	r1, #100	@ 0x64
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	3332      	adds	r3, #50	@ 0x32
 8004d1e:	4a08      	ldr	r2, [pc, #32]	@ (8004d40 <UART_SetConfig+0x4e4>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4422      	add	r2, r4
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d40:	51eb851f 	.word	0x51eb851f

08004d44 <siprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b510      	push	{r4, lr}
 8004d48:	b09d      	sub	sp, #116	@ 0x74
 8004d4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004d4c:	9002      	str	r0, [sp, #8]
 8004d4e:	9006      	str	r0, [sp, #24]
 8004d50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d54:	480a      	ldr	r0, [pc, #40]	@ (8004d80 <siprintf+0x3c>)
 8004d56:	9107      	str	r1, [sp, #28]
 8004d58:	9104      	str	r1, [sp, #16]
 8004d5a:	490a      	ldr	r1, [pc, #40]	@ (8004d84 <siprintf+0x40>)
 8004d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d60:	9105      	str	r1, [sp, #20]
 8004d62:	2400      	movs	r4, #0
 8004d64:	a902      	add	r1, sp, #8
 8004d66:	6800      	ldr	r0, [r0, #0]
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004d6c:	f000 f9d2 	bl	8005114 <_svfiprintf_r>
 8004d70:	9b02      	ldr	r3, [sp, #8]
 8004d72:	701c      	strb	r4, [r3, #0]
 8004d74:	b01d      	add	sp, #116	@ 0x74
 8004d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7a:	b003      	add	sp, #12
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	2000000c 	.word	0x2000000c
 8004d84:	ffff0208 	.word	0xffff0208

08004d88 <siscanf>:
 8004d88:	b40e      	push	{r1, r2, r3}
 8004d8a:	b570      	push	{r4, r5, r6, lr}
 8004d8c:	b09d      	sub	sp, #116	@ 0x74
 8004d8e:	ac21      	add	r4, sp, #132	@ 0x84
 8004d90:	2500      	movs	r5, #0
 8004d92:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004d96:	f854 6b04 	ldr.w	r6, [r4], #4
 8004d9a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d9e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8004da0:	9002      	str	r0, [sp, #8]
 8004da2:	9006      	str	r0, [sp, #24]
 8004da4:	f7fb fa14 	bl	80001d0 <strlen>
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <siscanf+0x50>)
 8004daa:	9003      	str	r0, [sp, #12]
 8004dac:	9007      	str	r0, [sp, #28]
 8004dae:	480b      	ldr	r0, [pc, #44]	@ (8004ddc <siscanf+0x54>)
 8004db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004db6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dba:	4632      	mov	r2, r6
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	a902      	add	r1, sp, #8
 8004dc0:	6800      	ldr	r0, [r0, #0]
 8004dc2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8004dc4:	9514      	str	r5, [sp, #80]	@ 0x50
 8004dc6:	9401      	str	r4, [sp, #4]
 8004dc8:	f000 fafa 	bl	80053c0 <__ssvfiscanf_r>
 8004dcc:	b01d      	add	sp, #116	@ 0x74
 8004dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dd2:	b003      	add	sp, #12
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	08004de1 	.word	0x08004de1
 8004ddc:	2000000c 	.word	0x2000000c

08004de0 <__seofread>:
 8004de0:	2000      	movs	r0, #0
 8004de2:	4770      	bx	lr

08004de4 <memcmp>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	3901      	subs	r1, #1
 8004de8:	4402      	add	r2, r0
 8004dea:	4290      	cmp	r0, r2
 8004dec:	d101      	bne.n	8004df2 <memcmp+0xe>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e005      	b.n	8004dfe <memcmp+0x1a>
 8004df2:	7803      	ldrb	r3, [r0, #0]
 8004df4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d001      	beq.n	8004e00 <memcmp+0x1c>
 8004dfc:	1b18      	subs	r0, r3, r4
 8004dfe:	bd10      	pop	{r4, pc}
 8004e00:	3001      	adds	r0, #1
 8004e02:	e7f2      	b.n	8004dea <memcmp+0x6>

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	@ (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	@ (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	@ (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	@ (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	@ (8004e64 <__libc_init_array+0x44>)
 8004e34:	f001 f8e2 	bl	8005ffc <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	080061a8 	.word	0x080061a8
 8004e5c:	080061a8 	.word	0x080061a8
 8004e60:	080061a8 	.word	0x080061a8
 8004e64:	080061ac 	.word	0x080061ac

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <_free_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4605      	mov	r5, r0
 8004e70:	2900      	cmp	r1, #0
 8004e72:	d041      	beq.n	8004ef8 <_free_r+0x8c>
 8004e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e78:	1f0c      	subs	r4, r1, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfb8      	it	lt
 8004e7e:	18e4      	addlt	r4, r4, r3
 8004e80:	f000 f8e0 	bl	8005044 <__malloc_lock>
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <_free_r+0x90>)
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	b933      	cbnz	r3, 8004e98 <_free_r+0x2c>
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	6014      	str	r4, [r2, #0]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e94:	f000 b8dc 	b.w	8005050 <__malloc_unlock>
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d908      	bls.n	8004eae <_free_r+0x42>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	1821      	adds	r1, r4, r0
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf01      	itttt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	1809      	addeq	r1, r1, r0
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	e7ed      	b.n	8004e8a <_free_r+0x1e>
 8004eae:	461a      	mov	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b10b      	cbz	r3, 8004eb8 <_free_r+0x4c>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x42>
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	1850      	adds	r0, r2, r1
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x6c>
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	1850      	adds	r0, r2, r1
 8004ec6:	4283      	cmp	r3, r0
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	d1e0      	bne.n	8004e8e <_free_r+0x22>
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	4408      	add	r0, r1
 8004ed4:	6010      	str	r0, [r2, #0]
 8004ed6:	e7da      	b.n	8004e8e <_free_r+0x22>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x74>
 8004eda:	230c      	movs	r3, #12
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	e7d6      	b.n	8004e8e <_free_r+0x22>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6054      	str	r4, [r2, #4]
 8004ef6:	e7ca      	b.n	8004e8e <_free_r+0x22>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	200013dc 	.word	0x200013dc

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 ff36 	bl	8005d7c <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 ff31 	bl	8005d7c <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d103      	bne.n	8004f26 <sbrk_aligned+0x26>
 8004f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f22:	4620      	mov	r0, r4
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d0f8      	beq.n	8004f22 <sbrk_aligned+0x22>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 ff22 	bl	8005d7c <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1f2      	bne.n	8004f22 <sbrk_aligned+0x22>
 8004f3c:	e7ef      	b.n	8004f1e <sbrk_aligned+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	200013d8 	.word	0x200013d8

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4606      	mov	r6, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d904      	bls.n	8004f6a <_malloc_r+0x26>
 8004f60:	230c      	movs	r3, #12
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005040 <_malloc_r+0xfc>
 8004f6e:	f000 f869 	bl	8005044 <__malloc_lock>
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	461c      	mov	r4, r3
 8004f78:	bb44      	cbnz	r4, 8004fcc <_malloc_r+0x88>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbf 	bl	8004f00 <sbrk_aligned>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	4604      	mov	r4, r0
 8004f86:	d158      	bne.n	800503a <_malloc_r+0xf6>
 8004f88:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d143      	bne.n	800501a <_malloc_r+0xd6>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d04b      	beq.n	800502e <_malloc_r+0xea>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	eb04 0903 	add.w	r9, r4, r3
 8004fa0:	f000 feec 	bl	8005d7c <_sbrk_r>
 8004fa4:	4581      	cmp	r9, r0
 8004fa6:	d142      	bne.n	800502e <_malloc_r+0xea>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa6 	bl	8004f00 <sbrk_aligned>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d03a      	beq.n	800502e <_malloc_r+0xea>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	442b      	add	r3, r5
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	bb62      	cbnz	r2, 8005020 <_malloc_r+0xdc>
 8004fc6:	f8c8 7000 	str.w	r7, [r8]
 8004fca:	e00f      	b.n	8004fec <_malloc_r+0xa8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d917      	bls.n	8005006 <_malloc_r+0xc2>
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	6059      	strne	r1, [r3, #4]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	bf08      	it	eq
 8004fe4:	f8c8 1000 	streq.w	r1, [r8]
 8004fe8:	5162      	str	r2, [r4, r5]
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f82f 	bl	8005050 <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac2      	subs	r2, r0, r3
 8004ffe:	bf1c      	itt	ne
 8005000:	1a1b      	subne	r3, r3, r0
 8005002:	50a3      	strne	r3, [r4, r2]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x22>
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	42a3      	cmp	r3, r4
 800500a:	bf0c      	ite	eq
 800500c:	f8c8 2000 	streq.w	r2, [r8]
 8005010:	605a      	strne	r2, [r3, #4]
 8005012:	e7eb      	b.n	8004fec <_malloc_r+0xa8>
 8005014:	4623      	mov	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7ae      	b.n	8004f78 <_malloc_r+0x34>
 800501a:	463c      	mov	r4, r7
 800501c:	687f      	ldr	r7, [r7, #4]
 800501e:	e7b6      	b.n	8004f8e <_malloc_r+0x4a>
 8005020:	461a      	mov	r2, r3
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	d1fb      	bne.n	8005020 <_malloc_r+0xdc>
 8005028:	2300      	movs	r3, #0
 800502a:	6053      	str	r3, [r2, #4]
 800502c:	e7de      	b.n	8004fec <_malloc_r+0xa8>
 800502e:	230c      	movs	r3, #12
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f80c 	bl	8005050 <__malloc_unlock>
 8005038:	e794      	b.n	8004f64 <_malloc_r+0x20>
 800503a:	6005      	str	r5, [r0, #0]
 800503c:	e7d6      	b.n	8004fec <_malloc_r+0xa8>
 800503e:	bf00      	nop
 8005040:	200013dc 	.word	0x200013dc

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bf0f 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	200013d4 	.word	0x200013d4

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff bf0a 	b.w	8004e6a <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	200013d4 	.word	0x200013d4

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	461f      	mov	r7, r3
 8005064:	42be      	cmp	r6, r7
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	4682      	mov	sl, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4690      	mov	r8, r2
 800506e:	d82d      	bhi.n	80050cc <__ssputs_r+0x70>
 8005070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005078:	d026      	beq.n	80050c8 <__ssputs_r+0x6c>
 800507a:	6965      	ldr	r5, [r4, #20]
 800507c:	6909      	ldr	r1, [r1, #16]
 800507e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005082:	eba3 0901 	sub.w	r9, r3, r1
 8005086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800508a:	1c7b      	adds	r3, r7, #1
 800508c:	444b      	add	r3, r9
 800508e:	106d      	asrs	r5, r5, #1
 8005090:	429d      	cmp	r5, r3
 8005092:	bf38      	it	cc
 8005094:	461d      	movcc	r5, r3
 8005096:	0553      	lsls	r3, r2, #21
 8005098:	d527      	bpl.n	80050ea <__ssputs_r+0x8e>
 800509a:	4629      	mov	r1, r5
 800509c:	f7ff ff52 	bl	8004f44 <_malloc_r>
 80050a0:	4606      	mov	r6, r0
 80050a2:	b360      	cbz	r0, 80050fe <__ssputs_r+0xa2>
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	464a      	mov	r2, r9
 80050a8:	f000 fe78 	bl	8005d9c <memcpy>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	6126      	str	r6, [r4, #16]
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	444e      	add	r6, r9
 80050be:	eba5 0509 	sub.w	r5, r5, r9
 80050c2:	6026      	str	r6, [r4, #0]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	463e      	mov	r6, r7
 80050c8:	42be      	cmp	r6, r7
 80050ca:	d900      	bls.n	80050ce <__ssputs_r+0x72>
 80050cc:	463e      	mov	r6, r7
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	4632      	mov	r2, r6
 80050d2:	4641      	mov	r1, r8
 80050d4:	f000 fe37 	bl	8005d46 <memmove>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	1b9b      	subs	r3, r3, r6
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4433      	add	r3, r6
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	462a      	mov	r2, r5
 80050ec:	f000 fe64 	bl	8005db8 <_realloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1e0      	bne.n	80050b8 <__ssputs_r+0x5c>
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	4650      	mov	r0, sl
 80050fa:	f7ff feb7 	bl	8004e6c <_free_r>
 80050fe:	230c      	movs	r3, #12
 8005100:	f8ca 3000 	str.w	r3, [sl]
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e7e9      	b.n	80050e6 <__ssputs_r+0x8a>
	...

08005114 <_svfiprintf_r>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4698      	mov	r8, r3
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	b09d      	sub	sp, #116	@ 0x74
 8005120:	4607      	mov	r7, r0
 8005122:	460d      	mov	r5, r1
 8005124:	4614      	mov	r4, r2
 8005126:	d510      	bpl.n	800514a <_svfiprintf_r+0x36>
 8005128:	690b      	ldr	r3, [r1, #16]
 800512a:	b973      	cbnz	r3, 800514a <_svfiprintf_r+0x36>
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	f7ff ff09 	bl	8004f44 <_malloc_r>
 8005132:	6028      	str	r0, [r5, #0]
 8005134:	6128      	str	r0, [r5, #16]
 8005136:	b930      	cbnz	r0, 8005146 <_svfiprintf_r+0x32>
 8005138:	230c      	movs	r3, #12
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b01d      	add	sp, #116	@ 0x74
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	2340      	movs	r3, #64	@ 0x40
 8005148:	616b      	str	r3, [r5, #20]
 800514a:	2300      	movs	r3, #0
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2320      	movs	r3, #32
 8005150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005154:	f8cd 800c 	str.w	r8, [sp, #12]
 8005158:	2330      	movs	r3, #48	@ 0x30
 800515a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f8 <_svfiprintf_r+0x1e4>
 800515e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005162:	f04f 0901 	mov.w	r9, #1
 8005166:	4623      	mov	r3, r4
 8005168:	469a      	mov	sl, r3
 800516a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516e:	b10a      	cbz	r2, 8005174 <_svfiprintf_r+0x60>
 8005170:	2a25      	cmp	r2, #37	@ 0x25
 8005172:	d1f9      	bne.n	8005168 <_svfiprintf_r+0x54>
 8005174:	ebba 0b04 	subs.w	fp, sl, r4
 8005178:	d00b      	beq.n	8005192 <_svfiprintf_r+0x7e>
 800517a:	465b      	mov	r3, fp
 800517c:	4622      	mov	r2, r4
 800517e:	4629      	mov	r1, r5
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ff6b 	bl	800505c <__ssputs_r>
 8005186:	3001      	adds	r0, #1
 8005188:	f000 80a7 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800518c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800518e:	445a      	add	r2, fp
 8005190:	9209      	str	r2, [sp, #36]	@ 0x24
 8005192:	f89a 3000 	ldrb.w	r3, [sl]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 809f 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b4:	4654      	mov	r4, sl
 80051b6:	2205      	movs	r2, #5
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	484e      	ldr	r0, [pc, #312]	@ (80052f8 <_svfiprintf_r+0x1e4>)
 80051be:	f7fb f80f 	bl	80001e0 <memchr>
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	b9d8      	cbnz	r0, 80051fe <_svfiprintf_r+0xea>
 80051c6:	06d0      	lsls	r0, r2, #27
 80051c8:	bf44      	itt	mi
 80051ca:	2320      	movmi	r3, #32
 80051cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d0:	0711      	lsls	r1, r2, #28
 80051d2:	bf44      	itt	mi
 80051d4:	232b      	movmi	r3, #43	@ 0x2b
 80051d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051da:	f89a 3000 	ldrb.w	r3, [sl]
 80051de:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e0:	d015      	beq.n	800520e <_svfiprintf_r+0xfa>
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4654      	mov	r4, sl
 80051e6:	2000      	movs	r0, #0
 80051e8:	f04f 0c0a 	mov.w	ip, #10
 80051ec:	4621      	mov	r1, r4
 80051ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f2:	3b30      	subs	r3, #48	@ 0x30
 80051f4:	2b09      	cmp	r3, #9
 80051f6:	d94b      	bls.n	8005290 <_svfiprintf_r+0x17c>
 80051f8:	b1b0      	cbz	r0, 8005228 <_svfiprintf_r+0x114>
 80051fa:	9207      	str	r2, [sp, #28]
 80051fc:	e014      	b.n	8005228 <_svfiprintf_r+0x114>
 80051fe:	eba0 0308 	sub.w	r3, r0, r8
 8005202:	fa09 f303 	lsl.w	r3, r9, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	46a2      	mov	sl, r4
 800520c:	e7d2      	b.n	80051b4 <_svfiprintf_r+0xa0>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfbb      	ittet	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	f042 0202 	orrlt.w	r2, r2, #2
 8005220:	9307      	strge	r3, [sp, #28]
 8005222:	9307      	strlt	r3, [sp, #28]
 8005224:	bfb8      	it	lt
 8005226:	9204      	strlt	r2, [sp, #16]
 8005228:	7823      	ldrb	r3, [r4, #0]
 800522a:	2b2e      	cmp	r3, #46	@ 0x2e
 800522c:	d10a      	bne.n	8005244 <_svfiprintf_r+0x130>
 800522e:	7863      	ldrb	r3, [r4, #1]
 8005230:	2b2a      	cmp	r3, #42	@ 0x2a
 8005232:	d132      	bne.n	800529a <_svfiprintf_r+0x186>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	9203      	str	r2, [sp, #12]
 800523c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005240:	3402      	adds	r4, #2
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005308 <_svfiprintf_r+0x1f4>
 8005248:	7821      	ldrb	r1, [r4, #0]
 800524a:	2203      	movs	r2, #3
 800524c:	4650      	mov	r0, sl
 800524e:	f7fa ffc7 	bl	80001e0 <memchr>
 8005252:	b138      	cbz	r0, 8005264 <_svfiprintf_r+0x150>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	eba0 000a 	sub.w	r0, r0, sl
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	4082      	lsls	r2, r0
 800525e:	4313      	orrs	r3, r2
 8005260:	3401      	adds	r4, #1
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005268:	4824      	ldr	r0, [pc, #144]	@ (80052fc <_svfiprintf_r+0x1e8>)
 800526a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800526e:	2206      	movs	r2, #6
 8005270:	f7fa ffb6 	bl	80001e0 <memchr>
 8005274:	2800      	cmp	r0, #0
 8005276:	d036      	beq.n	80052e6 <_svfiprintf_r+0x1d2>
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <_svfiprintf_r+0x1ec>)
 800527a:	bb1b      	cbnz	r3, 80052c4 <_svfiprintf_r+0x1b0>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	3307      	adds	r3, #7
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	3308      	adds	r3, #8
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528a:	4433      	add	r3, r6
 800528c:	9309      	str	r3, [sp, #36]	@ 0x24
 800528e:	e76a      	b.n	8005166 <_svfiprintf_r+0x52>
 8005290:	fb0c 3202 	mla	r2, ip, r2, r3
 8005294:	460c      	mov	r4, r1
 8005296:	2001      	movs	r0, #1
 8005298:	e7a8      	b.n	80051ec <_svfiprintf_r+0xd8>
 800529a:	2300      	movs	r3, #0
 800529c:	3401      	adds	r4, #1
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0c0a 	mov.w	ip, #10
 80052a6:	4620      	mov	r0, r4
 80052a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ac:	3a30      	subs	r2, #48	@ 0x30
 80052ae:	2a09      	cmp	r2, #9
 80052b0:	d903      	bls.n	80052ba <_svfiprintf_r+0x1a6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0c6      	beq.n	8005244 <_svfiprintf_r+0x130>
 80052b6:	9105      	str	r1, [sp, #20]
 80052b8:	e7c4      	b.n	8005244 <_svfiprintf_r+0x130>
 80052ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80052be:	4604      	mov	r4, r0
 80052c0:	2301      	movs	r3, #1
 80052c2:	e7f0      	b.n	80052a6 <_svfiprintf_r+0x192>
 80052c4:	ab03      	add	r3, sp, #12
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	462a      	mov	r2, r5
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052cc:	a904      	add	r1, sp, #16
 80052ce:	4638      	mov	r0, r7
 80052d0:	f3af 8000 	nop.w
 80052d4:	1c42      	adds	r2, r0, #1
 80052d6:	4606      	mov	r6, r0
 80052d8:	d1d6      	bne.n	8005288 <_svfiprintf_r+0x174>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	065b      	lsls	r3, r3, #25
 80052de:	f53f af2d 	bmi.w	800513c <_svfiprintf_r+0x28>
 80052e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e4:	e72c      	b.n	8005140 <_svfiprintf_r+0x2c>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	4638      	mov	r0, r7
 80052f2:	f000 fa49 	bl	8005788 <_printf_i>
 80052f6:	e7ed      	b.n	80052d4 <_svfiprintf_r+0x1c0>
 80052f8:	08006050 	.word	0x08006050
 80052fc:	0800605a 	.word	0x0800605a
 8005300:	00000000 	.word	0x00000000
 8005304:	0800505d 	.word	0x0800505d
 8005308:	08006056 	.word	0x08006056

0800530c <_sungetc_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	1c4b      	adds	r3, r1, #1
 8005310:	4614      	mov	r4, r2
 8005312:	d103      	bne.n	800531c <_sungetc_r+0x10>
 8005314:	f04f 35ff 	mov.w	r5, #4294967295
 8005318:	4628      	mov	r0, r5
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	8993      	ldrh	r3, [r2, #12]
 800531e:	f023 0320 	bic.w	r3, r3, #32
 8005322:	8193      	strh	r3, [r2, #12]
 8005324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005326:	6852      	ldr	r2, [r2, #4]
 8005328:	b2cd      	uxtb	r5, r1
 800532a:	b18b      	cbz	r3, 8005350 <_sungetc_r+0x44>
 800532c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800532e:	4293      	cmp	r3, r2
 8005330:	dd08      	ble.n	8005344 <_sungetc_r+0x38>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	f803 5c01 	strb.w	r5, [r3, #-1]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	3301      	adds	r3, #1
 8005340:	6063      	str	r3, [r4, #4]
 8005342:	e7e9      	b.n	8005318 <_sungetc_r+0xc>
 8005344:	4621      	mov	r1, r4
 8005346:	f000 fcc4 	bl	8005cd2 <__submore>
 800534a:	2800      	cmp	r0, #0
 800534c:	d0f1      	beq.n	8005332 <_sungetc_r+0x26>
 800534e:	e7e1      	b.n	8005314 <_sungetc_r+0x8>
 8005350:	6921      	ldr	r1, [r4, #16]
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	b151      	cbz	r1, 800536c <_sungetc_r+0x60>
 8005356:	4299      	cmp	r1, r3
 8005358:	d208      	bcs.n	800536c <_sungetc_r+0x60>
 800535a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800535e:	42a9      	cmp	r1, r5
 8005360:	d104      	bne.n	800536c <_sungetc_r+0x60>
 8005362:	3b01      	subs	r3, #1
 8005364:	3201      	adds	r2, #1
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	6062      	str	r2, [r4, #4]
 800536a:	e7d5      	b.n	8005318 <_sungetc_r+0xc>
 800536c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8005370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005374:	6363      	str	r3, [r4, #52]	@ 0x34
 8005376:	2303      	movs	r3, #3
 8005378:	63a3      	str	r3, [r4, #56]	@ 0x38
 800537a:	4623      	mov	r3, r4
 800537c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	2301      	movs	r3, #1
 8005384:	e7dc      	b.n	8005340 <_sungetc_r+0x34>

08005386 <__ssrefill_r>:
 8005386:	b510      	push	{r4, lr}
 8005388:	460c      	mov	r4, r1
 800538a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800538c:	b169      	cbz	r1, 80053aa <__ssrefill_r+0x24>
 800538e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005392:	4299      	cmp	r1, r3
 8005394:	d001      	beq.n	800539a <__ssrefill_r+0x14>
 8005396:	f7ff fd69 	bl	8004e6c <_free_r>
 800539a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	2000      	movs	r0, #0
 80053a0:	6360      	str	r0, [r4, #52]	@ 0x34
 80053a2:	b113      	cbz	r3, 80053aa <__ssrefill_r+0x24>
 80053a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	6923      	ldr	r3, [r4, #16]
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	6063      	str	r3, [r4, #4]
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	f04f 30ff 	mov.w	r0, #4294967295
 80053be:	e7f3      	b.n	80053a8 <__ssrefill_r+0x22>

080053c0 <__ssvfiscanf_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	460c      	mov	r4, r1
 80053c6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80053ca:	2100      	movs	r1, #0
 80053cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80053d0:	49a6      	ldr	r1, [pc, #664]	@ (800566c <__ssvfiscanf_r+0x2ac>)
 80053d2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80053d4:	f10d 0804 	add.w	r8, sp, #4
 80053d8:	49a5      	ldr	r1, [pc, #660]	@ (8005670 <__ssvfiscanf_r+0x2b0>)
 80053da:	4fa6      	ldr	r7, [pc, #664]	@ (8005674 <__ssvfiscanf_r+0x2b4>)
 80053dc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80053e0:	4606      	mov	r6, r0
 80053e2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	f892 9000 	ldrb.w	r9, [r2]
 80053ea:	f1b9 0f00 	cmp.w	r9, #0
 80053ee:	f000 8158 	beq.w	80056a2 <__ssvfiscanf_r+0x2e2>
 80053f2:	f817 3009 	ldrb.w	r3, [r7, r9]
 80053f6:	f013 0308 	ands.w	r3, r3, #8
 80053fa:	f102 0501 	add.w	r5, r2, #1
 80053fe:	d019      	beq.n	8005434 <__ssvfiscanf_r+0x74>
 8005400:	6863      	ldr	r3, [r4, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	dd0f      	ble.n	8005426 <__ssvfiscanf_r+0x66>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	5cba      	ldrb	r2, [r7, r2]
 800540c:	0712      	lsls	r2, r2, #28
 800540e:	d401      	bmi.n	8005414 <__ssvfiscanf_r+0x54>
 8005410:	462a      	mov	r2, r5
 8005412:	e7e8      	b.n	80053e6 <__ssvfiscanf_r+0x26>
 8005414:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005416:	3201      	adds	r2, #1
 8005418:	9245      	str	r2, [sp, #276]	@ 0x114
 800541a:	6862      	ldr	r2, [r4, #4]
 800541c:	3301      	adds	r3, #1
 800541e:	3a01      	subs	r2, #1
 8005420:	6062      	str	r2, [r4, #4]
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	e7ec      	b.n	8005400 <__ssvfiscanf_r+0x40>
 8005426:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005428:	4621      	mov	r1, r4
 800542a:	4630      	mov	r0, r6
 800542c:	4798      	blx	r3
 800542e:	2800      	cmp	r0, #0
 8005430:	d0e9      	beq.n	8005406 <__ssvfiscanf_r+0x46>
 8005432:	e7ed      	b.n	8005410 <__ssvfiscanf_r+0x50>
 8005434:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8005438:	f040 8085 	bne.w	8005546 <__ssvfiscanf_r+0x186>
 800543c:	9341      	str	r3, [sp, #260]	@ 0x104
 800543e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005440:	7853      	ldrb	r3, [r2, #1]
 8005442:	2b2a      	cmp	r3, #42	@ 0x2a
 8005444:	bf02      	ittt	eq
 8005446:	2310      	moveq	r3, #16
 8005448:	1c95      	addeq	r5, r2, #2
 800544a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800544c:	220a      	movs	r2, #10
 800544e:	46aa      	mov	sl, r5
 8005450:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005454:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005458:	2b09      	cmp	r3, #9
 800545a:	d91e      	bls.n	800549a <__ssvfiscanf_r+0xda>
 800545c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8005678 <__ssvfiscanf_r+0x2b8>
 8005460:	2203      	movs	r2, #3
 8005462:	4658      	mov	r0, fp
 8005464:	f7fa febc 	bl	80001e0 <memchr>
 8005468:	b138      	cbz	r0, 800547a <__ssvfiscanf_r+0xba>
 800546a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800546c:	eba0 000b 	sub.w	r0, r0, fp
 8005470:	2301      	movs	r3, #1
 8005472:	4083      	lsls	r3, r0
 8005474:	4313      	orrs	r3, r2
 8005476:	9341      	str	r3, [sp, #260]	@ 0x104
 8005478:	4655      	mov	r5, sl
 800547a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800547e:	2b78      	cmp	r3, #120	@ 0x78
 8005480:	d806      	bhi.n	8005490 <__ssvfiscanf_r+0xd0>
 8005482:	2b57      	cmp	r3, #87	@ 0x57
 8005484:	d810      	bhi.n	80054a8 <__ssvfiscanf_r+0xe8>
 8005486:	2b25      	cmp	r3, #37	@ 0x25
 8005488:	d05d      	beq.n	8005546 <__ssvfiscanf_r+0x186>
 800548a:	d857      	bhi.n	800553c <__ssvfiscanf_r+0x17c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d075      	beq.n	800557c <__ssvfiscanf_r+0x1bc>
 8005490:	2303      	movs	r3, #3
 8005492:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005494:	230a      	movs	r3, #10
 8005496:	9342      	str	r3, [sp, #264]	@ 0x108
 8005498:	e088      	b.n	80055ac <__ssvfiscanf_r+0x1ec>
 800549a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800549c:	fb02 1103 	mla	r1, r2, r3, r1
 80054a0:	3930      	subs	r1, #48	@ 0x30
 80054a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80054a4:	4655      	mov	r5, sl
 80054a6:	e7d2      	b.n	800544e <__ssvfiscanf_r+0x8e>
 80054a8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80054ac:	2a20      	cmp	r2, #32
 80054ae:	d8ef      	bhi.n	8005490 <__ssvfiscanf_r+0xd0>
 80054b0:	a101      	add	r1, pc, #4	@ (adr r1, 80054b8 <__ssvfiscanf_r+0xf8>)
 80054b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	0800558b 	.word	0x0800558b
 80054bc:	08005491 	.word	0x08005491
 80054c0:	08005491 	.word	0x08005491
 80054c4:	080055e5 	.word	0x080055e5
 80054c8:	08005491 	.word	0x08005491
 80054cc:	08005491 	.word	0x08005491
 80054d0:	08005491 	.word	0x08005491
 80054d4:	08005491 	.word	0x08005491
 80054d8:	08005491 	.word	0x08005491
 80054dc:	08005491 	.word	0x08005491
 80054e0:	08005491 	.word	0x08005491
 80054e4:	080055fb 	.word	0x080055fb
 80054e8:	080055e1 	.word	0x080055e1
 80054ec:	08005543 	.word	0x08005543
 80054f0:	08005543 	.word	0x08005543
 80054f4:	08005543 	.word	0x08005543
 80054f8:	08005491 	.word	0x08005491
 80054fc:	0800559d 	.word	0x0800559d
 8005500:	08005491 	.word	0x08005491
 8005504:	08005491 	.word	0x08005491
 8005508:	08005491 	.word	0x08005491
 800550c:	08005491 	.word	0x08005491
 8005510:	0800560b 	.word	0x0800560b
 8005514:	080055a5 	.word	0x080055a5
 8005518:	08005583 	.word	0x08005583
 800551c:	08005491 	.word	0x08005491
 8005520:	08005491 	.word	0x08005491
 8005524:	08005607 	.word	0x08005607
 8005528:	08005491 	.word	0x08005491
 800552c:	080055e1 	.word	0x080055e1
 8005530:	08005491 	.word	0x08005491
 8005534:	08005491 	.word	0x08005491
 8005538:	0800558b 	.word	0x0800558b
 800553c:	3b45      	subs	r3, #69	@ 0x45
 800553e:	2b02      	cmp	r3, #2
 8005540:	d8a6      	bhi.n	8005490 <__ssvfiscanf_r+0xd0>
 8005542:	2305      	movs	r3, #5
 8005544:	e031      	b.n	80055aa <__ssvfiscanf_r+0x1ea>
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	dd0d      	ble.n	8005568 <__ssvfiscanf_r+0x1a8>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	454a      	cmp	r2, r9
 8005552:	f040 80a6 	bne.w	80056a2 <__ssvfiscanf_r+0x2e2>
 8005556:	3301      	adds	r3, #1
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800555e:	3a01      	subs	r2, #1
 8005560:	3301      	adds	r3, #1
 8005562:	6062      	str	r2, [r4, #4]
 8005564:	9345      	str	r3, [sp, #276]	@ 0x114
 8005566:	e753      	b.n	8005410 <__ssvfiscanf_r+0x50>
 8005568:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800556a:	4621      	mov	r1, r4
 800556c:	4630      	mov	r0, r6
 800556e:	4798      	blx	r3
 8005570:	2800      	cmp	r0, #0
 8005572:	d0eb      	beq.n	800554c <__ssvfiscanf_r+0x18c>
 8005574:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005576:	2800      	cmp	r0, #0
 8005578:	f040 808b 	bne.w	8005692 <__ssvfiscanf_r+0x2d2>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e08b      	b.n	800569a <__ssvfiscanf_r+0x2da>
 8005582:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005584:	f042 0220 	orr.w	r2, r2, #32
 8005588:	9241      	str	r2, [sp, #260]	@ 0x104
 800558a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800558c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005590:	9241      	str	r2, [sp, #260]	@ 0x104
 8005592:	2210      	movs	r2, #16
 8005594:	2b6e      	cmp	r3, #110	@ 0x6e
 8005596:	9242      	str	r2, [sp, #264]	@ 0x108
 8005598:	d902      	bls.n	80055a0 <__ssvfiscanf_r+0x1e0>
 800559a:	e005      	b.n	80055a8 <__ssvfiscanf_r+0x1e8>
 800559c:	2300      	movs	r3, #0
 800559e:	9342      	str	r3, [sp, #264]	@ 0x108
 80055a0:	2303      	movs	r3, #3
 80055a2:	e002      	b.n	80055aa <__ssvfiscanf_r+0x1ea>
 80055a4:	2308      	movs	r3, #8
 80055a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80055a8:	2304      	movs	r3, #4
 80055aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dd39      	ble.n	8005626 <__ssvfiscanf_r+0x266>
 80055b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80055b4:	0659      	lsls	r1, r3, #25
 80055b6:	d404      	bmi.n	80055c2 <__ssvfiscanf_r+0x202>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	5cba      	ldrb	r2, [r7, r2]
 80055be:	0712      	lsls	r2, r2, #28
 80055c0:	d438      	bmi.n	8005634 <__ssvfiscanf_r+0x274>
 80055c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	dc47      	bgt.n	8005658 <__ssvfiscanf_r+0x298>
 80055c8:	466b      	mov	r3, sp
 80055ca:	4622      	mov	r2, r4
 80055cc:	a941      	add	r1, sp, #260	@ 0x104
 80055ce:	4630      	mov	r0, r6
 80055d0:	f000 f9f8 	bl	80059c4 <_scanf_chars>
 80055d4:	2801      	cmp	r0, #1
 80055d6:	d064      	beq.n	80056a2 <__ssvfiscanf_r+0x2e2>
 80055d8:	2802      	cmp	r0, #2
 80055da:	f47f af19 	bne.w	8005410 <__ssvfiscanf_r+0x50>
 80055de:	e7c9      	b.n	8005574 <__ssvfiscanf_r+0x1b4>
 80055e0:	220a      	movs	r2, #10
 80055e2:	e7d7      	b.n	8005594 <__ssvfiscanf_r+0x1d4>
 80055e4:	4629      	mov	r1, r5
 80055e6:	4640      	mov	r0, r8
 80055e8:	f000 fb3a 	bl	8005c60 <__sccl>
 80055ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80055ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80055f4:	4605      	mov	r5, r0
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7d7      	b.n	80055aa <__ssvfiscanf_r+0x1ea>
 80055fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80055fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005600:	9341      	str	r3, [sp, #260]	@ 0x104
 8005602:	2300      	movs	r3, #0
 8005604:	e7d1      	b.n	80055aa <__ssvfiscanf_r+0x1ea>
 8005606:	2302      	movs	r3, #2
 8005608:	e7cf      	b.n	80055aa <__ssvfiscanf_r+0x1ea>
 800560a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800560c:	06c3      	lsls	r3, r0, #27
 800560e:	f53f aeff 	bmi.w	8005410 <__ssvfiscanf_r+0x50>
 8005612:	9b00      	ldr	r3, [sp, #0]
 8005614:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005616:	1d19      	adds	r1, r3, #4
 8005618:	9100      	str	r1, [sp, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	07c0      	lsls	r0, r0, #31
 800561e:	bf4c      	ite	mi
 8005620:	801a      	strhmi	r2, [r3, #0]
 8005622:	601a      	strpl	r2, [r3, #0]
 8005624:	e6f4      	b.n	8005410 <__ssvfiscanf_r+0x50>
 8005626:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005628:	4621      	mov	r1, r4
 800562a:	4630      	mov	r0, r6
 800562c:	4798      	blx	r3
 800562e:	2800      	cmp	r0, #0
 8005630:	d0bf      	beq.n	80055b2 <__ssvfiscanf_r+0x1f2>
 8005632:	e79f      	b.n	8005574 <__ssvfiscanf_r+0x1b4>
 8005634:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005636:	3201      	adds	r2, #1
 8005638:	9245      	str	r2, [sp, #276]	@ 0x114
 800563a:	6862      	ldr	r2, [r4, #4]
 800563c:	3a01      	subs	r2, #1
 800563e:	2a00      	cmp	r2, #0
 8005640:	6062      	str	r2, [r4, #4]
 8005642:	dd02      	ble.n	800564a <__ssvfiscanf_r+0x28a>
 8005644:	3301      	adds	r3, #1
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	e7b6      	b.n	80055b8 <__ssvfiscanf_r+0x1f8>
 800564a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800564c:	4621      	mov	r1, r4
 800564e:	4630      	mov	r0, r6
 8005650:	4798      	blx	r3
 8005652:	2800      	cmp	r0, #0
 8005654:	d0b0      	beq.n	80055b8 <__ssvfiscanf_r+0x1f8>
 8005656:	e78d      	b.n	8005574 <__ssvfiscanf_r+0x1b4>
 8005658:	2b04      	cmp	r3, #4
 800565a:	dc0f      	bgt.n	800567c <__ssvfiscanf_r+0x2bc>
 800565c:	466b      	mov	r3, sp
 800565e:	4622      	mov	r2, r4
 8005660:	a941      	add	r1, sp, #260	@ 0x104
 8005662:	4630      	mov	r0, r6
 8005664:	f000 fa08 	bl	8005a78 <_scanf_i>
 8005668:	e7b4      	b.n	80055d4 <__ssvfiscanf_r+0x214>
 800566a:	bf00      	nop
 800566c:	0800530d 	.word	0x0800530d
 8005670:	08005387 	.word	0x08005387
 8005674:	0800609f 	.word	0x0800609f
 8005678:	08006056 	.word	0x08006056
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <__ssvfiscanf_r+0x2e8>)
 800567e:	2b00      	cmp	r3, #0
 8005680:	f43f aec6 	beq.w	8005410 <__ssvfiscanf_r+0x50>
 8005684:	466b      	mov	r3, sp
 8005686:	4622      	mov	r2, r4
 8005688:	a941      	add	r1, sp, #260	@ 0x104
 800568a:	4630      	mov	r0, r6
 800568c:	f3af 8000 	nop.w
 8005690:	e7a0      	b.n	80055d4 <__ssvfiscanf_r+0x214>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	065b      	lsls	r3, r3, #25
 8005696:	f53f af71 	bmi.w	800557c <__ssvfiscanf_r+0x1bc>
 800569a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80056a4:	e7f9      	b.n	800569a <__ssvfiscanf_r+0x2da>
 80056a6:	bf00      	nop
 80056a8:	00000000 	.word	0x00000000

080056ac <_printf_common>:
 80056ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	4616      	mov	r6, r2
 80056b2:	4698      	mov	r8, r3
 80056b4:	688a      	ldr	r2, [r1, #8]
 80056b6:	690b      	ldr	r3, [r1, #16]
 80056b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056bc:	4293      	cmp	r3, r2
 80056be:	bfb8      	it	lt
 80056c0:	4613      	movlt	r3, r2
 80056c2:	6033      	str	r3, [r6, #0]
 80056c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056c8:	4607      	mov	r7, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	b10a      	cbz	r2, 80056d2 <_printf_common+0x26>
 80056ce:	3301      	adds	r3, #1
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	0699      	lsls	r1, r3, #26
 80056d6:	bf42      	ittt	mi
 80056d8:	6833      	ldrmi	r3, [r6, #0]
 80056da:	3302      	addmi	r3, #2
 80056dc:	6033      	strmi	r3, [r6, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	f015 0506 	ands.w	r5, r5, #6
 80056e4:	d106      	bne.n	80056f4 <_printf_common+0x48>
 80056e6:	f104 0a19 	add.w	sl, r4, #25
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	6832      	ldr	r2, [r6, #0]
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc26      	bgt.n	8005742 <_printf_common+0x96>
 80056f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056f8:	6822      	ldr	r2, [r4, #0]
 80056fa:	3b00      	subs	r3, #0
 80056fc:	bf18      	it	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	0692      	lsls	r2, r2, #26
 8005702:	d42b      	bmi.n	800575c <_printf_common+0xb0>
 8005704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005708:	4641      	mov	r1, r8
 800570a:	4638      	mov	r0, r7
 800570c:	47c8      	blx	r9
 800570e:	3001      	adds	r0, #1
 8005710:	d01e      	beq.n	8005750 <_printf_common+0xa4>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	f003 0306 	and.w	r3, r3, #6
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf02      	ittt	eq
 800571e:	68e5      	ldreq	r5, [r4, #12]
 8005720:	6833      	ldreq	r3, [r6, #0]
 8005722:	1aed      	subeq	r5, r5, r3
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	bf0c      	ite	eq
 8005728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800572c:	2500      	movne	r5, #0
 800572e:	4293      	cmp	r3, r2
 8005730:	bfc4      	itt	gt
 8005732:	1a9b      	subgt	r3, r3, r2
 8005734:	18ed      	addgt	r5, r5, r3
 8005736:	2600      	movs	r6, #0
 8005738:	341a      	adds	r4, #26
 800573a:	42b5      	cmp	r5, r6
 800573c:	d11a      	bne.n	8005774 <_printf_common+0xc8>
 800573e:	2000      	movs	r0, #0
 8005740:	e008      	b.n	8005754 <_printf_common+0xa8>
 8005742:	2301      	movs	r3, #1
 8005744:	4652      	mov	r2, sl
 8005746:	4641      	mov	r1, r8
 8005748:	4638      	mov	r0, r7
 800574a:	47c8      	blx	r9
 800574c:	3001      	adds	r0, #1
 800574e:	d103      	bne.n	8005758 <_printf_common+0xac>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	3501      	adds	r5, #1
 800575a:	e7c6      	b.n	80056ea <_printf_common+0x3e>
 800575c:	18e1      	adds	r1, r4, r3
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	2030      	movs	r0, #48	@ 0x30
 8005762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005766:	4422      	add	r2, r4
 8005768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800576c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005770:	3302      	adds	r3, #2
 8005772:	e7c7      	b.n	8005704 <_printf_common+0x58>
 8005774:	2301      	movs	r3, #1
 8005776:	4622      	mov	r2, r4
 8005778:	4641      	mov	r1, r8
 800577a:	4638      	mov	r0, r7
 800577c:	47c8      	blx	r9
 800577e:	3001      	adds	r0, #1
 8005780:	d0e6      	beq.n	8005750 <_printf_common+0xa4>
 8005782:	3601      	adds	r6, #1
 8005784:	e7d9      	b.n	800573a <_printf_common+0x8e>
	...

08005788 <_printf_i>:
 8005788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	7e0f      	ldrb	r7, [r1, #24]
 800578e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005790:	2f78      	cmp	r7, #120	@ 0x78
 8005792:	4691      	mov	r9, r2
 8005794:	4680      	mov	r8, r0
 8005796:	460c      	mov	r4, r1
 8005798:	469a      	mov	sl, r3
 800579a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800579e:	d807      	bhi.n	80057b0 <_printf_i+0x28>
 80057a0:	2f62      	cmp	r7, #98	@ 0x62
 80057a2:	d80a      	bhi.n	80057ba <_printf_i+0x32>
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	f000 80d1 	beq.w	800594c <_printf_i+0x1c4>
 80057aa:	2f58      	cmp	r7, #88	@ 0x58
 80057ac:	f000 80b8 	beq.w	8005920 <_printf_i+0x198>
 80057b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057b8:	e03a      	b.n	8005830 <_printf_i+0xa8>
 80057ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057be:	2b15      	cmp	r3, #21
 80057c0:	d8f6      	bhi.n	80057b0 <_printf_i+0x28>
 80057c2:	a101      	add	r1, pc, #4	@ (adr r1, 80057c8 <_printf_i+0x40>)
 80057c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c8:	08005821 	.word	0x08005821
 80057cc:	08005835 	.word	0x08005835
 80057d0:	080057b1 	.word	0x080057b1
 80057d4:	080057b1 	.word	0x080057b1
 80057d8:	080057b1 	.word	0x080057b1
 80057dc:	080057b1 	.word	0x080057b1
 80057e0:	08005835 	.word	0x08005835
 80057e4:	080057b1 	.word	0x080057b1
 80057e8:	080057b1 	.word	0x080057b1
 80057ec:	080057b1 	.word	0x080057b1
 80057f0:	080057b1 	.word	0x080057b1
 80057f4:	08005933 	.word	0x08005933
 80057f8:	0800585f 	.word	0x0800585f
 80057fc:	080058ed 	.word	0x080058ed
 8005800:	080057b1 	.word	0x080057b1
 8005804:	080057b1 	.word	0x080057b1
 8005808:	08005955 	.word	0x08005955
 800580c:	080057b1 	.word	0x080057b1
 8005810:	0800585f 	.word	0x0800585f
 8005814:	080057b1 	.word	0x080057b1
 8005818:	080057b1 	.word	0x080057b1
 800581c:	080058f5 	.word	0x080058f5
 8005820:	6833      	ldr	r3, [r6, #0]
 8005822:	1d1a      	adds	r2, r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6032      	str	r2, [r6, #0]
 8005828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800582c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005830:	2301      	movs	r3, #1
 8005832:	e09c      	b.n	800596e <_printf_i+0x1e6>
 8005834:	6833      	ldr	r3, [r6, #0]
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	1d19      	adds	r1, r3, #4
 800583a:	6031      	str	r1, [r6, #0]
 800583c:	0606      	lsls	r6, r0, #24
 800583e:	d501      	bpl.n	8005844 <_printf_i+0xbc>
 8005840:	681d      	ldr	r5, [r3, #0]
 8005842:	e003      	b.n	800584c <_printf_i+0xc4>
 8005844:	0645      	lsls	r5, r0, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0xb8>
 8005848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800584c:	2d00      	cmp	r5, #0
 800584e:	da03      	bge.n	8005858 <_printf_i+0xd0>
 8005850:	232d      	movs	r3, #45	@ 0x2d
 8005852:	426d      	negs	r5, r5
 8005854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005858:	4858      	ldr	r0, [pc, #352]	@ (80059bc <_printf_i+0x234>)
 800585a:	230a      	movs	r3, #10
 800585c:	e011      	b.n	8005882 <_printf_i+0xfa>
 800585e:	6821      	ldr	r1, [r4, #0]
 8005860:	6833      	ldr	r3, [r6, #0]
 8005862:	0608      	lsls	r0, r1, #24
 8005864:	f853 5b04 	ldr.w	r5, [r3], #4
 8005868:	d402      	bmi.n	8005870 <_printf_i+0xe8>
 800586a:	0649      	lsls	r1, r1, #25
 800586c:	bf48      	it	mi
 800586e:	b2ad      	uxthmi	r5, r5
 8005870:	2f6f      	cmp	r7, #111	@ 0x6f
 8005872:	4852      	ldr	r0, [pc, #328]	@ (80059bc <_printf_i+0x234>)
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	bf14      	ite	ne
 8005878:	230a      	movne	r3, #10
 800587a:	2308      	moveq	r3, #8
 800587c:	2100      	movs	r1, #0
 800587e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005882:	6866      	ldr	r6, [r4, #4]
 8005884:	60a6      	str	r6, [r4, #8]
 8005886:	2e00      	cmp	r6, #0
 8005888:	db05      	blt.n	8005896 <_printf_i+0x10e>
 800588a:	6821      	ldr	r1, [r4, #0]
 800588c:	432e      	orrs	r6, r5
 800588e:	f021 0104 	bic.w	r1, r1, #4
 8005892:	6021      	str	r1, [r4, #0]
 8005894:	d04b      	beq.n	800592e <_printf_i+0x1a6>
 8005896:	4616      	mov	r6, r2
 8005898:	fbb5 f1f3 	udiv	r1, r5, r3
 800589c:	fb03 5711 	mls	r7, r3, r1, r5
 80058a0:	5dc7      	ldrb	r7, [r0, r7]
 80058a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058a6:	462f      	mov	r7, r5
 80058a8:	42bb      	cmp	r3, r7
 80058aa:	460d      	mov	r5, r1
 80058ac:	d9f4      	bls.n	8005898 <_printf_i+0x110>
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d10b      	bne.n	80058ca <_printf_i+0x142>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	07df      	lsls	r7, r3, #31
 80058b6:	d508      	bpl.n	80058ca <_printf_i+0x142>
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	6861      	ldr	r1, [r4, #4]
 80058bc:	4299      	cmp	r1, r3
 80058be:	bfde      	ittt	le
 80058c0:	2330      	movle	r3, #48	@ 0x30
 80058c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058ca:	1b92      	subs	r2, r2, r6
 80058cc:	6122      	str	r2, [r4, #16]
 80058ce:	f8cd a000 	str.w	sl, [sp]
 80058d2:	464b      	mov	r3, r9
 80058d4:	aa03      	add	r2, sp, #12
 80058d6:	4621      	mov	r1, r4
 80058d8:	4640      	mov	r0, r8
 80058da:	f7ff fee7 	bl	80056ac <_printf_common>
 80058de:	3001      	adds	r0, #1
 80058e0:	d14a      	bne.n	8005978 <_printf_i+0x1f0>
 80058e2:	f04f 30ff 	mov.w	r0, #4294967295
 80058e6:	b004      	add	sp, #16
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	4832      	ldr	r0, [pc, #200]	@ (80059c0 <_printf_i+0x238>)
 80058f6:	2778      	movs	r7, #120	@ 0x78
 80058f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	061f      	lsls	r7, r3, #24
 8005902:	f851 5b04 	ldr.w	r5, [r1], #4
 8005906:	d402      	bmi.n	800590e <_printf_i+0x186>
 8005908:	065f      	lsls	r7, r3, #25
 800590a:	bf48      	it	mi
 800590c:	b2ad      	uxthmi	r5, r5
 800590e:	6031      	str	r1, [r6, #0]
 8005910:	07d9      	lsls	r1, r3, #31
 8005912:	bf44      	itt	mi
 8005914:	f043 0320 	orrmi.w	r3, r3, #32
 8005918:	6023      	strmi	r3, [r4, #0]
 800591a:	b11d      	cbz	r5, 8005924 <_printf_i+0x19c>
 800591c:	2310      	movs	r3, #16
 800591e:	e7ad      	b.n	800587c <_printf_i+0xf4>
 8005920:	4826      	ldr	r0, [pc, #152]	@ (80059bc <_printf_i+0x234>)
 8005922:	e7e9      	b.n	80058f8 <_printf_i+0x170>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	e7f6      	b.n	800591c <_printf_i+0x194>
 800592e:	4616      	mov	r6, r2
 8005930:	e7bd      	b.n	80058ae <_printf_i+0x126>
 8005932:	6833      	ldr	r3, [r6, #0]
 8005934:	6825      	ldr	r5, [r4, #0]
 8005936:	6961      	ldr	r1, [r4, #20]
 8005938:	1d18      	adds	r0, r3, #4
 800593a:	6030      	str	r0, [r6, #0]
 800593c:	062e      	lsls	r6, r5, #24
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	d501      	bpl.n	8005946 <_printf_i+0x1be>
 8005942:	6019      	str	r1, [r3, #0]
 8005944:	e002      	b.n	800594c <_printf_i+0x1c4>
 8005946:	0668      	lsls	r0, r5, #25
 8005948:	d5fb      	bpl.n	8005942 <_printf_i+0x1ba>
 800594a:	8019      	strh	r1, [r3, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	4616      	mov	r6, r2
 8005952:	e7bc      	b.n	80058ce <_printf_i+0x146>
 8005954:	6833      	ldr	r3, [r6, #0]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	6032      	str	r2, [r6, #0]
 800595a:	681e      	ldr	r6, [r3, #0]
 800595c:	6862      	ldr	r2, [r4, #4]
 800595e:	2100      	movs	r1, #0
 8005960:	4630      	mov	r0, r6
 8005962:	f7fa fc3d 	bl	80001e0 <memchr>
 8005966:	b108      	cbz	r0, 800596c <_printf_i+0x1e4>
 8005968:	1b80      	subs	r0, r0, r6
 800596a:	6060      	str	r0, [r4, #4]
 800596c:	6863      	ldr	r3, [r4, #4]
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	2300      	movs	r3, #0
 8005972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005976:	e7aa      	b.n	80058ce <_printf_i+0x146>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	4632      	mov	r2, r6
 800597c:	4649      	mov	r1, r9
 800597e:	4640      	mov	r0, r8
 8005980:	47d0      	blx	sl
 8005982:	3001      	adds	r0, #1
 8005984:	d0ad      	beq.n	80058e2 <_printf_i+0x15a>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	079b      	lsls	r3, r3, #30
 800598a:	d413      	bmi.n	80059b4 <_printf_i+0x22c>
 800598c:	68e0      	ldr	r0, [r4, #12]
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	4298      	cmp	r0, r3
 8005992:	bfb8      	it	lt
 8005994:	4618      	movlt	r0, r3
 8005996:	e7a6      	b.n	80058e6 <_printf_i+0x15e>
 8005998:	2301      	movs	r3, #1
 800599a:	4632      	mov	r2, r6
 800599c:	4649      	mov	r1, r9
 800599e:	4640      	mov	r0, r8
 80059a0:	47d0      	blx	sl
 80059a2:	3001      	adds	r0, #1
 80059a4:	d09d      	beq.n	80058e2 <_printf_i+0x15a>
 80059a6:	3501      	adds	r5, #1
 80059a8:	68e3      	ldr	r3, [r4, #12]
 80059aa:	9903      	ldr	r1, [sp, #12]
 80059ac:	1a5b      	subs	r3, r3, r1
 80059ae:	42ab      	cmp	r3, r5
 80059b0:	dcf2      	bgt.n	8005998 <_printf_i+0x210>
 80059b2:	e7eb      	b.n	800598c <_printf_i+0x204>
 80059b4:	2500      	movs	r5, #0
 80059b6:	f104 0619 	add.w	r6, r4, #25
 80059ba:	e7f5      	b.n	80059a8 <_printf_i+0x220>
 80059bc:	08006061 	.word	0x08006061
 80059c0:	08006072 	.word	0x08006072

080059c4 <_scanf_chars>:
 80059c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c8:	4615      	mov	r5, r2
 80059ca:	688a      	ldr	r2, [r1, #8]
 80059cc:	4680      	mov	r8, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b932      	cbnz	r2, 80059e0 <_scanf_chars+0x1c>
 80059d2:	698a      	ldr	r2, [r1, #24]
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	bf14      	ite	ne
 80059d8:	f04f 32ff 	movne.w	r2, #4294967295
 80059dc:	2201      	moveq	r2, #1
 80059de:	608a      	str	r2, [r1, #8]
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005a74 <_scanf_chars+0xb0>
 80059e6:	06d1      	lsls	r1, r2, #27
 80059e8:	bf5f      	itttt	pl
 80059ea:	681a      	ldrpl	r2, [r3, #0]
 80059ec:	1d11      	addpl	r1, r2, #4
 80059ee:	6019      	strpl	r1, [r3, #0]
 80059f0:	6816      	ldrpl	r6, [r2, #0]
 80059f2:	2700      	movs	r7, #0
 80059f4:	69a0      	ldr	r0, [r4, #24]
 80059f6:	b188      	cbz	r0, 8005a1c <_scanf_chars+0x58>
 80059f8:	2801      	cmp	r0, #1
 80059fa:	d107      	bne.n	8005a0c <_scanf_chars+0x48>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	781a      	ldrb	r2, [r3, #0]
 8005a00:	6963      	ldr	r3, [r4, #20]
 8005a02:	5c9b      	ldrb	r3, [r3, r2]
 8005a04:	b953      	cbnz	r3, 8005a1c <_scanf_chars+0x58>
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	d031      	beq.n	8005a6e <_scanf_chars+0xaa>
 8005a0a:	e022      	b.n	8005a52 <_scanf_chars+0x8e>
 8005a0c:	2802      	cmp	r0, #2
 8005a0e:	d120      	bne.n	8005a52 <_scanf_chars+0x8e>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	d41a      	bmi.n	8005a52 <_scanf_chars+0x8e>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	06da      	lsls	r2, r3, #27
 8005a20:	bf5e      	ittt	pl
 8005a22:	682b      	ldrpl	r3, [r5, #0]
 8005a24:	781b      	ldrbpl	r3, [r3, #0]
 8005a26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005a2a:	682a      	ldr	r2, [r5, #0]
 8005a2c:	686b      	ldr	r3, [r5, #4]
 8005a2e:	3201      	adds	r2, #1
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	68a2      	ldr	r2, [r4, #8]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	3a01      	subs	r2, #1
 8005a38:	606b      	str	r3, [r5, #4]
 8005a3a:	3701      	adds	r7, #1
 8005a3c:	60a2      	str	r2, [r4, #8]
 8005a3e:	b142      	cbz	r2, 8005a52 <_scanf_chars+0x8e>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dcd7      	bgt.n	80059f4 <_scanf_chars+0x30>
 8005a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	4798      	blx	r3
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d0d0      	beq.n	80059f4 <_scanf_chars+0x30>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	f013 0310 	ands.w	r3, r3, #16
 8005a58:	d105      	bne.n	8005a66 <_scanf_chars+0xa2>
 8005a5a:	68e2      	ldr	r2, [r4, #12]
 8005a5c:	3201      	adds	r2, #1
 8005a5e:	60e2      	str	r2, [r4, #12]
 8005a60:	69a2      	ldr	r2, [r4, #24]
 8005a62:	b102      	cbz	r2, 8005a66 <_scanf_chars+0xa2>
 8005a64:	7033      	strb	r3, [r6, #0]
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	443b      	add	r3, r7
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a72:	bf00      	nop
 8005a74:	0800609f 	.word	0x0800609f

08005a78 <_scanf_i>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4698      	mov	r8, r3
 8005a7e:	4b74      	ldr	r3, [pc, #464]	@ (8005c50 <_scanf_i+0x1d8>)
 8005a80:	460c      	mov	r4, r1
 8005a82:	4682      	mov	sl, r0
 8005a84:	4616      	mov	r6, r2
 8005a86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a92:	4b70      	ldr	r3, [pc, #448]	@ (8005c54 <_scanf_i+0x1dc>)
 8005a94:	69a1      	ldr	r1, [r4, #24]
 8005a96:	4a70      	ldr	r2, [pc, #448]	@ (8005c58 <_scanf_i+0x1e0>)
 8005a98:	2903      	cmp	r1, #3
 8005a9a:	bf08      	it	eq
 8005a9c:	461a      	moveq	r2, r3
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	9201      	str	r2, [sp, #4]
 8005aa2:	1e5a      	subs	r2, r3, #1
 8005aa4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005aa8:	bf88      	it	hi
 8005aaa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005aae:	4627      	mov	r7, r4
 8005ab0:	bf82      	ittt	hi
 8005ab2:	eb03 0905 	addhi.w	r9, r3, r5
 8005ab6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005aba:	60a3      	strhi	r3, [r4, #8]
 8005abc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005ac0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005ac4:	bf98      	it	ls
 8005ac6:	f04f 0900 	movls.w	r9, #0
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	463d      	mov	r5, r7
 8005ace:	f04f 0b00 	mov.w	fp, #0
 8005ad2:	6831      	ldr	r1, [r6, #0]
 8005ad4:	ab03      	add	r3, sp, #12
 8005ad6:	7809      	ldrb	r1, [r1, #0]
 8005ad8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f7fa fb7f 	bl	80001e0 <memchr>
 8005ae2:	b328      	cbz	r0, 8005b30 <_scanf_i+0xb8>
 8005ae4:	f1bb 0f01 	cmp.w	fp, #1
 8005ae8:	d159      	bne.n	8005b9e <_scanf_i+0x126>
 8005aea:	6862      	ldr	r2, [r4, #4]
 8005aec:	b92a      	cbnz	r2, 8005afa <_scanf_i+0x82>
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	2108      	movs	r1, #8
 8005af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af6:	6061      	str	r1, [r4, #4]
 8005af8:	6022      	str	r2, [r4, #0]
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005b00:	6022      	str	r2, [r4, #0]
 8005b02:	68a2      	ldr	r2, [r4, #8]
 8005b04:	1e51      	subs	r1, r2, #1
 8005b06:	60a1      	str	r1, [r4, #8]
 8005b08:	b192      	cbz	r2, 8005b30 <_scanf_i+0xb8>
 8005b0a:	6832      	ldr	r2, [r6, #0]
 8005b0c:	1c51      	adds	r1, r2, #1
 8005b0e:	6031      	str	r1, [r6, #0]
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	f805 2b01 	strb.w	r2, [r5], #1
 8005b16:	6872      	ldr	r2, [r6, #4]
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	6072      	str	r2, [r6, #4]
 8005b1e:	dc07      	bgt.n	8005b30 <_scanf_i+0xb8>
 8005b20:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005b24:	4631      	mov	r1, r6
 8005b26:	4650      	mov	r0, sl
 8005b28:	4790      	blx	r2
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f040 8085 	bne.w	8005c3a <_scanf_i+0x1c2>
 8005b30:	f10b 0b01 	add.w	fp, fp, #1
 8005b34:	f1bb 0f03 	cmp.w	fp, #3
 8005b38:	d1cb      	bne.n	8005ad2 <_scanf_i+0x5a>
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	b90b      	cbnz	r3, 8005b42 <_scanf_i+0xca>
 8005b3e:	230a      	movs	r3, #10
 8005b40:	6063      	str	r3, [r4, #4]
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	4945      	ldr	r1, [pc, #276]	@ (8005c5c <_scanf_i+0x1e4>)
 8005b46:	6960      	ldr	r0, [r4, #20]
 8005b48:	1ac9      	subs	r1, r1, r3
 8005b4a:	f000 f889 	bl	8005c60 <__sccl>
 8005b4e:	f04f 0b00 	mov.w	fp, #0
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d03d      	beq.n	8005bd6 <_scanf_i+0x15e>
 8005b5a:	6831      	ldr	r1, [r6, #0]
 8005b5c:	6960      	ldr	r0, [r4, #20]
 8005b5e:	f891 c000 	ldrb.w	ip, [r1]
 8005b62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d035      	beq.n	8005bd6 <_scanf_i+0x15e>
 8005b6a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005b6e:	d124      	bne.n	8005bba <_scanf_i+0x142>
 8005b70:	0510      	lsls	r0, r2, #20
 8005b72:	d522      	bpl.n	8005bba <_scanf_i+0x142>
 8005b74:	f10b 0b01 	add.w	fp, fp, #1
 8005b78:	f1b9 0f00 	cmp.w	r9, #0
 8005b7c:	d003      	beq.n	8005b86 <_scanf_i+0x10e>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	6873      	ldr	r3, [r6, #4]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	6073      	str	r3, [r6, #4]
 8005b8e:	dd1b      	ble.n	8005bc8 <_scanf_i+0x150>
 8005b90:	6833      	ldr	r3, [r6, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	68a3      	ldr	r3, [r4, #8]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	60a3      	str	r3, [r4, #8]
 8005b9c:	e7d9      	b.n	8005b52 <_scanf_i+0xda>
 8005b9e:	f1bb 0f02 	cmp.w	fp, #2
 8005ba2:	d1ae      	bne.n	8005b02 <_scanf_i+0x8a>
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005baa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005bae:	d1c4      	bne.n	8005b3a <_scanf_i+0xc2>
 8005bb0:	2110      	movs	r1, #16
 8005bb2:	6061      	str	r1, [r4, #4]
 8005bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb8:	e7a2      	b.n	8005b00 <_scanf_i+0x88>
 8005bba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005bbe:	6022      	str	r2, [r4, #0]
 8005bc0:	780b      	ldrb	r3, [r1, #0]
 8005bc2:	f805 3b01 	strb.w	r3, [r5], #1
 8005bc6:	e7de      	b.n	8005b86 <_scanf_i+0x10e>
 8005bc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4650      	mov	r0, sl
 8005bd0:	4798      	blx	r3
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d0df      	beq.n	8005b96 <_scanf_i+0x11e>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	05d9      	lsls	r1, r3, #23
 8005bda:	d50d      	bpl.n	8005bf8 <_scanf_i+0x180>
 8005bdc:	42bd      	cmp	r5, r7
 8005bde:	d909      	bls.n	8005bf4 <_scanf_i+0x17c>
 8005be0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005be8:	4632      	mov	r2, r6
 8005bea:	4650      	mov	r0, sl
 8005bec:	4798      	blx	r3
 8005bee:	f105 39ff 	add.w	r9, r5, #4294967295
 8005bf2:	464d      	mov	r5, r9
 8005bf4:	42bd      	cmp	r5, r7
 8005bf6:	d028      	beq.n	8005c4a <_scanf_i+0x1d2>
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	f012 0210 	ands.w	r2, r2, #16
 8005bfe:	d113      	bne.n	8005c28 <_scanf_i+0x1b0>
 8005c00:	702a      	strb	r2, [r5, #0]
 8005c02:	6863      	ldr	r3, [r4, #4]
 8005c04:	9e01      	ldr	r6, [sp, #4]
 8005c06:	4639      	mov	r1, r7
 8005c08:	4650      	mov	r0, sl
 8005c0a:	47b0      	blx	r6
 8005c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c10:	6821      	ldr	r1, [r4, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	f8c8 2000 	str.w	r2, [r8]
 8005c18:	f011 0f20 	tst.w	r1, #32
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	d00f      	beq.n	8005c40 <_scanf_i+0x1c8>
 8005c20:	6018      	str	r0, [r3, #0]
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60e3      	str	r3, [r4, #12]
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	1bed      	subs	r5, r5, r7
 8005c2c:	445d      	add	r5, fp
 8005c2e:	442b      	add	r3, r5
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	2000      	movs	r0, #0
 8005c34:	b007      	add	sp, #28
 8005c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3a:	f04f 0b00 	mov.w	fp, #0
 8005c3e:	e7ca      	b.n	8005bd6 <_scanf_i+0x15e>
 8005c40:	07ca      	lsls	r2, r1, #31
 8005c42:	bf4c      	ite	mi
 8005c44:	8018      	strhmi	r0, [r3, #0]
 8005c46:	6018      	strpl	r0, [r3, #0]
 8005c48:	e7eb      	b.n	8005c22 <_scanf_i+0x1aa>
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7f2      	b.n	8005c34 <_scanf_i+0x1bc>
 8005c4e:	bf00      	nop
 8005c50:	0800602c 	.word	0x0800602c
 8005c54:	08005f09 	.word	0x08005f09
 8005c58:	08005fe9 	.word	0x08005fe9
 8005c5c:	08006093 	.word	0x08006093

08005c60 <__sccl>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	780b      	ldrb	r3, [r1, #0]
 8005c64:	4604      	mov	r4, r0
 8005c66:	2b5e      	cmp	r3, #94	@ 0x5e
 8005c68:	bf0b      	itete	eq
 8005c6a:	784b      	ldrbeq	r3, [r1, #1]
 8005c6c:	1c4a      	addne	r2, r1, #1
 8005c6e:	1c8a      	addeq	r2, r1, #2
 8005c70:	2100      	movne	r1, #0
 8005c72:	bf08      	it	eq
 8005c74:	2101      	moveq	r1, #1
 8005c76:	3801      	subs	r0, #1
 8005c78:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005c7c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005c80:	42a8      	cmp	r0, r5
 8005c82:	d1fb      	bne.n	8005c7c <__sccl+0x1c>
 8005c84:	b90b      	cbnz	r3, 8005c8a <__sccl+0x2a>
 8005c86:	1e50      	subs	r0, r2, #1
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	f081 0101 	eor.w	r1, r1, #1
 8005c8e:	54e1      	strb	r1, [r4, r3]
 8005c90:	4610      	mov	r0, r2
 8005c92:	4602      	mov	r2, r0
 8005c94:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c98:	2d2d      	cmp	r5, #45	@ 0x2d
 8005c9a:	d005      	beq.n	8005ca8 <__sccl+0x48>
 8005c9c:	2d5d      	cmp	r5, #93	@ 0x5d
 8005c9e:	d016      	beq.n	8005cce <__sccl+0x6e>
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	d0f1      	beq.n	8005c88 <__sccl+0x28>
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	e7f2      	b.n	8005c8e <__sccl+0x2e>
 8005ca8:	7846      	ldrb	r6, [r0, #1]
 8005caa:	2e5d      	cmp	r6, #93	@ 0x5d
 8005cac:	d0fa      	beq.n	8005ca4 <__sccl+0x44>
 8005cae:	42b3      	cmp	r3, r6
 8005cb0:	dcf8      	bgt.n	8005ca4 <__sccl+0x44>
 8005cb2:	3002      	adds	r0, #2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	3201      	adds	r2, #1
 8005cb8:	4296      	cmp	r6, r2
 8005cba:	54a1      	strb	r1, [r4, r2]
 8005cbc:	dcfb      	bgt.n	8005cb6 <__sccl+0x56>
 8005cbe:	1af2      	subs	r2, r6, r3
 8005cc0:	3a01      	subs	r2, #1
 8005cc2:	1c5d      	adds	r5, r3, #1
 8005cc4:	42b3      	cmp	r3, r6
 8005cc6:	bfa8      	it	ge
 8005cc8:	2200      	movge	r2, #0
 8005cca:	18ab      	adds	r3, r5, r2
 8005ccc:	e7e1      	b.n	8005c92 <__sccl+0x32>
 8005cce:	4610      	mov	r0, r2
 8005cd0:	e7da      	b.n	8005c88 <__sccl+0x28>

08005cd2 <__submore>:
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	d11d      	bne.n	8005d1e <__submore+0x4c>
 8005ce2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ce6:	f7ff f92d 	bl	8004f44 <_malloc_r>
 8005cea:	b918      	cbnz	r0, 8005cf4 <__submore+0x22>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005cfa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005cfe:	6360      	str	r0, [r4, #52]	@ 0x34
 8005d00:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005d04:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005d08:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005d0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005d10:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005d14:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005d18:	6020      	str	r0, [r4, #0]
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e7e8      	b.n	8005cf0 <__submore+0x1e>
 8005d1e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005d20:	0077      	lsls	r7, r6, #1
 8005d22:	463a      	mov	r2, r7
 8005d24:	f000 f848 	bl	8005db8 <_realloc_r>
 8005d28:	4605      	mov	r5, r0
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d0de      	beq.n	8005cec <__submore+0x1a>
 8005d2e:	eb00 0806 	add.w	r8, r0, r6
 8005d32:	4601      	mov	r1, r0
 8005d34:	4632      	mov	r2, r6
 8005d36:	4640      	mov	r0, r8
 8005d38:	f000 f830 	bl	8005d9c <memcpy>
 8005d3c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005d40:	f8c4 8000 	str.w	r8, [r4]
 8005d44:	e7e9      	b.n	8005d1a <__submore+0x48>

08005d46 <memmove>:
 8005d46:	4288      	cmp	r0, r1
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	eb01 0402 	add.w	r4, r1, r2
 8005d4e:	d902      	bls.n	8005d56 <memmove+0x10>
 8005d50:	4284      	cmp	r4, r0
 8005d52:	4623      	mov	r3, r4
 8005d54:	d807      	bhi.n	8005d66 <memmove+0x20>
 8005d56:	1e43      	subs	r3, r0, #1
 8005d58:	42a1      	cmp	r1, r4
 8005d5a:	d008      	beq.n	8005d6e <memmove+0x28>
 8005d5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d64:	e7f8      	b.n	8005d58 <memmove+0x12>
 8005d66:	4402      	add	r2, r0
 8005d68:	4601      	mov	r1, r0
 8005d6a:	428a      	cmp	r2, r1
 8005d6c:	d100      	bne.n	8005d70 <memmove+0x2a>
 8005d6e:	bd10      	pop	{r4, pc}
 8005d70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d78:	e7f7      	b.n	8005d6a <memmove+0x24>
	...

08005d7c <_sbrk_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d06      	ldr	r5, [pc, #24]	@ (8005d98 <_sbrk_r+0x1c>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	f7fb fbfe 	bl	8001588 <_sbrk>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_sbrk_r+0x1a>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_sbrk_r+0x1a>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	200013d0 	.word	0x200013d0

08005d9c <memcpy>:
 8005d9c:	440a      	add	r2, r1
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005da4:	d100      	bne.n	8005da8 <memcpy+0xc>
 8005da6:	4770      	bx	lr
 8005da8:	b510      	push	{r4, lr}
 8005daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db2:	4291      	cmp	r1, r2
 8005db4:	d1f9      	bne.n	8005daa <memcpy+0xe>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <_realloc_r>:
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	b921      	cbnz	r1, 8005dce <_realloc_r+0x16>
 8005dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc8:	4611      	mov	r1, r2
 8005dca:	f7ff b8bb 	b.w	8004f44 <_malloc_r>
 8005dce:	b92a      	cbnz	r2, 8005ddc <_realloc_r+0x24>
 8005dd0:	f7ff f84c 	bl	8004e6c <_free_r>
 8005dd4:	4625      	mov	r5, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ddc:	f000 f906 	bl	8005fec <_malloc_usable_size_r>
 8005de0:	4284      	cmp	r4, r0
 8005de2:	4606      	mov	r6, r0
 8005de4:	d802      	bhi.n	8005dec <_realloc_r+0x34>
 8005de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dea:	d8f4      	bhi.n	8005dd6 <_realloc_r+0x1e>
 8005dec:	4621      	mov	r1, r4
 8005dee:	4638      	mov	r0, r7
 8005df0:	f7ff f8a8 	bl	8004f44 <_malloc_r>
 8005df4:	4680      	mov	r8, r0
 8005df6:	b908      	cbnz	r0, 8005dfc <_realloc_r+0x44>
 8005df8:	4645      	mov	r5, r8
 8005dfa:	e7ec      	b.n	8005dd6 <_realloc_r+0x1e>
 8005dfc:	42b4      	cmp	r4, r6
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	bf28      	it	cs
 8005e04:	4632      	movcs	r2, r6
 8005e06:	f7ff ffc9 	bl	8005d9c <memcpy>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f7ff f82d 	bl	8004e6c <_free_r>
 8005e12:	e7f1      	b.n	8005df8 <_realloc_r+0x40>

08005e14 <_strtol_l.isra.0>:
 8005e14:	2b24      	cmp	r3, #36	@ 0x24
 8005e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1a:	4686      	mov	lr, r0
 8005e1c:	4690      	mov	r8, r2
 8005e1e:	d801      	bhi.n	8005e24 <_strtol_l.isra.0+0x10>
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d106      	bne.n	8005e32 <_strtol_l.isra.0+0x1e>
 8005e24:	f7fe fff6 	bl	8004e14 <__errno>
 8005e28:	2316      	movs	r3, #22
 8005e2a:	6003      	str	r3, [r0, #0]
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e32:	4834      	ldr	r0, [pc, #208]	@ (8005f04 <_strtol_l.isra.0+0xf0>)
 8005e34:	460d      	mov	r5, r1
 8005e36:	462a      	mov	r2, r5
 8005e38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e3c:	5d06      	ldrb	r6, [r0, r4]
 8005e3e:	f016 0608 	ands.w	r6, r6, #8
 8005e42:	d1f8      	bne.n	8005e36 <_strtol_l.isra.0+0x22>
 8005e44:	2c2d      	cmp	r4, #45	@ 0x2d
 8005e46:	d110      	bne.n	8005e6a <_strtol_l.isra.0+0x56>
 8005e48:	782c      	ldrb	r4, [r5, #0]
 8005e4a:	2601      	movs	r6, #1
 8005e4c:	1c95      	adds	r5, r2, #2
 8005e4e:	f033 0210 	bics.w	r2, r3, #16
 8005e52:	d115      	bne.n	8005e80 <_strtol_l.isra.0+0x6c>
 8005e54:	2c30      	cmp	r4, #48	@ 0x30
 8005e56:	d10d      	bne.n	8005e74 <_strtol_l.isra.0+0x60>
 8005e58:	782a      	ldrb	r2, [r5, #0]
 8005e5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e5e:	2a58      	cmp	r2, #88	@ 0x58
 8005e60:	d108      	bne.n	8005e74 <_strtol_l.isra.0+0x60>
 8005e62:	786c      	ldrb	r4, [r5, #1]
 8005e64:	3502      	adds	r5, #2
 8005e66:	2310      	movs	r3, #16
 8005e68:	e00a      	b.n	8005e80 <_strtol_l.isra.0+0x6c>
 8005e6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8005e6c:	bf04      	itt	eq
 8005e6e:	782c      	ldrbeq	r4, [r5, #0]
 8005e70:	1c95      	addeq	r5, r2, #2
 8005e72:	e7ec      	b.n	8005e4e <_strtol_l.isra.0+0x3a>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f6      	bne.n	8005e66 <_strtol_l.isra.0+0x52>
 8005e78:	2c30      	cmp	r4, #48	@ 0x30
 8005e7a:	bf14      	ite	ne
 8005e7c:	230a      	movne	r3, #10
 8005e7e:	2308      	moveq	r3, #8
 8005e80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005e84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e88:	2200      	movs	r2, #0
 8005e8a:	fbbc f9f3 	udiv	r9, ip, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005e98:	2f09      	cmp	r7, #9
 8005e9a:	d80f      	bhi.n	8005ebc <_strtol_l.isra.0+0xa8>
 8005e9c:	463c      	mov	r4, r7
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	dd1b      	ble.n	8005eda <_strtol_l.isra.0+0xc6>
 8005ea2:	1c57      	adds	r7, r2, #1
 8005ea4:	d007      	beq.n	8005eb6 <_strtol_l.isra.0+0xa2>
 8005ea6:	4581      	cmp	r9, r0
 8005ea8:	d314      	bcc.n	8005ed4 <_strtol_l.isra.0+0xc0>
 8005eaa:	d101      	bne.n	8005eb0 <_strtol_l.isra.0+0x9c>
 8005eac:	45a2      	cmp	sl, r4
 8005eae:	db11      	blt.n	8005ed4 <_strtol_l.isra.0+0xc0>
 8005eb0:	fb00 4003 	mla	r0, r0, r3, r4
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eba:	e7eb      	b.n	8005e94 <_strtol_l.isra.0+0x80>
 8005ebc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ec0:	2f19      	cmp	r7, #25
 8005ec2:	d801      	bhi.n	8005ec8 <_strtol_l.isra.0+0xb4>
 8005ec4:	3c37      	subs	r4, #55	@ 0x37
 8005ec6:	e7ea      	b.n	8005e9e <_strtol_l.isra.0+0x8a>
 8005ec8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005ecc:	2f19      	cmp	r7, #25
 8005ece:	d804      	bhi.n	8005eda <_strtol_l.isra.0+0xc6>
 8005ed0:	3c57      	subs	r4, #87	@ 0x57
 8005ed2:	e7e4      	b.n	8005e9e <_strtol_l.isra.0+0x8a>
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	e7ed      	b.n	8005eb6 <_strtol_l.isra.0+0xa2>
 8005eda:	1c53      	adds	r3, r2, #1
 8005edc:	d108      	bne.n	8005ef0 <_strtol_l.isra.0+0xdc>
 8005ede:	2322      	movs	r3, #34	@ 0x22
 8005ee0:	f8ce 3000 	str.w	r3, [lr]
 8005ee4:	4660      	mov	r0, ip
 8005ee6:	f1b8 0f00 	cmp.w	r8, #0
 8005eea:	d0a0      	beq.n	8005e2e <_strtol_l.isra.0+0x1a>
 8005eec:	1e69      	subs	r1, r5, #1
 8005eee:	e006      	b.n	8005efe <_strtol_l.isra.0+0xea>
 8005ef0:	b106      	cbz	r6, 8005ef4 <_strtol_l.isra.0+0xe0>
 8005ef2:	4240      	negs	r0, r0
 8005ef4:	f1b8 0f00 	cmp.w	r8, #0
 8005ef8:	d099      	beq.n	8005e2e <_strtol_l.isra.0+0x1a>
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	d1f6      	bne.n	8005eec <_strtol_l.isra.0+0xd8>
 8005efe:	f8c8 1000 	str.w	r1, [r8]
 8005f02:	e794      	b.n	8005e2e <_strtol_l.isra.0+0x1a>
 8005f04:	0800609f 	.word	0x0800609f

08005f08 <_strtol_r>:
 8005f08:	f7ff bf84 	b.w	8005e14 <_strtol_l.isra.0>

08005f0c <_strtoul_l.isra.0>:
 8005f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f10:	4e34      	ldr	r6, [pc, #208]	@ (8005fe4 <_strtoul_l.isra.0+0xd8>)
 8005f12:	4686      	mov	lr, r0
 8005f14:	460d      	mov	r5, r1
 8005f16:	4628      	mov	r0, r5
 8005f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f1c:	5d37      	ldrb	r7, [r6, r4]
 8005f1e:	f017 0708 	ands.w	r7, r7, #8
 8005f22:	d1f8      	bne.n	8005f16 <_strtoul_l.isra.0+0xa>
 8005f24:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f26:	d110      	bne.n	8005f4a <_strtoul_l.isra.0+0x3e>
 8005f28:	782c      	ldrb	r4, [r5, #0]
 8005f2a:	2701      	movs	r7, #1
 8005f2c:	1c85      	adds	r5, r0, #2
 8005f2e:	f033 0010 	bics.w	r0, r3, #16
 8005f32:	d115      	bne.n	8005f60 <_strtoul_l.isra.0+0x54>
 8005f34:	2c30      	cmp	r4, #48	@ 0x30
 8005f36:	d10d      	bne.n	8005f54 <_strtoul_l.isra.0+0x48>
 8005f38:	7828      	ldrb	r0, [r5, #0]
 8005f3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005f3e:	2858      	cmp	r0, #88	@ 0x58
 8005f40:	d108      	bne.n	8005f54 <_strtoul_l.isra.0+0x48>
 8005f42:	786c      	ldrb	r4, [r5, #1]
 8005f44:	3502      	adds	r5, #2
 8005f46:	2310      	movs	r3, #16
 8005f48:	e00a      	b.n	8005f60 <_strtoul_l.isra.0+0x54>
 8005f4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f4c:	bf04      	itt	eq
 8005f4e:	782c      	ldrbeq	r4, [r5, #0]
 8005f50:	1c85      	addeq	r5, r0, #2
 8005f52:	e7ec      	b.n	8005f2e <_strtoul_l.isra.0+0x22>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f6      	bne.n	8005f46 <_strtoul_l.isra.0+0x3a>
 8005f58:	2c30      	cmp	r4, #48	@ 0x30
 8005f5a:	bf14      	ite	ne
 8005f5c:	230a      	movne	r3, #10
 8005f5e:	2308      	moveq	r3, #8
 8005f60:	f04f 38ff 	mov.w	r8, #4294967295
 8005f64:	2600      	movs	r6, #0
 8005f66:	fbb8 f8f3 	udiv	r8, r8, r3
 8005f6a:	fb03 f908 	mul.w	r9, r3, r8
 8005f6e:	ea6f 0909 	mvn.w	r9, r9
 8005f72:	4630      	mov	r0, r6
 8005f74:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005f78:	f1bc 0f09 	cmp.w	ip, #9
 8005f7c:	d810      	bhi.n	8005fa0 <_strtoul_l.isra.0+0x94>
 8005f7e:	4664      	mov	r4, ip
 8005f80:	42a3      	cmp	r3, r4
 8005f82:	dd1e      	ble.n	8005fc2 <_strtoul_l.isra.0+0xb6>
 8005f84:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005f88:	d007      	beq.n	8005f9a <_strtoul_l.isra.0+0x8e>
 8005f8a:	4580      	cmp	r8, r0
 8005f8c:	d316      	bcc.n	8005fbc <_strtoul_l.isra.0+0xb0>
 8005f8e:	d101      	bne.n	8005f94 <_strtoul_l.isra.0+0x88>
 8005f90:	45a1      	cmp	r9, r4
 8005f92:	db13      	blt.n	8005fbc <_strtoul_l.isra.0+0xb0>
 8005f94:	fb00 4003 	mla	r0, r0, r3, r4
 8005f98:	2601      	movs	r6, #1
 8005f9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f9e:	e7e9      	b.n	8005f74 <_strtoul_l.isra.0+0x68>
 8005fa0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005fa4:	f1bc 0f19 	cmp.w	ip, #25
 8005fa8:	d801      	bhi.n	8005fae <_strtoul_l.isra.0+0xa2>
 8005faa:	3c37      	subs	r4, #55	@ 0x37
 8005fac:	e7e8      	b.n	8005f80 <_strtoul_l.isra.0+0x74>
 8005fae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005fb2:	f1bc 0f19 	cmp.w	ip, #25
 8005fb6:	d804      	bhi.n	8005fc2 <_strtoul_l.isra.0+0xb6>
 8005fb8:	3c57      	subs	r4, #87	@ 0x57
 8005fba:	e7e1      	b.n	8005f80 <_strtoul_l.isra.0+0x74>
 8005fbc:	f04f 36ff 	mov.w	r6, #4294967295
 8005fc0:	e7eb      	b.n	8005f9a <_strtoul_l.isra.0+0x8e>
 8005fc2:	1c73      	adds	r3, r6, #1
 8005fc4:	d106      	bne.n	8005fd4 <_strtoul_l.isra.0+0xc8>
 8005fc6:	2322      	movs	r3, #34	@ 0x22
 8005fc8:	f8ce 3000 	str.w	r3, [lr]
 8005fcc:	4630      	mov	r0, r6
 8005fce:	b932      	cbnz	r2, 8005fde <_strtoul_l.isra.0+0xd2>
 8005fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fd4:	b107      	cbz	r7, 8005fd8 <_strtoul_l.isra.0+0xcc>
 8005fd6:	4240      	negs	r0, r0
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d0f9      	beq.n	8005fd0 <_strtoul_l.isra.0+0xc4>
 8005fdc:	b106      	cbz	r6, 8005fe0 <_strtoul_l.isra.0+0xd4>
 8005fde:	1e69      	subs	r1, r5, #1
 8005fe0:	6011      	str	r1, [r2, #0]
 8005fe2:	e7f5      	b.n	8005fd0 <_strtoul_l.isra.0+0xc4>
 8005fe4:	0800609f 	.word	0x0800609f

08005fe8 <_strtoul_r>:
 8005fe8:	f7ff bf90 	b.w	8005f0c <_strtoul_l.isra.0>

08005fec <_malloc_usable_size_r>:
 8005fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff0:	1f18      	subs	r0, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bfbc      	itt	lt
 8005ff6:	580b      	ldrlt	r3, [r1, r0]
 8005ff8:	18c0      	addlt	r0, r0, r3
 8005ffa:	4770      	bx	lr

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
