
BEA_CAN2CAN_DEMO_TEN1HC_HUST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800432c  0800432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004360  08004360  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004360  08004360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004368  08004368  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004368  08004368  00005368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004370  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000011a4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011b0  200011b0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efc5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f9c  00000000  00000000  00015001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00016fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abf  00000000  00000000  00017d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001cd8  00000000  00000000  000187ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f30e  00000000  00000000  0001a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2ad8  00000000  00000000  000297e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ec2bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a00  00000000  00000000  000ec300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000efd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004314 	.word	0x08004314

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004314 	.word	0x08004314

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <UART_Receive_String_Blocking>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Đây là callback, chạy sau khi node 1 hoặc node 2 nhận dữ liệu

void UART_Receive_String_Blocking(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
    uart_rx_buffer_index = 0;
 800050a:	4b40      	ldr	r3, [pc, #256]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]
    string_ready_flag = 0;
 8000510:	4b3f      	ldr	r3, [pc, #252]	@ (8000610 <UART_Receive_String_Blocking+0x10c>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
    memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 8000516:	2214      	movs	r2, #20
 8000518:	2100      	movs	r1, #0
 800051a:	483e      	ldr	r0, [pc, #248]	@ (8000614 <UART_Receive_String_Blocking+0x110>)
 800051c:	f003 fece 	bl	80042bc <memset>

    while (1) {
        uint8_t current_byte;

        // Đọc từng byte và echo lại
        HAL_UART_Receive(&huart3, &current_byte, 1, HAL_MAX_DELAY);
 8000520:	1df9      	adds	r1, r7, #7
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	2201      	movs	r2, #1
 8000528:	483b      	ldr	r0, [pc, #236]	@ (8000618 <UART_Receive_String_Blocking+0x114>)
 800052a:	f002 fefa 	bl	8003322 <HAL_UART_Receive>
        HAL_UART_Transmit(&huart3, &current_byte, 1, HAL_MAX_DELAY);
 800052e:	1df9      	adds	r1, r7, #7
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	4838      	ldr	r0, [pc, #224]	@ (8000618 <UART_Receive_String_Blocking+0x114>)
 8000538:	f002 fe61 	bl	80031fe <HAL_UART_Transmit>

        // Xử lý Enter
        if (current_byte == '\r' || current_byte == '\n') {
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b0d      	cmp	r3, #13
 8000540:	d002      	beq.n	8000548 <UART_Receive_String_Blocking+0x44>
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b0a      	cmp	r3, #10
 8000546:	d121      	bne.n	800058c <UART_Receive_String_Blocking+0x88>
            char newline[] = "\r\n";
 8000548:	4a34      	ldr	r2, [pc, #208]	@ (800061c <UART_Receive_String_Blocking+0x118>)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	6812      	ldr	r2, [r2, #0]
 800054e:	4611      	mov	r1, r2
 8000550:	8019      	strh	r1, [r3, #0]
 8000552:	3302      	adds	r3, #2
 8000554:	0c12      	lsrs	r2, r2, #16
 8000556:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)newline, strlen(newline), HAL_MAX_DELAY);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fe34 	bl	80001c8 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	1d39      	adds	r1, r7, #4
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	482b      	ldr	r0, [pc, #172]	@ (8000618 <UART_Receive_String_Blocking+0x114>)
 800056c:	f002 fe47 	bl	80031fe <HAL_UART_Transmit>
            uart_rx_buffer[uart_rx_buffer_index] = '\0';
 8000570:	4b26      	ldr	r3, [pc, #152]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <UART_Receive_String_Blocking+0x110>)
 8000578:	2100      	movs	r1, #0
 800057a:	5499      	strb	r1, [r3, r2]
            string_ready_flag = 1;
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <UART_Receive_String_Blocking+0x10c>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
            uart_rx_buffer_index = 0;
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 8000584:	2200      	movs	r2, #0
 8000586:	801a      	strh	r2, [r3, #0]
            break;
 8000588:	bf00      	nop
        // Nhập ký tự thường vào buffer
        else if (uart_rx_buffer_index < UART_RX_BUFFER_SIZE - 1) {
            uart_rx_buffer[uart_rx_buffer_index++] = current_byte;
        }
    }
}
 800058a:	e03b      	b.n	8000604 <UART_Receive_String_Blocking+0x100>
        else if (current_byte == '\b' || current_byte == 127) {
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b08      	cmp	r3, #8
 8000590:	d002      	beq.n	8000598 <UART_Receive_String_Blocking+0x94>
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b7f      	cmp	r3, #127	@ 0x7f
 8000596:	d124      	bne.n	80005e2 <UART_Receive_String_Blocking+0xde>
            if (uart_rx_buffer_index > 0) {
 8000598:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d02f      	beq.n	8000600 <UART_Receive_String_Blocking+0xfc>
                uart_rx_buffer_index--;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 80005aa:	801a      	strh	r2, [r3, #0]
                uart_rx_buffer[uart_rx_buffer_index] = '\0';
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <UART_Receive_String_Blocking+0x110>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	5499      	strb	r1, [r3, r2]
                char backspace[] = " \b";
 80005b8:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <UART_Receive_String_Blocking+0x11c>)
 80005ba:	463b      	mov	r3, r7
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	4611      	mov	r1, r2
 80005c0:	8019      	strh	r1, [r3, #0]
 80005c2:	3302      	adds	r3, #2
 80005c4:	0c12      	lsrs	r2, r2, #16
 80005c6:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)backspace, strlen(backspace), HAL_MAX_DELAY);
 80005c8:	463b      	mov	r3, r7
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fdfc 	bl	80001c8 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4639      	mov	r1, r7
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	480f      	ldr	r0, [pc, #60]	@ (8000618 <UART_Receive_String_Blocking+0x114>)
 80005dc:	f002 fe0f 	bl	80031fe <HAL_UART_Transmit>
 80005e0:	e79e      	b.n	8000520 <UART_Receive_String_Blocking+0x1c>
        else if (uart_rx_buffer_index < UART_RX_BUFFER_SIZE - 1) {
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2b12      	cmp	r3, #18
 80005e8:	d89a      	bhi.n	8000520 <UART_Receive_String_Blocking+0x1c>
            uart_rx_buffer[uart_rx_buffer_index++] = current_byte;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	b291      	uxth	r1, r2
 80005f2:	4a06      	ldr	r2, [pc, #24]	@ (800060c <UART_Receive_String_Blocking+0x108>)
 80005f4:	8011      	strh	r1, [r2, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	79f9      	ldrb	r1, [r7, #7]
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <UART_Receive_String_Blocking+0x110>)
 80005fc:	5499      	strb	r1, [r3, r2]
 80005fe:	e78f      	b.n	8000520 <UART_Receive_String_Blocking+0x1c>
            continue;
 8000600:	bf00      	nop
    while (1) {
 8000602:	e78d      	b.n	8000520 <UART_Receive_String_Blocking+0x1c>
}
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200011a4 	.word	0x200011a4
 8000610:	200011a6 	.word	0x200011a6
 8000614:	20001190 	.word	0x20001190
 8000618:	200000c0 	.word	0x200000c0
 800061c:	0800432c 	.word	0x0800432c
 8000620:	08004330 	.word	0x08004330

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	80fb      	strh	r3, [r7, #6]
	uint16_t Consecutive_Cntr = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fc8f 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f81b 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f9af 	bl	800099c <MX_GPIO_Init>
  MX_CAN1_Init();
 800063e:	f000 f881 	bl	8000744 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000642:	f000 f8d9 	bl	80007f8 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000646:	f000 f97f 	bl	8000948 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800064a:	f000 f92b 	bl	80008a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 800064e:	f000 fa21 	bl	8000a94 <MX_CAN1_Setup>
  MX_CAN2_Setup();
 8000652:	f000 fa43 	bl	8000adc <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <main+0x48>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68da      	ldr	r2, [r3, #12]
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <main+0x48>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f042 0220 	orr.w	r2, r2, #32
 8000664:	60da      	str	r2, [r3, #12]


  while (1)
  {

	  UART_Receive_String_Blocking();
 8000666:	f7ff ff4d 	bl	8000504 <UART_Receive_String_Blocking>
 800066a:	e7fc      	b.n	8000666 <main+0x42>
 800066c:	200000c0 	.word	0x200000c0

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fe1c 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	@ (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <SystemClock_Config+0xd0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006e4:	2350      	movs	r3, #80	@ 0x50
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fc83 	bl	8002000 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 fa2e 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fee4 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 fa17 	bl	8000b60 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <MX_CAN1_Init+0xa8>)
 800074a:	4a29      	ldr	r2, [pc, #164]	@ (80007f0 <MX_CAN1_Init+0xac>)
 800074c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000750:	2205      	movs	r2, #5
 8000752:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800075a:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <MX_CAN1_Init+0xa8>)
 800075c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000760:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000764:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000768:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_CAN1_Init+0xa8>)
 800076c:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000770:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_CAN1_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_CAN1_Init+0xa8>)
 800078c:	2200      	movs	r2, #0
 800078e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000796:	4815      	ldr	r0, [pc, #84]	@ (80007ec <MX_CAN1_Init+0xa8>)
 8000798:	f000 fc4e 	bl	8001038 <HAL_CAN_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007a2:	f000 f9dd 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007a8:	220e      	movs	r2, #14
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
	CAN1_sFilterConfig.FilterBank = 0;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007c0:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 80007c4:	601a      	str	r2, [r3, #0]
	CAN1_sFilterConfig.FilterIdLow = 0x0000;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007ce:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80007d2:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterActivation = ENABLE;
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <MX_CAN1_Init+0xb0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	621a      	str	r2, [r3, #32]
  /* USER CODE END CAN1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000028 	.word	0x20000028
 80007f0:	40006400 	.word	0x40006400
 80007f4:	2000011c 	.word	0x2000011c

080007f8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_CAN2_Init+0xa0>)
 80007fe:	4a27      	ldr	r2, [pc, #156]	@ (800089c <MX_CAN2_Init+0xa4>)
 8000800:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000804:	2205      	movs	r2, #5
 8000806:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_CAN2_Init+0xa0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000810:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000814:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000818:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800081c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000820:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000824:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_CAN2_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_CAN2_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_CAN2_Init+0xa0>)
 8000846:	2200      	movs	r2, #0
 8000848:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800084a:	4813      	ldr	r0, [pc, #76]	@ (8000898 <MX_CAN2_Init+0xa0>)
 800084c:	f000 fbf4 	bl	8001038 <HAL_CAN_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000856:	f000 f983 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	//Cần config các setting của filter ở đây
	CAN2_sFilterConfig.FilterBank = 14;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 800085c:	220e      	movs	r2, #14
 800085e:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
	CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 800086e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000872:	601a      	str	r2, [r3, #0]
	CAN2_sFilterConfig.FilterIdLow = 0x0000;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 800087c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000880:	609a      	str	r2, [r3, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterActivation = ENABLE;
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <MX_CAN2_Init+0xa8>)
 8000890:	2201      	movs	r2, #1
 8000892:	621a      	str	r2, [r3, #32]

  /* USER CODE END CAN2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000050 	.word	0x20000050
 800089c:	40006800 	.word	0x40006800
 80008a0:	2000015c 	.word	0x2000015c

080008a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008c2:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <MX_TIM1_Init+0xa0>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (800-1);
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008c8:	f240 321f 	movw	r2, #799	@ 0x31f
 80008cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (5000-1);
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008d6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ee:	4814      	ldr	r0, [pc, #80]	@ (8000940 <MX_TIM1_Init+0x9c>)
 80008f0:	f002 f81e 	bl	8002930 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008fa:	f000 f931 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_TIM1_Init+0x9c>)
 800090c:	f002 f967 	bl	8002bde <HAL_TIM_ConfigClockSource>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000916:	f000 f923 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_TIM1_Init+0x9c>)
 8000928:	f002 fb8c 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000932:	f000 f915 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000078 	.word	0x20000078
 8000944:	40010000 	.word	0x40010000

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <MX_USART3_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 800097a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800097e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_USART3_UART_Init+0x4c>)
 8000982:	f002 fbef 	bl	8003164 <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 800098c:	f000 f8e8 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000c0 	.word	0x200000c0
 8000998:	40004800 	.word	0x40004800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a33      	ldr	r2, [pc, #204]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a25      	ldr	r2, [pc, #148]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <MX_GPIO_Init+0xec>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_GPIO_Init+0xec>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <MX_GPIO_Init+0xec>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_GPIO_Init+0xec>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a22:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 8000a26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4815      	ldr	r0, [pc, #84]	@ (8000a8c <MX_GPIO_Init+0xf0>)
 8000a38:	f001 f922 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <MX_GPIO_Init+0xf4>)
 8000a52:	f001 f915 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a56:	2302      	movs	r3, #2
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <MX_GPIO_Init+0xf4>)
 8000a6a:	f001 f909 	bl	8001c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2101      	movs	r1, #1
 8000a72:	2006      	movs	r0, #6
 8000a74:	f001 f83b 	bl	8001aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a78:	2006      	movs	r0, #6
 8000a7a:	f001 f854 	bl	8001b26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	@ 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000

08000a94 <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000a98:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <MX_CAN1_Setup+0x3c>)
 8000a9a:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <MX_CAN1_Setup+0x40>)
 8000a9c:	f000 fbc8 	bl	8001230 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <MX_CAN1_Setup+0x40>)
 8000aa2:	f000 fca5 	bl	80013f0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <MX_CAN1_Setup+0x40>)
 8000aaa:	f000 fce5 	bl	8001478 <HAL_CAN_ActivateNotification>

	//Cần config header của CAN1
    CAN1_pHeader.StdId = 0x012;                   // Set TX message ID
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <MX_CAN1_Setup+0x44>)
 8000ab0:	2212      	movs	r2, #18
 8000ab2:	601a      	str	r2, [r3, #0]
    CAN1_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_CAN1_Setup+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    CAN1_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <MX_CAN1_Setup+0x44>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    CAN1_pHeader.DLC = 8;                         // 8 bytes of data
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <MX_CAN1_Setup+0x44>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	611a      	str	r2, [r3, #16]
    CAN1_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 8000ac6:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <MX_CAN1_Setup+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	751a      	strb	r2, [r3, #20]
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000011c 	.word	0x2000011c
 8000ad4:	20000028 	.word	0x20000028
 8000ad8:	20000104 	.word	0x20000104

08000adc <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000ae0:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <MX_CAN2_Setup+0x3c>)
 8000ae2:	480e      	ldr	r0, [pc, #56]	@ (8000b1c <MX_CAN2_Setup+0x40>)
 8000ae4:	f000 fba4 	bl	8001230 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <MX_CAN2_Setup+0x40>)
 8000aea:	f000 fc81 	bl	80013f0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000aee:	2102      	movs	r1, #2
 8000af0:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <MX_CAN2_Setup+0x40>)
 8000af2:	f000 fcc1 	bl	8001478 <HAL_CAN_ActivateNotification>

	//Cần config header của CAN2
    CAN2_pHeader.StdId = 0x0A2;                   // Set TX message ID
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_CAN2_Setup+0x44>)
 8000af8:	22a2      	movs	r2, #162	@ 0xa2
 8000afa:	601a      	str	r2, [r3, #0]
    CAN2_pHeader.IDE = CAN_ID_STD;                // Use standard ID
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_CAN2_Setup+0x44>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    CAN2_pHeader.RTR = CAN_RTR_DATA;              // Sending data, not a request
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_CAN2_Setup+0x44>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    CAN2_pHeader.DLC = 8;                         // 8 bytes of data
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <MX_CAN2_Setup+0x44>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	611a      	str	r2, [r3, #16]
    CAN2_pHeader.TransmitGlobalTime = DISABLE;    // No timestamping
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <MX_CAN2_Setup+0x44>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	751a      	strb	r2, [r3, #20]
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000015c 	.word	0x2000015c
 8000b1c:	20000050 	.word	0x20000050
 8000b20:	20000144 	.word	0x20000144

08000b24 <HAL_UART_RxCpltCallback>:

    // Send over UART
    USART3_SendString((uint8_t *)bufsend);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_UART_RxCpltCallback+0x30>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_UART_RxCpltCallback+0x34>)
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_UART_RxCpltCallback+0x38>)
 8000b38:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_UART_RxCpltCallback+0x30>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <HAL_UART_RxCpltCallback+0x30>)
 8000b44:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000184 	.word	0x20000184
 8000b58:	20001188 	.word	0x20001188
 8000b5c:	20000188 	.word	0x20000188

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8000d04 <HAL_CAN_MspInit+0x148>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d13e      	bne.n	8000c5c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bde:	4b4a      	ldr	r3, [pc, #296]	@ (8000d08 <HAL_CAN_MspInit+0x14c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a48      	ldr	r2, [pc, #288]	@ (8000d08 <HAL_CAN_MspInit+0x14c>)
 8000be6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000be8:	4b47      	ldr	r3, [pc, #284]	@ (8000d08 <HAL_CAN_MspInit+0x14c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10d      	bne.n	8000c0c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	4b45      	ldr	r3, [pc, #276]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	4a44      	ldr	r2, [pc, #272]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c00:	4b42      	ldr	r3, [pc, #264]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	4b3e      	ldr	r3, [pc, #248]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a3d      	ldr	r2, [pc, #244]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4832      	ldr	r0, [pc, #200]	@ (8000d10 <HAL_CAN_MspInit+0x154>)
 8000c46:	f001 f81b 	bl	8001c80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f000 ff4d 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c54:	2014      	movs	r0, #20
 8000c56:	f000 ff66 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000c5a:	e04f      	b.n	8000cfc <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a2c      	ldr	r2, [pc, #176]	@ (8000d14 <HAL_CAN_MspInit+0x158>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d14a      	bne.n	8000cfc <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <HAL_CAN_MspInit+0x14c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a1f      	ldr	r2, [pc, #124]	@ (8000d08 <HAL_CAN_MspInit+0x14c>)
 8000c8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <HAL_CAN_MspInit+0x14c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d10d      	bne.n	8000cb0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_CAN_MspInit+0x150>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ccc:	2360      	movs	r3, #96	@ 0x60
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <HAL_CAN_MspInit+0x15c>)
 8000ce8:	f000 ffca 	bl	8001c80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2102      	movs	r1, #2
 8000cf0:	2040      	movs	r0, #64	@ 0x40
 8000cf2:	f000 fefc 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000cf6:	2040      	movs	r0, #64	@ 0x40
 8000cf8:	f000 ff15 	bl	8001b26 <HAL_NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	@ 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40006400 	.word	0x40006400
 8000d08:	200011a8 	.word	0x200011a8
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40006800 	.word	0x40006800
 8000d18:	40020400 	.word	0x40020400

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_TIM_Base_MspInit+0x48>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d115      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_TIM_Base_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <HAL_TIM_Base_MspInit+0x4c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_TIM_Base_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	2019      	movs	r0, #25
 8000d50:	f000 fecd 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d54:	2019      	movs	r0, #25
 8000d56:	f000 fee6 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	@ 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1d      	ldr	r2, [pc, #116]	@ (8000e00 <HAL_UART_MspInit+0x94>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d134      	bne.n	8000df8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0x98>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a1b      	ldr	r2, [pc, #108]	@ (8000e04 <HAL_UART_MspInit+0x98>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_UART_MspInit+0x98>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_UART_MspInit+0x98>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <HAL_UART_MspInit+0x98>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_UART_MspInit+0x98>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <HAL_UART_MspInit+0x9c>)
 8000de4:	f000 ff4c 	bl	8001c80 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	2027      	movs	r0, #39	@ 0x27
 8000dee:	f000 fe7e 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000df2:	2027      	movs	r0, #39	@ 0x27
 8000df4:	f000 fe97 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	@ 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004800 	.word	0x40004800
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020800 	.word	0x40020800

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f8c8 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <SysTick_Handler+0x18>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a02      	ldr	r2, [pc, #8]	@ (8000e78 <SysTick_Handler+0x18>)
 8000e70:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000118c 	.word	0x2000118c

08000e7c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f001 f899 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <CAN1_RX0_IRQHandler+0x10>)
 8000e92:	f000 fb17 	bl	80014c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ea6:	f001 fd92 	bl	80029ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000078 	.word	0x20000078

08000eb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <USART3_IRQHandler+0x10>)
 8000eba:	f002 fad5 	bl	8003468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000c0 	.word	0x200000c0

08000ec8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <CAN2_RX0_IRQHandler+0x10>)
 8000ece:	f000 faf9 	bl	80014c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000050 	.word	0x20000050

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	@ (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 f9cd 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb77 	bl	8000624 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	08004370 	.word	0x08004370
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	200011b0 	.word	0x200011b0

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 fdab 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fdf0 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fdc3 	bl	8001b42 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 fd8b 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	200011ac 	.word	0x200011ac

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200011ac 	.word	0x200011ac

08001038 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0ed      	b.n	8001226 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fdb0 	bl	8000bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800106c:	f7ff ffd8 	bl	8001020 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001072:	e012      	b.n	800109a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001074:	f7ff ffd4 	bl	8001020 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b0a      	cmp	r3, #10
 8001080:	d90b      	bls.n	800109a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0c5      	b.n	8001226 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0e5      	beq.n	8001074 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0202 	bic.w	r2, r2, #2
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffb2 	bl	8001020 <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffae 	bl	8001020 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e09f      	b.n	8001226 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e5      	bne.n	80010c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7e1b      	ldrb	r3, [r3, #24]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e007      	b.n	800111e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e5b      	ldrb	r3, [r3, #25]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d108      	bne.n	8001138 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e007      	b.n	8001148 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7e9b      	ldrb	r3, [r3, #26]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0220 	orr.w	r2, r2, #32
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e007      	b.n	8001172 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0220 	bic.w	r2, r2, #32
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7edb      	ldrb	r3, [r3, #27]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0210 	bic.w	r2, r2, #16
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e007      	b.n	800119c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0210 	orr.w	r2, r2, #16
 800119a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7f1b      	ldrb	r3, [r3, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0208 	orr.w	r2, r2, #8
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e007      	b.n	80011c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0208 	bic.w	r2, r2, #8
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7f5b      	ldrb	r3, [r3, #29]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f042 0204 	orr.w	r2, r2, #4
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0204 	bic.w	r2, r2, #4
 80011ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	ea42 0103 	orr.w	r1, r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001246:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d003      	beq.n	8001256 <HAL_CAN_ConfigFilter+0x26>
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	2b02      	cmp	r3, #2
 8001252:	f040 80be 	bne.w	80013d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001256:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <HAL_CAN_ConfigFilter+0x1bc>)
 8001258:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001270:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	431a      	orrs	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	2201      	movs	r2, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d123      	bne.n	8001300 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3248      	adds	r2, #72	@ 0x48
 80012e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f6:	6979      	ldr	r1, [r7, #20]
 80012f8:	3348      	adds	r3, #72	@ 0x48
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d122      	bne.n	800134e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001328:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3248      	adds	r2, #72	@ 0x48
 800132e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001342:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	3348      	adds	r3, #72	@ 0x48
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001368:	e007      	b.n	800137a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	431a      	orrs	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001394:	e007      	b.n	80013a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	431a      	orrs	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d107      	bne.n	80013be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013c4:	f023 0201 	bic.w	r2, r3, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e006      	b.n	80013e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40006400 	.word	0x40006400

080013f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d12e      	bne.n	8001462 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800141c:	f7ff fe00 	bl	8001020 <HAL_GetTick>
 8001420:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001422:	e012      	b.n	800144a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001424:	f7ff fdfc 	bl	8001020 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d90b      	bls.n	800144a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2205      	movs	r2, #5
 8001442:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e012      	b.n	8001470 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e5      	bne.n	8001424 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e006      	b.n	8001470 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001488:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d002      	beq.n	8001496 <HAL_CAN_ActivateNotification+0x1e>
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d109      	bne.n	80014aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6959      	ldr	r1, [r3, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e006      	b.n	80014b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
  }
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d07c      	beq.n	8001604 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d023      	beq.n	800155c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f983 	bl	8001832 <HAL_CAN_TxMailbox0CompleteCallback>
 800152c:	e016      	b.n	800155c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001540:	e00c      	b.n	800155c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
 8001554:	e002      	b.n	800155c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f989 	bl	800186e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d024      	beq.n	80015b0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800156e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f963 	bl	8001846 <HAL_CAN_TxMailbox1CompleteCallback>
 8001580:	e016      	b.n	80015b0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
 8001594:	e00c      	b.n	80015b0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	e002      	b.n	80015b0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f969 	bl	8001882 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d024      	beq.n	8001604 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f943 	bl	800185a <HAL_CAN_TxMailbox2CompleteCallback>
 80015d4:	e016      	b.n	8001604 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e8:	e00c      	b.n	8001604 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fc:	e002      	b.n	8001604 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f949 	bl	8001896 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00c      	beq.n	8001628 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2210      	movs	r2, #16
 8001626:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f93a 	bl	80018be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f921 	bl	80018aa <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2210      	movs	r2, #16
 800168a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2208      	movs	r2, #8
 80016a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f91c 	bl	80018e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f903 	bl	80018d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2210      	movs	r2, #16
 80016e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f906 	bl	80018fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2208      	movs	r2, #8
 8001708:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8ff 	bl	800190e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d07b      	beq.n	8001812 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d072      	beq.n	800180a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800177e:	2b00      	cmp	r3, #0
 8001780:	d043      	beq.n	800180a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03e      	beq.n	800180a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001792:	2b60      	cmp	r3, #96	@ 0x60
 8001794:	d02b      	beq.n	80017ee <HAL_CAN_IRQHandler+0x32a>
 8001796:	2b60      	cmp	r3, #96	@ 0x60
 8001798:	d82e      	bhi.n	80017f8 <HAL_CAN_IRQHandler+0x334>
 800179a:	2b50      	cmp	r3, #80	@ 0x50
 800179c:	d022      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x320>
 800179e:	2b50      	cmp	r3, #80	@ 0x50
 80017a0:	d82a      	bhi.n	80017f8 <HAL_CAN_IRQHandler+0x334>
 80017a2:	2b40      	cmp	r3, #64	@ 0x40
 80017a4:	d019      	beq.n	80017da <HAL_CAN_IRQHandler+0x316>
 80017a6:	2b40      	cmp	r3, #64	@ 0x40
 80017a8:	d826      	bhi.n	80017f8 <HAL_CAN_IRQHandler+0x334>
 80017aa:	2b30      	cmp	r3, #48	@ 0x30
 80017ac:	d010      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x30c>
 80017ae:	2b30      	cmp	r3, #48	@ 0x30
 80017b0:	d822      	bhi.n	80017f8 <HAL_CAN_IRQHandler+0x334>
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d002      	beq.n	80017bc <HAL_CAN_IRQHandler+0x2f8>
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d005      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017ba:	e01d      	b.n	80017f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017c4:	e019      	b.n	80017fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017ce:	e014      	b.n	80017fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017d8:	e00f      	b.n	80017fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017e2:	e00a      	b.n	80017fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017ec:	e005      	b.n	80017fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017f6:	e000      	b.n	80017fa <HAL_CAN_IRQHandler+0x336>
            break;
 80017f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001808:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2204      	movs	r2, #4
 8001810:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f87c 	bl	8001922 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	@ (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff29 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff3e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff31 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fa5a 	bl	8001020 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d008      	beq.n	8001b8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e052      	b.n	8001c32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0216 	bic.w	r2, r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001baa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <HAL_DMA_Abort+0x62>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0208 	bic.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bdc:	e013      	b.n	8001c06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bde:	f7ff fa1f 	bl	8001020 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d90c      	bls.n	8001c06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e015      	b.n	8001c32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e4      	bne.n	8001bde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c18:	223f      	movs	r2, #63	@ 0x3f
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2280      	movs	r2, #128	@ 0x80
 8001c52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00c      	b.n	8001c72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e16b      	b.n	8001f74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 815a 	bne.w	8001f6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d005      	beq.n	8001cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d017      	beq.n	8001d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80b4 	beq.w	8001f6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b60      	ldr	r3, [pc, #384]	@ (8001f8c <HAL_GPIO_Init+0x30c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001f8c <HAL_GPIO_Init+0x30c>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_GPIO_Init+0x30c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a5b      	ldr	r2, [pc, #364]	@ (8001f90 <HAL_GPIO_Init+0x310>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a52      	ldr	r2, [pc, #328]	@ (8001f94 <HAL_GPIO_Init+0x314>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02b      	beq.n	8001ea6 <HAL_GPIO_Init+0x226>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a51      	ldr	r2, [pc, #324]	@ (8001f98 <HAL_GPIO_Init+0x318>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d025      	beq.n	8001ea2 <HAL_GPIO_Init+0x222>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a50      	ldr	r2, [pc, #320]	@ (8001f9c <HAL_GPIO_Init+0x31c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01f      	beq.n	8001e9e <HAL_GPIO_Init+0x21e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa0 <HAL_GPIO_Init+0x320>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x21a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa4 <HAL_GPIO_Init+0x324>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x216>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4d      	ldr	r2, [pc, #308]	@ (8001fa8 <HAL_GPIO_Init+0x328>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	@ (8001fac <HAL_GPIO_Init+0x32c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb0 <HAL_GPIO_Init+0x330>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x20a>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e00e      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	e00c      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e8e:	2306      	movs	r3, #6
 8001e90:	e00a      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	@ (8001f90 <HAL_GPIO_Init+0x310>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a32      	ldr	r2, [pc, #200]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b30      	ldr	r3, [pc, #192]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f68:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <HAL_GPIO_Init+0x334>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f ae90 	bls.w	8001c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40021400 	.word	0x40021400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40021c00 	.word	0x40021c00
 8001fb4:	40013c00 	.word	0x40013c00

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e267      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b85      	ldr	r3, [pc, #532]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b82      	ldr	r3, [pc, #520]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b7e      	ldr	r3, [pc, #504]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e242      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x74>
 8002066:	4b76      	ldr	r3, [pc, #472]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b70      	ldr	r3, [pc, #448]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6f      	ldr	r2, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6d      	ldr	r3, [pc, #436]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6c      	ldr	r2, [pc, #432]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002098:	4b69      	ldr	r3, [pc, #420]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a68      	ldr	r2, [pc, #416]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe ffb2 	bl	8001020 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe ffae 	bl	8001020 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e207      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ff9e 	bl	8001020 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe ff9a 	bl	8001020 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1f3      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b51      	ldr	r3, [pc, #324]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	4b4a      	ldr	r3, [pc, #296]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b44      	ldr	r3, [pc, #272]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c7      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4937      	ldr	r1, [pc, #220]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <HAL_RCC_OscConfig+0x244>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe ff53 	bl	8001020 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe ff4f 	bl	8001020 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a8      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4925      	ldr	r1, [pc, #148]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_RCC_OscConfig+0x244>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff32 	bl	8001020 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe ff2e 	bl	8001020 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e187      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d036      	beq.n	8002258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_RCC_OscConfig+0x248>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe ff12 	bl	8001020 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe ff0e 	bl	8001020 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e167      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_RCC_OscConfig+0x240>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 800221e:	e01b      	b.n	8002258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_OscConfig+0x248>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fefb 	bl	8001020 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00e      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe fef7 	bl	8001020 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d907      	bls.n	800224c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e150      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b88      	ldr	r3, [pc, #544]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8097 	beq.w	8002394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b81      	ldr	r3, [pc, #516]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b7d      	ldr	r3, [pc, #500]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a7c      	ldr	r2, [pc, #496]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b7a      	ldr	r3, [pc, #488]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b77      	ldr	r3, [pc, #476]	@ (8002474 <HAL_RCC_OscConfig+0x474>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b74      	ldr	r3, [pc, #464]	@ (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a73      	ldr	r2, [pc, #460]	@ (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe feb7 	bl	8001020 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe feb3 	bl	8001020 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e10c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002474 <HAL_RCC_OscConfig+0x474>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x2ea>
 80022dc:	4b64      	ldr	r3, [pc, #400]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	4a63      	ldr	r2, [pc, #396]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x30c>
 80022f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002302:	4a5b      	ldr	r2, [pc, #364]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	@ 0x70
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 800230c:	4b58      	ldr	r3, [pc, #352]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	4a57      	ldr	r2, [pc, #348]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	@ 0x70
 8002318:	4b55      	ldr	r3, [pc, #340]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	4a54      	ldr	r2, [pc, #336]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fe78 	bl	8001020 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fe74 	bl	8001020 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0cb      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b49      	ldr	r3, [pc, #292]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RCC_OscConfig+0x334>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe fe62 	bl	8001020 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fe5e 	bl	8001020 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0b5      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	4b3e      	ldr	r3, [pc, #248]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	4a38      	ldr	r2, [pc, #224]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a1 	beq.w	80024e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239e:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d05c      	beq.n	8002464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d141      	bne.n	8002436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <HAL_RCC_OscConfig+0x478>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fe32 	bl	8001020 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fe2e 	bl	8001020 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e087      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	491b      	ldr	r1, [pc, #108]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x478>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fe07 	bl	8001020 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fe03 	bl	8001020 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e05c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x416>
 8002434:	e054      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fdf0 	bl	8001020 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fdec 	bl	8001020 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e045      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x444>
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e038      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000
 8002478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_RCC_OscConfig+0x4ec>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d028      	beq.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d121      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fd1e 	bl	8001020 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fd1a 	bl	8001020 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc7e 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08004348 	.word	0x08004348
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b094      	sub	sp, #80	@ 0x50
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026c8:	2300      	movs	r3, #0
 80026ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026cc:	2300      	movs	r3, #0
 80026ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d4:	4b79      	ldr	r3, [pc, #484]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f200 80e1 	bhi.w	80028a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ee:	e0db      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80026f4:	e0db      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f6:	4b73      	ldr	r3, [pc, #460]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80026f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026fa:	e0d8      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b6f      	ldr	r3, [pc, #444]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002704:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b6d      	ldr	r3, [pc, #436]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	2200      	movs	r2, #0
 800271a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800271c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	633b      	str	r3, [r7, #48]	@ 0x30
 8002726:	2300      	movs	r3, #0
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
 800272a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	0159      	lsls	r1, r3, #5
 800273c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002740:	0150      	lsls	r0, r2, #5
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4621      	mov	r1, r4
 8002748:	1a51      	subs	r1, r2, r1
 800274a:	6139      	str	r1, [r7, #16]
 800274c:	4629      	mov	r1, r5
 800274e:	eb63 0301 	sbc.w	r3, r3, r1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002760:	4659      	mov	r1, fp
 8002762:	018b      	lsls	r3, r1, #6
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276a:	4651      	mov	r1, sl
 800276c:	018a      	lsls	r2, r1, #6
 800276e:	4651      	mov	r1, sl
 8002770:	ebb2 0801 	subs.w	r8, r2, r1
 8002774:	4659      	mov	r1, fp
 8002776:	eb63 0901 	sbc.w	r9, r3, r1
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	4623      	mov	r3, r4
 8002794:	eb18 0303 	adds.w	r3, r8, r3
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	462b      	mov	r3, r5
 800279c:	eb49 0303 	adc.w	r3, r9, r3
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ae:	4629      	mov	r1, r5
 80027b0:	024b      	lsls	r3, r1, #9
 80027b2:	4621      	mov	r1, r4
 80027b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027b8:	4621      	mov	r1, r4
 80027ba:	024a      	lsls	r2, r1, #9
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c2:	2200      	movs	r2, #0
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027cc:	f7fd fd04 	bl	80001d8 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4613      	mov	r3, r2
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027d8:	e058      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027da:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	2200      	movs	r2, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	4611      	mov	r1, r2
 80027e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027f4:	4642      	mov	r2, r8
 80027f6:	464b      	mov	r3, r9
 80027f8:	f04f 0000 	mov.w	r0, #0
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	0159      	lsls	r1, r3, #5
 8002802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002806:	0150      	lsls	r0, r2, #5
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4641      	mov	r1, r8
 800280e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb63 0b01 	sbc.w	fp, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800282c:	ebb2 040a 	subs.w	r4, r2, sl
 8002830:	eb63 050b 	sbc.w	r5, r3, fp
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	00eb      	lsls	r3, r5, #3
 800283e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002842:	00e2      	lsls	r2, r4, #3
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	4643      	mov	r3, r8
 800284a:	18e3      	adds	r3, r4, r3
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	464b      	mov	r3, r9
 8002850:	eb45 0303 	adc.w	r3, r5, r3
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002862:	4629      	mov	r1, r5
 8002864:	028b      	lsls	r3, r1, #10
 8002866:	4621      	mov	r1, r4
 8002868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800286c:	4621      	mov	r1, r4
 800286e:	028a      	lsls	r2, r1, #10
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	61fa      	str	r2, [r7, #28]
 800287c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002880:	f7fd fcaa 	bl	80001d8 <__aeabi_uldivmod>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4613      	mov	r3, r2
 800288a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	3301      	adds	r3, #1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800289c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800289e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028a6:	e002      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3750      	adds	r7, #80	@ 0x50
 80028b4:	46bd      	mov	sp, r7
 80028b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4903      	ldr	r1, [pc, #12]	@ (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	08004358 	.word	0x08004358

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800290c:	f7ff ffdc 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0b5b      	lsrs	r3, r3, #13
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	@ (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	08004358 	.word	0x08004358

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f9e0 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fa2e 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d122      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d11b      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f06f 0202 	mvn.w	r2, #2
 80029fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f9bf 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002a16:	e005      	b.n	8002a24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f9b1 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9c2 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d122      	bne.n	8002a7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d11b      	bne.n	8002a7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0204 	mvn.w	r2, #4
 8002a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f995 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002a6a:	e005      	b.n	8002a78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f987 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f998 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d122      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11b      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0208 	mvn.w	r2, #8
 8002aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f96b 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002abe:	e005      	b.n	8002acc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f95d 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f96e 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d122      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d11b      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0210 	mvn.w	r2, #16
 8002af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2208      	movs	r2, #8
 8002afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f941 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002b12:	e005      	b.n	8002b20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f933 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f944 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10e      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0201 	mvn.w	r2, #1
 8002b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f90d 	bl	8002d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5c:	2b80      	cmp	r3, #128	@ 0x80
 8002b5e:	d10e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b80      	cmp	r3, #128	@ 0x80
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fae9 	bl	8003150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	2b40      	cmp	r3, #64	@ 0x40
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f909 	bl	8002dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0220 	mvn.w	r2, #32
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fab3 	bl	800313c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_ConfigClockSource+0x1c>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e0b4      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x186>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c20:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c32:	d03e      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0xd4>
 8002c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c38:	f200 8087 	bhi.w	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c40:	f000 8086 	beq.w	8002d50 <HAL_TIM_ConfigClockSource+0x172>
 8002c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c48:	d87f      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c4a:	2b70      	cmp	r3, #112	@ 0x70
 8002c4c:	d01a      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0xa6>
 8002c4e:	2b70      	cmp	r3, #112	@ 0x70
 8002c50:	d87b      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c52:	2b60      	cmp	r3, #96	@ 0x60
 8002c54:	d050      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0x11a>
 8002c56:	2b60      	cmp	r3, #96	@ 0x60
 8002c58:	d877      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c5a:	2b50      	cmp	r3, #80	@ 0x50
 8002c5c:	d03c      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xfa>
 8002c5e:	2b50      	cmp	r3, #80	@ 0x50
 8002c60:	d873      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c62:	2b40      	cmp	r3, #64	@ 0x40
 8002c64:	d058      	beq.n	8002d18 <HAL_TIM_ConfigClockSource+0x13a>
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d86f      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c6a:	2b30      	cmp	r3, #48	@ 0x30
 8002c6c:	d064      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6e:	2b30      	cmp	r3, #48	@ 0x30
 8002c70:	d86b      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d060      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0x15a>
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d867      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d05c      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d05a      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0x15a>
 8002c82:	e062      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f000 f9b6 	bl	8003004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ca6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
      break;
 8002cb0:	e04f      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f000 f99f 	bl	8003004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd4:	609a      	str	r2, [r3, #8]
      break;
 8002cd6:	e03c      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f000 f913 	bl	8002f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2150      	movs	r1, #80	@ 0x50
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 f96c 	bl	8002fce <TIM_ITRx_SetConfig>
      break;
 8002cf6:	e02c      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	461a      	mov	r2, r3
 8002d06:	f000 f932 	bl	8002f6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2160      	movs	r1, #96	@ 0x60
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f95c 	bl	8002fce <TIM_ITRx_SetConfig>
      break;
 8002d16:	e01c      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f000 f8f3 	bl	8002f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2140      	movs	r1, #64	@ 0x40
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f94c 	bl	8002fce <TIM_ITRx_SetConfig>
      break;
 8002d36:	e00c      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 f943 	bl	8002fce <TIM_ITRx_SetConfig>
      break;
 8002d48:	e003      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4e:	e000      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a40      	ldr	r2, [pc, #256]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dee:	d00f      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <TIM_Base_SetConfig+0x11c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <TIM_Base_SetConfig+0x120>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e30:	d027      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d023      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <TIM_Base_SetConfig+0x11c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef0 <TIM_Base_SetConfig+0x120>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d017      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a28      	ldr	r2, [pc, #160]	@ (8002ef8 <TIM_Base_SetConfig+0x128>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <TIM_Base_SetConfig+0x12c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a26      	ldr	r2, [pc, #152]	@ (8002f00 <TIM_Base_SetConfig+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <TIM_Base_SetConfig+0x134>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a23      	ldr	r2, [pc, #140]	@ (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xf8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	40001800 	.word	0x40001800
 8002f08:	40001c00 	.word	0x40001c00
 8002f0c:	40002000 	.word	0x40002000

08002f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f023 0201 	bic.w	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f023 030a 	bic.w	r3, r3, #10
 8002f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b087      	sub	sp, #28
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0210 	bic.w	r2, r3, #16
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	031b      	lsls	r3, r3, #12
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f043 0307 	orr.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	609a      	str	r2, [r3, #8]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800301e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	021a      	lsls	r2, r3, #8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	431a      	orrs	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	609a      	str	r2, [r3, #8]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003058:	2302      	movs	r3, #2
 800305a:	e05a      	b.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a21      	ldr	r2, [pc, #132]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a8:	d01d      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a18      	ldr	r2, [pc, #96]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10c      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40010400 	.word	0x40010400
 8003134:	40014000 	.word	0x40014000
 8003138:	40001800 	.word	0x40001800

0800313c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e03f      	b.n	80031f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fdee 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	@ 0x24
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fe13 	bl	8003dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b08a      	sub	sp, #40	@ 0x28
 8003202:	af02      	add	r7, sp, #8
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	d17c      	bne.n	8003318 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_UART_Transmit+0x2c>
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e075      	b.n	800331a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_UART_Transmit+0x3e>
 8003238:	2302      	movs	r3, #2
 800323a:	e06e      	b.n	800331a <HAL_UART_Transmit+0x11c>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2221      	movs	r2, #33	@ 0x21
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003252:	f7fd fee5 	bl	8001020 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326c:	d108      	bne.n	8003280 <HAL_UART_Transmit+0x82>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e003      	b.n	8003288 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003290:	e02a      	b.n	80032e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	@ 0x80
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fb91 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e036      	b.n	800331a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3302      	adds	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e007      	b.n	80032da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1cf      	bne.n	8003292 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	@ 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fb61 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e006      	b.n	800331a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08a      	sub	sp, #40	@ 0x28
 8003326:	af02      	add	r7, sp, #8
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 808c 	bne.w	800345c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_Receive+0x2e>
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e084      	b.n	800345e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_UART_Receive+0x40>
 800335e:	2302      	movs	r3, #2
 8003360:	e07d      	b.n	800345e <HAL_UART_Receive+0x13c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2222      	movs	r2, #34	@ 0x22
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337e:	f7fd fe4f 	bl	8001020 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003398:	d108      	bne.n	80033ac <HAL_UART_Receive+0x8a>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e003      	b.n	80033b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033bc:	e043      	b.n	8003446 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2120      	movs	r1, #32
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fafb 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e042      	b.n	800345e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3302      	adds	r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e01f      	b.n	8003438 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003400:	d007      	beq.n	8003412 <HAL_UART_Receive+0xf0>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_UART_Receive+0xfe>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e008      	b.n	8003432 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800342c:	b2da      	uxtb	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1b6      	bne.n	80033be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b0ba      	sub	sp, #232	@ 0xe8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80034a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_UART_IRQHandler+0x66>
 80034ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fbc9 	bl	8003c5e <UART_Receive_IT>
      return;
 80034cc:	e256      	b.n	800397c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80de 	beq.w	8003694 <HAL_UART_IRQHandler+0x22c>
 80034d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80d1 	beq.w	8003694 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_UART_IRQHandler+0xae>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_UART_IRQHandler+0xd2>
 8003522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f043 0202 	orr.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_UART_IRQHandler+0xf6>
 8003546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d011      	beq.n	800358e <HAL_UART_IRQHandler+0x126>
 800356a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d105      	bne.n	8003582 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f043 0208 	orr.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 81ed 	beq.w	8003972 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_UART_IRQHandler+0x14e>
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fb54 	bl	8003c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b40      	cmp	r3, #64	@ 0x40
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_UART_IRQHandler+0x17a>
 80035da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d04f      	beq.n	8003682 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa5c 	bl	8003aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f2:	2b40      	cmp	r3, #64	@ 0x40
 80035f4:	d141      	bne.n	800367a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800360c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003622:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800362e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800363a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d9      	bne.n	80035f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	2b00      	cmp	r3, #0
 8003648:	d013      	beq.n	8003672 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	4a7d      	ldr	r2, [pc, #500]	@ (8003844 <HAL_UART_IRQHandler+0x3dc>)
 8003650:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe faef 	bl	8001c3a <HAL_DMA_Abort_IT>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800366c:	4610      	mov	r0, r2
 800366e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e00e      	b.n	8003690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f990 	bl	8003998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003678:	e00a      	b.n	8003690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f98c 	bl	8003998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e006      	b.n	8003690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f988 	bl	8003998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800368e:	e170      	b.n	8003972 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	bf00      	nop
    return;
 8003692:	e16e      	b.n	8003972 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 814a 	bne.w	8003932 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8143 	beq.w	8003932 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 813c 	beq.w	8003932 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	f040 80b4 	bne.w	8003848 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8140 	beq.w	8003976 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036fe:	429a      	cmp	r2, r3
 8003700:	f080 8139 	bcs.w	8003976 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800370a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003716:	f000 8088 	beq.w	800382a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800374a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003752:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800375e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1d9      	bne.n	800371a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3314      	adds	r3, #20
 800376c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3314      	adds	r3, #20
 8003786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800378a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800378e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003792:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800379c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e1      	bne.n	8003766 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3314      	adds	r3, #20
 80037a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e3      	bne.n	80037a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800380c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800380e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800381a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e3      	bne.n	80037e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe f998 	bl	8001b5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003832:	b29b      	uxth	r3, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8b6 	bl	80039ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003840:	e099      	b.n	8003976 <HAL_UART_IRQHandler+0x50e>
 8003842:	bf00      	nop
 8003844:	08003b67 	.word	0x08003b67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003850:	b29b      	uxth	r3, r3
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 808b 	beq.w	800397a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8086 	beq.w	800397a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003892:	647a      	str	r2, [r7, #68]	@ 0x44
 8003894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e3      	bne.n	800386e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	623b      	str	r3, [r7, #32]
   return(result);
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e3      	bne.n	80038a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0310 	bic.w	r3, r3, #16
 8003902:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003910:	61fa      	str	r2, [r7, #28]
 8003912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	69b9      	ldr	r1, [r7, #24]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	617b      	str	r3, [r7, #20]
   return(result);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e3      	bne.n	80038ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f83e 	bl	80039ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003930:	e023      	b.n	800397a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_UART_IRQHandler+0x4ea>
 800393e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f91f 	bl	8003b8e <UART_Transmit_IT>
    return;
 8003950:	e014      	b.n	800397c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <HAL_UART_IRQHandler+0x514>
 800395e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f95f 	bl	8003c2e <UART_EndTransmit_IT>
    return;
 8003970:	e004      	b.n	800397c <HAL_UART_IRQHandler+0x514>
    return;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <HAL_UART_IRQHandler+0x514>
      return;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_UART_IRQHandler+0x514>
      return;
 800397a:	bf00      	nop
  }
}
 800397c:	37e8      	adds	r7, #232	@ 0xe8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop

08003984 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b090      	sub	sp, #64	@ 0x40
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d4:	e050      	b.n	8003a78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d04c      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80039e4:	f7fd fb1c 	bl	8001020 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d241      	bcs.n	8003a78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a14:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	613b      	str	r3, [r7, #16]
   return(result);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a48:	623a      	str	r2, [r7, #32]
 8003a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	69f9      	ldr	r1, [r7, #28]
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e00f      	b.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d09f      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3740      	adds	r7, #64	@ 0x40
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b095      	sub	sp, #84	@ 0x54
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ac8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ace:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3314      	adds	r3, #20
 8003ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3314      	adds	r3, #20
 8003afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e5      	bne.n	8003adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d119      	bne.n	8003b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f023 0310 	bic.w	r3, r3, #16
 8003b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b38:	61ba      	str	r2, [r7, #24]
 8003b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	613b      	str	r3, [r7, #16]
   return(result);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b5a:	bf00      	nop
 8003b5c:	3754      	adds	r7, #84	@ 0x54
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff ff09 	bl	8003998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b21      	cmp	r3, #33	@ 0x21
 8003ba0:	d13e      	bne.n	8003c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	d114      	bne.n	8003bd6 <UART_Transmit_IT+0x48>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d110      	bne.n	8003bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	1c9a      	adds	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]
 8003bd4:	e008      	b.n	8003be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	1c59      	adds	r1, r3, #1
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6211      	str	r1, [r2, #32]
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10f      	bne.n	8003c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fe98 	bl	8003984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b08c      	sub	sp, #48	@ 0x30
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b22      	cmp	r3, #34	@ 0x22
 8003c70:	f040 80ab 	bne.w	8003dca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7c:	d117      	bne.n	8003cae <UART_Receive_IT+0x50>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d113      	bne.n	8003cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cac:	e026      	b.n	8003cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc0:	d007      	beq.n	8003cd2 <UART_Receive_IT+0x74>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <UART_Receive_IT+0x82>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e008      	b.n	8003cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d15a      	bne.n	8003dc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0220 	bic.w	r2, r2, #32
 8003d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d135      	bne.n	8003dbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	613b      	str	r3, [r7, #16]
   return(result);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f023 0310 	bic.w	r3, r3, #16
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	623a      	str	r2, [r7, #32]
 8003d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	69f9      	ldr	r1, [r7, #28]
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d10a      	bne.n	8003dae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff fdf9 	bl	80039ac <HAL_UARTEx_RxEventCallback>
 8003dba:	e002      	b.n	8003dc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fc feb1 	bl	8000b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e002      	b.n	8003dcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3730      	adds	r7, #48	@ 0x30
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b0c0      	sub	sp, #256	@ 0x100
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	68d9      	ldr	r1, [r3, #12]
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	ea40 0301 	orr.w	r3, r0, r1
 8003dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e2c:	f021 010c 	bic.w	r1, r1, #12
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	6999      	ldr	r1, [r3, #24]
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	ea40 0301 	orr.w	r3, r0, r1
 8003e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b8f      	ldr	r3, [pc, #572]	@ (80040a0 <UART_SetConfig+0x2cc>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d005      	beq.n	8003e74 <UART_SetConfig+0xa0>
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80040a4 <UART_SetConfig+0x2d0>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d104      	bne.n	8003e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fd48 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8003e78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e7c:	e003      	b.n	8003e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e7e:	f7fe fd2f 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003e82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e90:	f040 810c 	bne.w	80040ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	1891      	adds	r1, r2, r2
 8003eac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eae:	415b      	adcs	r3, r3
 8003eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	eb12 0801 	adds.w	r8, r2, r1
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	eb43 0901 	adc.w	r9, r3, r1
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed6:	4690      	mov	r8, r2
 8003ed8:	4699      	mov	r9, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	eb18 0303 	adds.w	r3, r8, r3
 8003ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	eb49 0303 	adc.w	r3, r9, r3
 8003eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003efa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f02:	460b      	mov	r3, r1
 8003f04:	18db      	adds	r3, r3, r3
 8003f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f08:	4613      	mov	r3, r2
 8003f0a:	eb42 0303 	adc.w	r3, r2, r3
 8003f0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f18:	f7fc f95e 	bl	80001d8 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4b61      	ldr	r3, [pc, #388]	@ (80040a8 <UART_SetConfig+0x2d4>)
 8003f22:	fba3 2302 	umull	r2, r3, r3, r2
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	011c      	lsls	r4, r3, #4
 8003f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f44:	415b      	adcs	r3, r3
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f52:	4649      	mov	r1, r9
 8003f54:	eb43 0b01 	adc.w	fp, r3, r1
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f6c:	4692      	mov	sl, r2
 8003f6e:	469b      	mov	fp, r3
 8003f70:	4643      	mov	r3, r8
 8003f72:	eb1a 0303 	adds.w	r3, sl, r3
 8003f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	18db      	adds	r3, r3, r3
 8003f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fae:	f7fc f913 	bl	80001d8 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80040a8 <UART_SetConfig+0x2d4>)
 8003fba:	fba3 2301 	umull	r2, r3, r3, r1
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2264      	movs	r2, #100	@ 0x64
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fce:	4b36      	ldr	r3, [pc, #216]	@ (80040a8 <UART_SetConfig+0x2d4>)
 8003fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fdc:	441c      	add	r4, r3
 8003fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004000:	4641      	mov	r1, r8
 8004002:	1851      	adds	r1, r2, r1
 8004004:	6339      	str	r1, [r7, #48]	@ 0x30
 8004006:	4649      	mov	r1, r9
 8004008:	414b      	adcs	r3, r1
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004018:	4659      	mov	r1, fp
 800401a:	00cb      	lsls	r3, r1, #3
 800401c:	4651      	mov	r1, sl
 800401e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004022:	4651      	mov	r1, sl
 8004024:	00ca      	lsls	r2, r1, #3
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	4603      	mov	r3, r0
 800402c:	4642      	mov	r2, r8
 800402e:	189b      	adds	r3, r3, r2
 8004030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004034:	464b      	mov	r3, r9
 8004036:	460a      	mov	r2, r1
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800404c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004054:	460b      	mov	r3, r1
 8004056:	18db      	adds	r3, r3, r3
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800405a:	4613      	mov	r3, r2
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800406a:	f7fc f8b5 	bl	80001d8 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4b0d      	ldr	r3, [pc, #52]	@ (80040a8 <UART_SetConfig+0x2d4>)
 8004074:	fba3 1302 	umull	r1, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	2164      	movs	r1, #100	@ 0x64
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	3332      	adds	r3, #50	@ 0x32
 8004086:	4a08      	ldr	r2, [pc, #32]	@ (80040a8 <UART_SetConfig+0x2d4>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	f003 0207 	and.w	r2, r3, #7
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4422      	add	r2, r4
 800409a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800409c:	e106      	b.n	80042ac <UART_SetConfig+0x4d8>
 800409e:	bf00      	nop
 80040a0:	40011000 	.word	0x40011000
 80040a4:	40011400 	.word	0x40011400
 80040a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040be:	4642      	mov	r2, r8
 80040c0:	464b      	mov	r3, r9
 80040c2:	1891      	adds	r1, r2, r2
 80040c4:	6239      	str	r1, [r7, #32]
 80040c6:	415b      	adcs	r3, r3
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ce:	4641      	mov	r1, r8
 80040d0:	1854      	adds	r4, r2, r1
 80040d2:	4649      	mov	r1, r9
 80040d4:	eb43 0501 	adc.w	r5, r3, r1
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040f4:	464b      	mov	r3, r9
 80040f6:	eb45 0303 	adc.w	r3, r5, r3
 80040fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800410a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800411a:	4629      	mov	r1, r5
 800411c:	008b      	lsls	r3, r1, #2
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004124:	4621      	mov	r1, r4
 8004126:	008a      	lsls	r2, r1, #2
 8004128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800412c:	f7fc f854 	bl	80001d8 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4b60      	ldr	r3, [pc, #384]	@ (80042b8 <UART_SetConfig+0x4e4>)
 8004136:	fba3 2302 	umull	r2, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	011c      	lsls	r4, r3, #4
 800413e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004142:	2200      	movs	r2, #0
 8004144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004148:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800414c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004150:	4642      	mov	r2, r8
 8004152:	464b      	mov	r3, r9
 8004154:	1891      	adds	r1, r2, r2
 8004156:	61b9      	str	r1, [r7, #24]
 8004158:	415b      	adcs	r3, r3
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004160:	4641      	mov	r1, r8
 8004162:	1851      	adds	r1, r2, r1
 8004164:	6139      	str	r1, [r7, #16]
 8004166:	4649      	mov	r1, r9
 8004168:	414b      	adcs	r3, r1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004178:	4659      	mov	r1, fp
 800417a:	00cb      	lsls	r3, r1, #3
 800417c:	4651      	mov	r1, sl
 800417e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004182:	4651      	mov	r1, sl
 8004184:	00ca      	lsls	r2, r1, #3
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	4603      	mov	r3, r0
 800418c:	4642      	mov	r2, r8
 800418e:	189b      	adds	r3, r3, r2
 8004190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004194:	464b      	mov	r3, r9
 8004196:	460a      	mov	r2, r1
 8004198:	eb42 0303 	adc.w	r3, r2, r3
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041b8:	4649      	mov	r1, r9
 80041ba:	008b      	lsls	r3, r1, #2
 80041bc:	4641      	mov	r1, r8
 80041be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c2:	4641      	mov	r1, r8
 80041c4:	008a      	lsls	r2, r1, #2
 80041c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041ca:	f7fc f805 	bl	80001d8 <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	4b38      	ldr	r3, [pc, #224]	@ (80042b8 <UART_SetConfig+0x4e4>)
 80041d6:	fba3 2301 	umull	r2, r3, r3, r1
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2264      	movs	r2, #100	@ 0x64
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	1acb      	subs	r3, r1, r3
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	3332      	adds	r3, #50	@ 0x32
 80041e8:	4a33      	ldr	r2, [pc, #204]	@ (80042b8 <UART_SetConfig+0x4e4>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f4:	441c      	add	r4, r3
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80041fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004200:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	415b      	adcs	r3, r3
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004214:	4641      	mov	r1, r8
 8004216:	1851      	adds	r1, r2, r1
 8004218:	6039      	str	r1, [r7, #0]
 800421a:	4649      	mov	r1, r9
 800421c:	414b      	adcs	r3, r1
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800422c:	4659      	mov	r1, fp
 800422e:	00cb      	lsls	r3, r1, #3
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004236:	4651      	mov	r1, sl
 8004238:	00ca      	lsls	r2, r1, #3
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	4603      	mov	r3, r0
 8004240:	4642      	mov	r2, r8
 8004242:	189b      	adds	r3, r3, r2
 8004244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004246:	464b      	mov	r3, r9
 8004248:	460a      	mov	r2, r1
 800424a:	eb42 0303 	adc.w	r3, r2, r3
 800424e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	663b      	str	r3, [r7, #96]	@ 0x60
 800425a:	667a      	str	r2, [r7, #100]	@ 0x64
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004268:	4649      	mov	r1, r9
 800426a:	008b      	lsls	r3, r1, #2
 800426c:	4641      	mov	r1, r8
 800426e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004272:	4641      	mov	r1, r8
 8004274:	008a      	lsls	r2, r1, #2
 8004276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800427a:	f7fb ffad 	bl	80001d8 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <UART_SetConfig+0x4e4>)
 8004284:	fba3 1302 	umull	r1, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2164      	movs	r1, #100	@ 0x64
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	3332      	adds	r3, #50	@ 0x32
 8004296:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <UART_SetConfig+0x4e4>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4422      	add	r2, r4
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042b2:	46bd      	mov	sp, r7
 80042b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b8:	51eb851f 	.word	0x51eb851f

080042bc <memset>:
 80042bc:	4402      	add	r2, r0
 80042be:	4603      	mov	r3, r0
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004304 <__libc_init_array+0x38>)
 80042d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004308 <__libc_init_array+0x3c>)
 80042d2:	1b64      	subs	r4, r4, r5
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	2600      	movs	r6, #0
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	4d0b      	ldr	r5, [pc, #44]	@ (800430c <__libc_init_array+0x40>)
 80042de:	4c0c      	ldr	r4, [pc, #48]	@ (8004310 <__libc_init_array+0x44>)
 80042e0:	f000 f818 	bl	8004314 <_init>
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	2600      	movs	r6, #0
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	08004368 	.word	0x08004368
 8004308:	08004368 	.word	0x08004368
 800430c:	08004368 	.word	0x08004368
 8004310:	0800436c 	.word	0x0800436c

08004314 <_init>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

08004320 <_fini>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr
